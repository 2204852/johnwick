{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aria2p \u00b6 Command-line tool and Python library to interact with an aria2c daemon process through JSON-RPC. To avoid confusion: aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2c is the name of the command-line executable provided by aria2 . It can act as a daemon. aria2p ( p for Python) is a command-line client that can interact with an aria2c daemon. It is not an official client. There are other Python packages allowing you to interact with an aria2c daemon. These other packages do not offer enough usability (in my opinion), this is why I'm developing aria2p . Purpose : aria2c can run in the foreground, for one-time downloads, or in the background, as a daemon. This is where aria2p intervenes: when an instance of aria2c is running in the background, aria2p will be able to communicate with it to add downloads to the queue, remove, pause or resume them, etc. In order for aria2p to be able to communicate with the aria2c process, RPC mode must be enabled with the --enable-rpc option of aria2c . RPC stands for Remote Procedure Call . Although aria2c supports both JSON-RPC and XML-RPC protocols, aria2p works with JSON only (not XML). More information about how to configure aria2c to run as a daemon with RPC mode enabled can be found in the Configuration section of the documentation. Table of contents Requirements Installation Usage as a library Usage on the command line Troubleshoot Support Requirements \u00b6 aria2p requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8 You must also install aria2 . On systems with apt-get : sudo apt-get install aria2 Installation \u00b6 With pip : python3.6 -m pip install aria2p [ tui ] With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 aria2p [ tui ] The tui extra is needed for the interactive interface. If you don't need the interface (for example when you are writing a Python package with a dependency to aria2p), simply install aria2p without any extra. Usage (as a library) \u00b6 This library is still a work in progress. More examples will be added later. In the meantime, you can read the Reference section on the official documentation. import aria2p # initialization, these are the default values aria2 = aria2p . API ( aria2p . Client ( host = \"http://localhost\" , port = 6800 , secret = \"\" ) ) # list downloads downloads = aria2 . get_downloads () for download in downloads : print ( download . name , download . download_speed ) # add downloads magnet_uri = \"magnet:?xt=urn:...\" download = aria2 . add_magnet ( magnet_uri ) Usage (command-line) \u00b6 usage: aria2p [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...] Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC. Global options: -h, --help Show this help message and exit. Commands also accept the -h/--help option. -p PORT, --port PORT Port to use to connect to the remote server. -H HOST, --host HOST Host address for the remote server. -s SECRET, --secret SECRET Secret token to use to connect to the remote server. -L {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}, --log-level {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL} Log level to use -P LOG_PATH, --log-path LOG_PATH Log path to use. Can be a directory or a file. Commands: add Add downloads with URIs/Magnets/torrents/Metalinks. add-magnets (add-magnet) Add downloads with Magnet URIs. add-metalinks (add-metalink) Add downloads with Metalink files. add-torrents (add-torrent) Add downloads with torrent files. autopurge (autoclear) Automatically purge completed/removed/failed downloads. call Call a remote method through the JSON-RPC client. pause (stop) Pause downloads. remove (rm, del, delete) Remove downloads. resume (start) Resume downloads. show Show the download progression. top Launch the top-like interactive interface. listen Listen to notifications. Calling aria2p without any arguments will by default call the top command, which is a console interactive interface. Commands: add add-magnets add-metalinks add-torrents autopurge call listen pause remove resume show top add \u00b6 usage: aria2p add [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with URIs/Magnets/torrents/Metalinks. positional arguments: uris The URIs/file-paths to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file. add-magnets \u00b6 usage: aria2p add-magnets [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with Magnet URIs. positional arguments: uris The magnet URIs to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file. add-metalinks \u00b6 usage: aria2p add-metalinks [-h] [-f FROM_FILE] [metalink_files [metalink_files ...]] Add downloads with Metalink files. positional arguments: metalink_files The paths to the metalink files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file. add-torrents \u00b6 usage: aria2p add-torrents [-h] [-f FROM_FILE] [torrent_files [torrent_files ...]] Add downloads with torrent files. positional arguments: torrent_files The paths to the torrent files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file. autopurge \u00b6 usage: aria2p autopurge [-h] Automatically purge completed/removed/failed downloads. optional arguments: -h, --help Show this help message and exit. call \u00b6 usage: aria2p call [-h] [-P PARAMS [PARAMS ...] | -J PARAMS] method Call a remote method through the JSON-RPC client. positional arguments: method The method to call (case insensitive). Dashes and underscores will be removed so you can use as many as you want, or none. Prefixes like 'aria2.' or 'system.' are also optional. optional arguments: -h, --help Show this help message and exit. -P PARAMS [PARAMS ...], --params-list PARAMS [PARAMS ...] Parameters as a list of strings. -J PARAMS, --json-params PARAMS Parameters as a JSON string. You should always wrap it at least once in an array '[]'. As explained in the help text, the method can be the exact method name, or just the name without the prefix. It is case-insensitive, and dashes and underscores will be removed. The following are all equivalent: - aria2.addUri - aria2.adduri - addUri - ADDURI - aria2.ADD-URI - add_uri - A-d_D-u_R-i (yes it's valid) - A---R---I---A---2.a__d__d__u__r__i (I think you got it) - and even more ugly forms... Examples \u00b6 List all available methods. This example uses jq . $ aria2p call listmethods | jq [ \"aria2.addUri\", \"aria2.addTorrent\", \"aria2.getPeers\", \"aria2.addMetalink\", \"aria2.remove\", \"aria2.pause\", \"aria2.forcePause\", \"aria2.pauseAll\", \"aria2.forcePauseAll\", \"aria2.unpause\", \"aria2.unpauseAll\", \"aria2.forceRemove\", \"aria2.changePosition\", \"aria2.tellStatus\", \"aria2.getUris\", \"aria2.getFiles\", \"aria2.getServers\", \"aria2.tellActive\", \"aria2.tellWaiting\", \"aria2.tellStopped\", \"aria2.getOption\", \"aria2.changeUri\", \"aria2.changeOption\", \"aria2.getGlobalOption\", \"aria2.changeGlobalOption\", \"aria2.purgeDownloadResult\", \"aria2.removeDownloadResult\", \"aria2.getVersion\", \"aria2.getSessionInfo\", \"aria2.shutdown\", \"aria2.forceShutdown\", \"aria2.getGlobalStat\", \"aria2.saveSession\", \"system.multicall\", \"system.listMethods\", \"system.listNotifications\" ] List the GIDs (identifiers) of all active downloads. Note that we must give the parameters as a JSON string. $ aria2p call tellactive -J '[[\"gid\"]]' [{\"gid\": \"b686cad55029d4df\"}, {\"gid\": \"4b39a1ad8fd94e26\"}, {\"gid\": \"9d331cc4b287e5df\"}, {\"gid\": \"8c9de0df753a5195\"}] Pause a download using its GID. Note that when a single string argument is required, it can be passed directly with -P . $ aria2p call pause -P b686cad55029d4df \"b686cad55029d4df\" Add a download using magnet URIs. This example uses jq -r to remove the quotation marks around the result. $ aria2p call adduri -J '[[\"magnet:?xt=urn:...\"]]' | jq -r 4b39a1ad8fd94e26f Purge download results (remove completed downloads from the list). $ aria2p call purge_download_result \"OK\" listen \u00b6 usage: aria2p listen [-h] [-c CALLBACKS_MODULE] [-t TIMEOUT] [event_types [event_types ...]] Listen to notifications. positional arguments: event_types The types of notifications to process: start, pause, stop, error, complete or btcomplete. Example: aria2p listen error btcomplete. Useful if you want to spawn multiple specialized aria2p listener, for example one for each type of notification, but still want to use only one callback file. optional arguments: -h, --help Show this help message and exit. -c CALLBACKS_MODULE, --callbacks-module CALLBACKS_MODULE Path to the Python module defining your notifications callbacks. -t TIMEOUT, --timeout TIMEOUT Timeout in seconds to use when waiting for data over the WebSocket at each iteration. Use small values for faster reactivity when stopping to listen. pause \u00b6 usage: aria2p pause [-h] [-a] [-f] [gids [gids ...]] Pause downloads. positional arguments: gids The GIDs of the downloads to pause. optional arguments: -h, --help Show this help message and exit. -a, --all Pause all the downloads. -f, --force Pause without contacting servers first. remove \u00b6 usage: aria2p remove [-h] [-a] [-f] [gids [gids ...]] Remove downloads. positional arguments: gids The GIDs of the downloads to remove. optional arguments: -h, --help Show this help message and exit. -a, --all Remove all the downloads. -f, --force Remove without contacting servers first. resume \u00b6 usage: aria2p resume [-h] [-a] [gids [gids ...]] Resume downloads. positional arguments: gids The GIDs of the downloads to resume. optional arguments: -h, --help Show this help message and exit. -a, --all Resume all the downloads. show \u00b6 usage: aria2p show [-h] Show the download progression. optional arguments: -h, --help Show this help message and exit. top \u00b6 usage: aria2p top [-h] Launch the top-like interactive interface. optional arguments: -h, --help Show this help message and exit. Troubleshoot \u00b6 Error outputs like below when using aria2p as a Python library: requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=6800): Max retries exceeded with url: /jsonrpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1115b1908>: Failed to establish a new connection: [Errno 61] Connection refused',)) Solution: aria2c needs to be up and running first. Support \u00b6 To support this project, consider donating through one of the following platforms: Beerpay To support me as an open-source software author, consider donating or be a supporter through one of the following platforms GitHub Ko-fi Liberapay Patreon Paypal Thank you!","title":"Overview"},{"location":"#aria2p","text":"Command-line tool and Python library to interact with an aria2c daemon process through JSON-RPC. To avoid confusion: aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2c is the name of the command-line executable provided by aria2 . It can act as a daemon. aria2p ( p for Python) is a command-line client that can interact with an aria2c daemon. It is not an official client. There are other Python packages allowing you to interact with an aria2c daemon. These other packages do not offer enough usability (in my opinion), this is why I'm developing aria2p . Purpose : aria2c can run in the foreground, for one-time downloads, or in the background, as a daemon. This is where aria2p intervenes: when an instance of aria2c is running in the background, aria2p will be able to communicate with it to add downloads to the queue, remove, pause or resume them, etc. In order for aria2p to be able to communicate with the aria2c process, RPC mode must be enabled with the --enable-rpc option of aria2c . RPC stands for Remote Procedure Call . Although aria2c supports both JSON-RPC and XML-RPC protocols, aria2p works with JSON only (not XML). More information about how to configure aria2c to run as a daemon with RPC mode enabled can be found in the Configuration section of the documentation. Table of contents Requirements Installation Usage as a library Usage on the command line Troubleshoot Support","title":"aria2p"},{"location":"#requirements","text":"aria2p requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8 You must also install aria2 . On systems with apt-get : sudo apt-get install aria2","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install aria2p [ tui ] With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 aria2p [ tui ] The tui extra is needed for the interactive interface. If you don't need the interface (for example when you are writing a Python package with a dependency to aria2p), simply install aria2p without any extra.","title":"Installation"},{"location":"#usage-as-a-library","text":"This library is still a work in progress. More examples will be added later. In the meantime, you can read the Reference section on the official documentation. import aria2p # initialization, these are the default values aria2 = aria2p . API ( aria2p . Client ( host = \"http://localhost\" , port = 6800 , secret = \"\" ) ) # list downloads downloads = aria2 . get_downloads () for download in downloads : print ( download . name , download . download_speed ) # add downloads magnet_uri = \"magnet:?xt=urn:...\" download = aria2 . add_magnet ( magnet_uri )","title":"Usage (as a library)"},{"location":"#usage-command-line","text":"usage: aria2p [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...] Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC. Global options: -h, --help Show this help message and exit. Commands also accept the -h/--help option. -p PORT, --port PORT Port to use to connect to the remote server. -H HOST, --host HOST Host address for the remote server. -s SECRET, --secret SECRET Secret token to use to connect to the remote server. -L {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}, --log-level {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL} Log level to use -P LOG_PATH, --log-path LOG_PATH Log path to use. Can be a directory or a file. Commands: add Add downloads with URIs/Magnets/torrents/Metalinks. add-magnets (add-magnet) Add downloads with Magnet URIs. add-metalinks (add-metalink) Add downloads with Metalink files. add-torrents (add-torrent) Add downloads with torrent files. autopurge (autoclear) Automatically purge completed/removed/failed downloads. call Call a remote method through the JSON-RPC client. pause (stop) Pause downloads. remove (rm, del, delete) Remove downloads. resume (start) Resume downloads. show Show the download progression. top Launch the top-like interactive interface. listen Listen to notifications. Calling aria2p without any arguments will by default call the top command, which is a console interactive interface. Commands: add add-magnets add-metalinks add-torrents autopurge call listen pause remove resume show top","title":"Usage (command-line)"},{"location":"#add","text":"usage: aria2p add [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with URIs/Magnets/torrents/Metalinks. positional arguments: uris The URIs/file-paths to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file.","title":"add"},{"location":"#add-magnets","text":"usage: aria2p add-magnets [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with Magnet URIs. positional arguments: uris The magnet URIs to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file.","title":"add-magnets"},{"location":"#add-metalinks","text":"usage: aria2p add-metalinks [-h] [-f FROM_FILE] [metalink_files [metalink_files ...]] Add downloads with Metalink files. positional arguments: metalink_files The paths to the metalink files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file.","title":"add-metalinks"},{"location":"#add-torrents","text":"usage: aria2p add-torrents [-h] [-f FROM_FILE] [torrent_files [torrent_files ...]] Add downloads with torrent files. positional arguments: torrent_files The paths to the torrent files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file.","title":"add-torrents"},{"location":"#autopurge","text":"usage: aria2p autopurge [-h] Automatically purge completed/removed/failed downloads. optional arguments: -h, --help Show this help message and exit.","title":"autopurge"},{"location":"#call","text":"usage: aria2p call [-h] [-P PARAMS [PARAMS ...] | -J PARAMS] method Call a remote method through the JSON-RPC client. positional arguments: method The method to call (case insensitive). Dashes and underscores will be removed so you can use as many as you want, or none. Prefixes like 'aria2.' or 'system.' are also optional. optional arguments: -h, --help Show this help message and exit. -P PARAMS [PARAMS ...], --params-list PARAMS [PARAMS ...] Parameters as a list of strings. -J PARAMS, --json-params PARAMS Parameters as a JSON string. You should always wrap it at least once in an array '[]'. As explained in the help text, the method can be the exact method name, or just the name without the prefix. It is case-insensitive, and dashes and underscores will be removed. The following are all equivalent: - aria2.addUri - aria2.adduri - addUri - ADDURI - aria2.ADD-URI - add_uri - A-d_D-u_R-i (yes it's valid) - A---R---I---A---2.a__d__d__u__r__i (I think you got it) - and even more ugly forms...","title":"call"},{"location":"#examples","text":"List all available methods. This example uses jq . $ aria2p call listmethods | jq [ \"aria2.addUri\", \"aria2.addTorrent\", \"aria2.getPeers\", \"aria2.addMetalink\", \"aria2.remove\", \"aria2.pause\", \"aria2.forcePause\", \"aria2.pauseAll\", \"aria2.forcePauseAll\", \"aria2.unpause\", \"aria2.unpauseAll\", \"aria2.forceRemove\", \"aria2.changePosition\", \"aria2.tellStatus\", \"aria2.getUris\", \"aria2.getFiles\", \"aria2.getServers\", \"aria2.tellActive\", \"aria2.tellWaiting\", \"aria2.tellStopped\", \"aria2.getOption\", \"aria2.changeUri\", \"aria2.changeOption\", \"aria2.getGlobalOption\", \"aria2.changeGlobalOption\", \"aria2.purgeDownloadResult\", \"aria2.removeDownloadResult\", \"aria2.getVersion\", \"aria2.getSessionInfo\", \"aria2.shutdown\", \"aria2.forceShutdown\", \"aria2.getGlobalStat\", \"aria2.saveSession\", \"system.multicall\", \"system.listMethods\", \"system.listNotifications\" ] List the GIDs (identifiers) of all active downloads. Note that we must give the parameters as a JSON string. $ aria2p call tellactive -J '[[\"gid\"]]' [{\"gid\": \"b686cad55029d4df\"}, {\"gid\": \"4b39a1ad8fd94e26\"}, {\"gid\": \"9d331cc4b287e5df\"}, {\"gid\": \"8c9de0df753a5195\"}] Pause a download using its GID. Note that when a single string argument is required, it can be passed directly with -P . $ aria2p call pause -P b686cad55029d4df \"b686cad55029d4df\" Add a download using magnet URIs. This example uses jq -r to remove the quotation marks around the result. $ aria2p call adduri -J '[[\"magnet:?xt=urn:...\"]]' | jq -r 4b39a1ad8fd94e26f Purge download results (remove completed downloads from the list). $ aria2p call purge_download_result \"OK\"","title":"Examples"},{"location":"#listen","text":"usage: aria2p listen [-h] [-c CALLBACKS_MODULE] [-t TIMEOUT] [event_types [event_types ...]] Listen to notifications. positional arguments: event_types The types of notifications to process: start, pause, stop, error, complete or btcomplete. Example: aria2p listen error btcomplete. Useful if you want to spawn multiple specialized aria2p listener, for example one for each type of notification, but still want to use only one callback file. optional arguments: -h, --help Show this help message and exit. -c CALLBACKS_MODULE, --callbacks-module CALLBACKS_MODULE Path to the Python module defining your notifications callbacks. -t TIMEOUT, --timeout TIMEOUT Timeout in seconds to use when waiting for data over the WebSocket at each iteration. Use small values for faster reactivity when stopping to listen.","title":"listen"},{"location":"#pause","text":"usage: aria2p pause [-h] [-a] [-f] [gids [gids ...]] Pause downloads. positional arguments: gids The GIDs of the downloads to pause. optional arguments: -h, --help Show this help message and exit. -a, --all Pause all the downloads. -f, --force Pause without contacting servers first.","title":"pause"},{"location":"#remove","text":"usage: aria2p remove [-h] [-a] [-f] [gids [gids ...]] Remove downloads. positional arguments: gids The GIDs of the downloads to remove. optional arguments: -h, --help Show this help message and exit. -a, --all Remove all the downloads. -f, --force Remove without contacting servers first.","title":"remove"},{"location":"#resume","text":"usage: aria2p resume [-h] [-a] [gids [gids ...]] Resume downloads. positional arguments: gids The GIDs of the downloads to resume. optional arguments: -h, --help Show this help message and exit. -a, --all Resume all the downloads.","title":"resume"},{"location":"#show","text":"usage: aria2p show [-h] Show the download progression. optional arguments: -h, --help Show this help message and exit.","title":"show"},{"location":"#top","text":"usage: aria2p top [-h] Launch the top-like interactive interface. optional arguments: -h, --help Show this help message and exit.","title":"top"},{"location":"#troubleshoot","text":"Error outputs like below when using aria2p as a Python library: requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=6800): Max retries exceeded with url: /jsonrpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1115b1908>: Failed to establish a new connection: [Errno 61] Connection refused',)) Solution: aria2c needs to be up and running first.","title":"Troubleshoot"},{"location":"#support","text":"To support this project, consider donating through one of the following platforms: Beerpay To support me as an open-source software author, consider donating or be a supporter through one of the following platforms GitHub Ko-fi Liberapay Patreon Paypal Thank you!","title":"Support"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v0.8.0 - 2020-03-27 \u00b6 Compare with v0.7.1 Added \u00b6 Add a live property to Download ( 98a8504 ). See issue #44 . Fixed \u00b6 Re-apply pywal color theme if any when screen is resized ( 3e19deb ). v0.7.1 - 2020-01-18 \u00b6 Compare with v0.7.0 Fixed \u00b6 Fix Windows OSError when checking if path exists ( 2a17c75 ). See issue #41 . v0.7.0 - 2019-12-14 \u00b6 Compare with v0.6.0 BREAKING CHANGES \u00b6 Set asciimatics dependency as optional ( aria2p[tui] ) ( 95a404c ). Starting at version 0.7.0, you need to install aria2p with the tui extra if you want to use the interactive interface. Example: pip install aria2p[tui] . Removed \u00b6 Remove deprecated purge and purge_all methods from API ( 6baf63c ). Remove deprecated purge CLI command ( 8668c8d ). Misc \u00b6 Add makefile rule to bundle app with pyinstaller ( 7eabbb4 ). v0.6.0 - 2019-10-20 \u00b6 Compare with v0.5.2 BREAKING CHANGES \u00b6 Default command when calling aria2p without arguments is now top instead of show . Added \u00b6 Add command \"add\", and allow multiple parameters for \"add-\" commands ( 12f8667 ). Add -f, --from-file FILE option to add commands ( 63a137d ). Add a clean parameter to API.remove to delete aria2 control file ( d4b9a51 ). Changed \u00b6 Commands add-magnet, add-torrent and add-metalink are now called add-magnets, add-torrents and add-metalinks. Previous names are added as aliases to maintain backward compatibility. Deprecated \u00b6 Functions cli.subcommand_add_magnet , cli.subcommand_add_torrent or cli.subcommand_add_metalink are deprecated in favor of their pluralized names, cli.subcommand_add_magnets , cli.subcommand_add_torrents or cli.subcommand_add_metalinks , and will be removed in version 0.9.0. Fixed \u00b6 Always force remove files when removing download ( 7283a15 ). Don't try to fetch download when GID is None ( 8970385 ). v0.5.2 - 2019-10-15 \u00b6 Compare with v0.5.1 Fixed \u00b6 Don't crash when trying to remove a single file ( 14114c1 ). v0.5.1 - 2019-10-15 \u00b6 Compare with v0.5.0 Fixed \u00b6 Fix interface exit (oops) ( ca4adc5 ). v0.5.0 - 2019-10-15 \u00b6 Compare with v0.4.0 BREAKING CHANGES \u00b6 Commands finishing with -all were removed. Use their equivalent with the -a or --all option. Example: aria2p pause-all becomes aria2p pause --all . Added \u00b6 Add log path global option ( 7103e0b ). Fixed \u00b6 Interface does not crash anymore when trying to remove a completed/failed download ( 157e137 ). See issue GH-31 . Run extra arguments-checks for aliases as well ( cb70dae ). See issue GH-15 . v0.4.0 - 2019-10-13 \u00b6 Compare with v0.3.0 Added \u00b6 Add interactive interface (top command) (last commit: d8a2db2 ). Run the interactive interface with aria2p top . Hit \"h\" to show help. The interface is not finished, but I'm releasing it now to get early feedback. API: add option to remove files as well when removing downloads ( 981dcc0 ). Fixed \u00b6 Fix Download.move_up method (it was doing the inverse) ( 96a287a ). v0.3.0 - 2019-10-11 \u00b6 Compare with v0.2.5 Added \u00b6 Add listen subcommand ( 09195ae ). Implement notifications listener ( 33ee9ae ). Provide function to enable/configure logger ( 8620a09 ). Fixed \u00b6 Fix API pause_all and resume_all methods ( 0bf2209 ). See issue GH-24 . v0.2.5 - 2019-08-09 \u00b6 Compare with v0.2.4 Fixed \u00b6 Use path for name when download is metadata ( d18af50 ). v0.2.4 - 2019-08-09 \u00b6 Compare with v0.2.3 Fixed \u00b6 Don't cause exception when download name is not ready ( 604a0ab ). v0.2.3 - 2019-08-08 \u00b6 Compare with v0.2.2 Added \u00b6 Add some aliases ( 14ef63a ). Add file moving and purge ability to Download class ( 08d129a ). Add move/copy files methods to API ( e1d3994 ). Combine -all commands to normal ones, with -a, --all option, keep old ones as deprecated ( e5d287c and 939402f ). Improve exceptions handling with loguru ( e0ded18 ). Fixed \u00b6 Cast return value in get method with argument ( 5ee651a ). Fix Download.name and always initialize struct arguments to empty dictionaries ( 874deb9 ). Pass exceptions when download result cannot be removed ( 9a7659e ). v0.2.2 - 2019-02-21 \u00b6 Compare with v0.2.1 Documented \u00b6 Add configuration documentation ( 9525743 ). Add information in README ( 840c4b5 ). Add credits ( 6900eb2 ). Fixed \u00b6 Fix format of secret in params ( e01fd9c ). Print warning when connection to remote fails ( 57287fb ). v0.2.1 - 2019-01-23 \u00b6 Compare with v0.2.0 Fixed \u00b6 Fix commands not being mapped properly ( f9a0b29 ). v0.2.0 - 2019-01-23 \u00b6 Compare with v0.1.7 Version 0.2.0 adds subcommands to the CLI tool. The package now also provides documentation and tests. Various improvements and fixes. Status is still alpha, things might break! Added \u00b6 Add subcommands to CLI ( 93821cc ). Fixed \u00b6 Fix Download following API refactor ( 37f3b71 ). Fix encoding torrent content to base64/utf-8 ( a17eb92 ). v0.1.7 - 2018-12-29 \u00b6 Compare with v0.1.6 Fixed \u00b6 Fix specifier for Python version (allow 3.6+) ( f451df9 ). See issue GH-1 . v0.1.6 - 2018-12-26 \u00b6 Compare with v0.1.5 Added \u00b6 Add methods to Download to improve usability ( 5fe4649 ). Add refetch method for download objects ( c87e752 ). Add upload speed to display ( 5c8be6c ). Misc \u00b6 Handle return code and exceptions better ( 14f47f8 ). Improve JSONRPC errors messages, use defaults ( a3692dc ). Write documentation ( f5c9ffd ). v0.1.5 - 2018-12-20 \u00b6 Compare with v0.1.4 Misc \u00b6 Improve basic display ( 84ae386 ). v0.1.4 - 2018-12-20 \u00b6 Compare with v0.1.3 Added \u00b6 Add download speed and eta to display ( 1dd23bc ). Fixed \u00b6 Fix error handling in client.post ( 7f9e8aa ). Misc \u00b6 Use dynamic get/set attr for options ( fa0b962 ). Use properties ( 6efe3a6 ). v0.1.3 - 2018-12-17 \u00b6 Compare with v0.1.0 Misc \u00b6 Various tweaks and improvements for packaging the application. v0.1.0 - 2018-12-17 \u00b6 Compare with first commit Added \u00b6 Add pyproject.toml for black configuration ( dacb85e ). Add README ( 683086c ). Misc \u00b6 Package with Poetry! ( 648d0a5 ). Hello Git(Hub|Lab) ( 878497b ).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#v080-2020-03-27","text":"Compare with v0.7.1","title":"v0.8.0 - 2020-03-27"},{"location":"changelog/#added","text":"Add a live property to Download ( 98a8504 ). See issue #44 .","title":"Added"},{"location":"changelog/#fixed","text":"Re-apply pywal color theme if any when screen is resized ( 3e19deb ).","title":"Fixed"},{"location":"changelog/#v071-2020-01-18","text":"Compare with v0.7.0","title":"v0.7.1 - 2020-01-18"},{"location":"changelog/#fixed_1","text":"Fix Windows OSError when checking if path exists ( 2a17c75 ). See issue #41 .","title":"Fixed"},{"location":"changelog/#v070-2019-12-14","text":"Compare with v0.6.0","title":"v0.7.0 - 2019-12-14"},{"location":"changelog/#breaking-changes","text":"Set asciimatics dependency as optional ( aria2p[tui] ) ( 95a404c ). Starting at version 0.7.0, you need to install aria2p with the tui extra if you want to use the interactive interface. Example: pip install aria2p[tui] .","title":"BREAKING CHANGES"},{"location":"changelog/#removed","text":"Remove deprecated purge and purge_all methods from API ( 6baf63c ). Remove deprecated purge CLI command ( 8668c8d ).","title":"Removed"},{"location":"changelog/#misc","text":"Add makefile rule to bundle app with pyinstaller ( 7eabbb4 ).","title":"Misc"},{"location":"changelog/#v060-2019-10-20","text":"Compare with v0.5.2","title":"v0.6.0 - 2019-10-20"},{"location":"changelog/#breaking-changes_1","text":"Default command when calling aria2p without arguments is now top instead of show .","title":"BREAKING CHANGES"},{"location":"changelog/#added_1","text":"Add command \"add\", and allow multiple parameters for \"add-\" commands ( 12f8667 ). Add -f, --from-file FILE option to add commands ( 63a137d ). Add a clean parameter to API.remove to delete aria2 control file ( d4b9a51 ).","title":"Added"},{"location":"changelog/#changed","text":"Commands add-magnet, add-torrent and add-metalink are now called add-magnets, add-torrents and add-metalinks. Previous names are added as aliases to maintain backward compatibility.","title":"Changed"},{"location":"changelog/#deprecated","text":"Functions cli.subcommand_add_magnet , cli.subcommand_add_torrent or cli.subcommand_add_metalink are deprecated in favor of their pluralized names, cli.subcommand_add_magnets , cli.subcommand_add_torrents or cli.subcommand_add_metalinks , and will be removed in version 0.9.0.","title":"Deprecated"},{"location":"changelog/#fixed_2","text":"Always force remove files when removing download ( 7283a15 ). Don't try to fetch download when GID is None ( 8970385 ).","title":"Fixed"},{"location":"changelog/#v052-2019-10-15","text":"Compare with v0.5.1","title":"v0.5.2 - 2019-10-15"},{"location":"changelog/#fixed_3","text":"Don't crash when trying to remove a single file ( 14114c1 ).","title":"Fixed"},{"location":"changelog/#v051-2019-10-15","text":"Compare with v0.5.0","title":"v0.5.1 - 2019-10-15"},{"location":"changelog/#fixed_4","text":"Fix interface exit (oops) ( ca4adc5 ).","title":"Fixed"},{"location":"changelog/#v050-2019-10-15","text":"Compare with v0.4.0","title":"v0.5.0 - 2019-10-15"},{"location":"changelog/#breaking-changes_2","text":"Commands finishing with -all were removed. Use their equivalent with the -a or --all option. Example: aria2p pause-all becomes aria2p pause --all .","title":"BREAKING CHANGES"},{"location":"changelog/#added_2","text":"Add log path global option ( 7103e0b ).","title":"Added"},{"location":"changelog/#fixed_5","text":"Interface does not crash anymore when trying to remove a completed/failed download ( 157e137 ). See issue GH-31 . Run extra arguments-checks for aliases as well ( cb70dae ). See issue GH-15 .","title":"Fixed"},{"location":"changelog/#v040-2019-10-13","text":"Compare with v0.3.0","title":"v0.4.0 - 2019-10-13"},{"location":"changelog/#added_3","text":"Add interactive interface (top command) (last commit: d8a2db2 ). Run the interactive interface with aria2p top . Hit \"h\" to show help. The interface is not finished, but I'm releasing it now to get early feedback. API: add option to remove files as well when removing downloads ( 981dcc0 ).","title":"Added"},{"location":"changelog/#fixed_6","text":"Fix Download.move_up method (it was doing the inverse) ( 96a287a ).","title":"Fixed"},{"location":"changelog/#v030-2019-10-11","text":"Compare with v0.2.5","title":"v0.3.0 - 2019-10-11"},{"location":"changelog/#added_4","text":"Add listen subcommand ( 09195ae ). Implement notifications listener ( 33ee9ae ). Provide function to enable/configure logger ( 8620a09 ).","title":"Added"},{"location":"changelog/#fixed_7","text":"Fix API pause_all and resume_all methods ( 0bf2209 ). See issue GH-24 .","title":"Fixed"},{"location":"changelog/#v025-2019-08-09","text":"Compare with v0.2.4","title":"v0.2.5 - 2019-08-09"},{"location":"changelog/#fixed_8","text":"Use path for name when download is metadata ( d18af50 ).","title":"Fixed"},{"location":"changelog/#v024-2019-08-09","text":"Compare with v0.2.3","title":"v0.2.4 - 2019-08-09"},{"location":"changelog/#fixed_9","text":"Don't cause exception when download name is not ready ( 604a0ab ).","title":"Fixed"},{"location":"changelog/#v023-2019-08-08","text":"Compare with v0.2.2","title":"v0.2.3 - 2019-08-08"},{"location":"changelog/#added_5","text":"Add some aliases ( 14ef63a ). Add file moving and purge ability to Download class ( 08d129a ). Add move/copy files methods to API ( e1d3994 ). Combine -all commands to normal ones, with -a, --all option, keep old ones as deprecated ( e5d287c and 939402f ). Improve exceptions handling with loguru ( e0ded18 ).","title":"Added"},{"location":"changelog/#fixed_10","text":"Cast return value in get method with argument ( 5ee651a ). Fix Download.name and always initialize struct arguments to empty dictionaries ( 874deb9 ). Pass exceptions when download result cannot be removed ( 9a7659e ).","title":"Fixed"},{"location":"changelog/#v022-2019-02-21","text":"Compare with v0.2.1","title":"v0.2.2 - 2019-02-21"},{"location":"changelog/#documented","text":"Add configuration documentation ( 9525743 ). Add information in README ( 840c4b5 ). Add credits ( 6900eb2 ).","title":"Documented"},{"location":"changelog/#fixed_11","text":"Fix format of secret in params ( e01fd9c ). Print warning when connection to remote fails ( 57287fb ).","title":"Fixed"},{"location":"changelog/#v021-2019-01-23","text":"Compare with v0.2.0","title":"v0.2.1 - 2019-01-23"},{"location":"changelog/#fixed_12","text":"Fix commands not being mapped properly ( f9a0b29 ).","title":"Fixed"},{"location":"changelog/#v020-2019-01-23","text":"Compare with v0.1.7 Version 0.2.0 adds subcommands to the CLI tool. The package now also provides documentation and tests. Various improvements and fixes. Status is still alpha, things might break!","title":"v0.2.0 - 2019-01-23"},{"location":"changelog/#added_6","text":"Add subcommands to CLI ( 93821cc ).","title":"Added"},{"location":"changelog/#fixed_13","text":"Fix Download following API refactor ( 37f3b71 ). Fix encoding torrent content to base64/utf-8 ( a17eb92 ).","title":"Fixed"},{"location":"changelog/#v017-2018-12-29","text":"Compare with v0.1.6","title":"v0.1.7 - 2018-12-29"},{"location":"changelog/#fixed_14","text":"Fix specifier for Python version (allow 3.6+) ( f451df9 ). See issue GH-1 .","title":"Fixed"},{"location":"changelog/#v016-2018-12-26","text":"Compare with v0.1.5","title":"v0.1.6 - 2018-12-26"},{"location":"changelog/#added_7","text":"Add methods to Download to improve usability ( 5fe4649 ). Add refetch method for download objects ( c87e752 ). Add upload speed to display ( 5c8be6c ).","title":"Added"},{"location":"changelog/#misc_1","text":"Handle return code and exceptions better ( 14f47f8 ). Improve JSONRPC errors messages, use defaults ( a3692dc ). Write documentation ( f5c9ffd ).","title":"Misc"},{"location":"changelog/#v015-2018-12-20","text":"Compare with v0.1.4","title":"v0.1.5 - 2018-12-20"},{"location":"changelog/#misc_2","text":"Improve basic display ( 84ae386 ).","title":"Misc"},{"location":"changelog/#v014-2018-12-20","text":"Compare with v0.1.3","title":"v0.1.4 - 2018-12-20"},{"location":"changelog/#added_8","text":"Add download speed and eta to display ( 1dd23bc ).","title":"Added"},{"location":"changelog/#fixed_15","text":"Fix error handling in client.post ( 7f9e8aa ).","title":"Fixed"},{"location":"changelog/#misc_3","text":"Use dynamic get/set attr for options ( fa0b962 ). Use properties ( 6efe3a6 ).","title":"Misc"},{"location":"changelog/#v013-2018-12-17","text":"Compare with v0.1.0","title":"v0.1.3 - 2018-12-17"},{"location":"changelog/#misc_4","text":"Various tweaks and improvements for packaging the application.","title":"Misc"},{"location":"changelog/#v010-2018-12-17","text":"Compare with first commit","title":"v0.1.0 - 2018-12-17"},{"location":"changelog/#added_9","text":"Add pyproject.toml for black configuration ( dacb85e ). Add README ( 683086c ).","title":"Added"},{"location":"changelog/#misc_5","text":"Package with Poetry! ( 648d0a5 ). Hello Git(Hub|Lab) ( 878497b ).","title":"Misc"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions \u00b6 Bug Reports, Feature Requests, and Feedback \u00b6 Create a new GitHub issue ! Try to be as descriptive as possible. Bug Fixes, New Features and Documentation \u00b6 This project is developed using poetry . Follow the recommended installation method: curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python Fork the repository on GitHub ; Clone it on your machine; Go into the directory, and run poetry install to setup the development environment; Create a new branch with git checkout -b bug-fix-or-feature-name ; Code! Write tests. Run them all. The commands to run the tests are: poetry run pytest # to run all tests sequentially poetry run pytest -v # to print one test per line poetry run pytest -n 4 # to run tests in parallel (4 workers) poetry run pytest tests/test_api.py # to run tests in a specific file pytest provides the -k option to select tests based on their names: poetry run pytest -k \"api and remove\" poetry run pytest -k \"utils or stats\" See the documentation for the -k option for more examples. When the tests pass, commit; Push; ...and finally, create a new pull request ! Make sure to follow the guidelines. Merge/Pull Request Guidelines \u00b6 Make sure to have atomic commits and contextual commit messages! Check out this awesome blog post by Chris Beams for more information.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#bug-reports-feature-requests-and-feedback","text":"Create a new GitHub issue ! Try to be as descriptive as possible.","title":"Bug Reports, Feature Requests, and Feedback"},{"location":"contributing/#bug-fixes-new-features-and-documentation","text":"This project is developed using poetry . Follow the recommended installation method: curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python Fork the repository on GitHub ; Clone it on your machine; Go into the directory, and run poetry install to setup the development environment; Create a new branch with git checkout -b bug-fix-or-feature-name ; Code! Write tests. Run them all. The commands to run the tests are: poetry run pytest # to run all tests sequentially poetry run pytest -v # to print one test per line poetry run pytest -n 4 # to run tests in parallel (4 workers) poetry run pytest tests/test_api.py # to run tests in a specific file pytest provides the -k option to select tests based on their names: poetry run pytest -k \"api and remove\" poetry run pytest -k \"utils or stats\" See the documentation for the -k option for more examples. When the tests pass, commit; Push; ...and finally, create a new pull request ! Make sure to follow the guidelines.","title":"Bug Fixes, New Features and Documentation"},{"location":"contributing/#mergepull-request-guidelines","text":"Make sure to have atomic commits and contextual commit messages! Check out this awesome blog post by Chris Beams for more information.","title":"Merge/Pull Request Guidelines"},{"location":"credits/","text":"Credits \u00b6 These projects were used to build aria2p . Thank you! python | poetry Direct dependencies \u00b6 asciimatics | bandit | black | coverage | flake8 | ipython | isort | jinja2-cli | loguru | mkdocs | mkdocs-material | mkdocstrings | PyInstaller | pylint | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | responses | safety | toml | websocket_client Indirect dependencies \u00b6 aiocontextvars | altgraph | apipkg | appdirs | appnope | astroid | atomicwrites | attrs | backcall | certifi | chardet | Click | colorama | contextvars | decorator | dparse | entrypoints | execnet | future | gitdb2 | GitPython | htmlmin | idna | immutables | importlib-metadata | ipython-genutils | jedi | Jinja2 | jsmin | lazy-object-proxy | livereload | Markdown | MarkupSafe | mccabe | mkdocs-minify-plugin | more-itertools | packaging | parso | pathspec | pbr | pep562 | pexpect | pickleshare | Pillow | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pyfiglet | pyflakes | Pygments | pymdown-extensions | pyparsing | pypiwin32 | pytest-forked | pywin32 | PyYAML | regex | six | smmap2 | stevedore | termcolor | tornado | traitlets | typed-ast | urllib3 | wcwidth | websocket-client | win32-setctime | wrapt | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build aria2p . Thank you! python | poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"asciimatics | bandit | black | coverage | flake8 | ipython | isort | jinja2-cli | loguru | mkdocs | mkdocs-material | mkdocstrings | PyInstaller | pylint | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | responses | safety | toml | websocket_client","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"aiocontextvars | altgraph | apipkg | appdirs | appnope | astroid | atomicwrites | attrs | backcall | certifi | chardet | Click | colorama | contextvars | decorator | dparse | entrypoints | execnet | future | gitdb2 | GitPython | htmlmin | idna | immutables | importlib-metadata | ipython-genutils | jedi | Jinja2 | jsmin | lazy-object-proxy | livereload | Markdown | MarkupSafe | mccabe | mkdocs-minify-plugin | more-itertools | packaging | parso | pathspec | pbr | pep562 | pexpect | pickleshare | Pillow | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pyfiglet | pyflakes | Pygments | pymdown-extensions | pyparsing | pypiwin32 | pytest-forked | pywin32 | PyYAML | regex | six | smmap2 | stevedore | termcolor | tornado | traitlets | typed-ast | urllib3 | wcwidth | websocket-client | win32-setctime | wrapt | zipp More credits from the author","title":"Indirect dependencies"},{"location":"usage/","text":"Usage \u00b6 Extensive usage instructions will be added later, when the application is more stable. You can also refer to the README / Overview. Listening to notifications \u00b6 Since version 0.3 , it is possible to listen to the server notifications thanks to the websocket-client Python package. The server sends a notification to the client through a WebSocket for each of these events: - a download is started, - a download is paused, - a download is stopped, - a download fails, - a download is complete, - a bittorrent download is complete (received 100%, still seeding). Through the command line \u00b6 The command line interface offers a listen subcommand: aria2p listen -c /path/to/callbacks.py In the future, a default path will be used for the callbacks module. The callbacks.py file is a Python module defining one or more of these callback functions: - on_download_start , - on_download_pause , - on_download_stop , - on_download_error , - on_download_complete , - on_bt_download_complete . Each one of these callbacks must accept two parameters: the API instance and the GID of the download. You can use the names you want. Example: # ~/callbacks.py import subprocess from pathlib import Path def on_download_error ( api , gid ): # pop a desktop notification using notify-send download = api . get_download ( gid ) summary = f \"A download failed\" body = f \" { download . name } \\n { download . error_message } (code: { download . error_code } ).\" subprocess . call ([ \"notify-send\" , \"-t\" , \"10000\" , summary , body ]) def on_download_complete ( api , gid ): download = api . get_download ( gid ) # purge if it was a magnet metadata download if download . is_metadata : download . purge () return # move files to another folder destination = Path . home () / \"library\" if download . move_files ( destination ): download . control_file_path . unlink () download . purge () You can now use this callbacks module with aria2p listen -c ~/callbacks.py . Process specific types of notifications \u00b6 If you want to listen to only a particular type of notification, even though your callbacks module defines all the possible callbacks, you can pass additional arguments: # let say you want to run multiple listeners: # one for errors, one for completions, and one for the rest aria2p listen -c ~/callbacks.py error & aria2p listen -c ~/callbacks.py complete btcomplete & aria2p listen -c ~/callbacks.py start pause stop & This is possible because the server sends the notifications to every client that is listening. Interruption \u00b6 To stop listening, send a SIGTERM or SIGINT signal to the process, for example by hitting Control-C if aria2p is running in the foreground. If a notification is currently being handled, it will finish before the listener is stopped. Timeout \u00b6 If you find the default five seconds to be too long when interrupting the process, you can decrease this timeout value by passing the -t or --timeout option: aria2p listen -c ~/callbacks.py -t 1 Programmatically \u00b6 Both the API and Client classes provide a method called listen_to_notifications , and another one called stop_listening . Please check their respective documentation.","title":"Usage"},{"location":"usage/#usage","text":"Extensive usage instructions will be added later, when the application is more stable. You can also refer to the README / Overview.","title":"Usage"},{"location":"usage/#listening-to-notifications","text":"Since version 0.3 , it is possible to listen to the server notifications thanks to the websocket-client Python package. The server sends a notification to the client through a WebSocket for each of these events: - a download is started, - a download is paused, - a download is stopped, - a download fails, - a download is complete, - a bittorrent download is complete (received 100%, still seeding).","title":"Listening to notifications"},{"location":"usage/#through-the-command-line","text":"The command line interface offers a listen subcommand: aria2p listen -c /path/to/callbacks.py In the future, a default path will be used for the callbacks module. The callbacks.py file is a Python module defining one or more of these callback functions: - on_download_start , - on_download_pause , - on_download_stop , - on_download_error , - on_download_complete , - on_bt_download_complete . Each one of these callbacks must accept two parameters: the API instance and the GID of the download. You can use the names you want. Example: # ~/callbacks.py import subprocess from pathlib import Path def on_download_error ( api , gid ): # pop a desktop notification using notify-send download = api . get_download ( gid ) summary = f \"A download failed\" body = f \" { download . name } \\n { download . error_message } (code: { download . error_code } ).\" subprocess . call ([ \"notify-send\" , \"-t\" , \"10000\" , summary , body ]) def on_download_complete ( api , gid ): download = api . get_download ( gid ) # purge if it was a magnet metadata download if download . is_metadata : download . purge () return # move files to another folder destination = Path . home () / \"library\" if download . move_files ( destination ): download . control_file_path . unlink () download . purge () You can now use this callbacks module with aria2p listen -c ~/callbacks.py .","title":"Through the command line"},{"location":"usage/#process-specific-types-of-notifications","text":"If you want to listen to only a particular type of notification, even though your callbacks module defines all the possible callbacks, you can pass additional arguments: # let say you want to run multiple listeners: # one for errors, one for completions, and one for the rest aria2p listen -c ~/callbacks.py error & aria2p listen -c ~/callbacks.py complete btcomplete & aria2p listen -c ~/callbacks.py start pause stop & This is possible because the server sends the notifications to every client that is listening.","title":"Process specific types of notifications"},{"location":"usage/#interruption","text":"To stop listening, send a SIGTERM or SIGINT signal to the process, for example by hitting Control-C if aria2p is running in the foreground. If a notification is currently being handled, it will finish before the listener is stopped.","title":"Interruption"},{"location":"usage/#timeout","text":"If you find the default five seconds to be too long when interrupting the process, you can decrease this timeout value by passing the -t or --timeout option: aria2p listen -c ~/callbacks.py -t 1","title":"Timeout"},{"location":"usage/#programmatically","text":"Both the API and Client classes provide a method called listen_to_notifications , and another one called stop_listening . Please check their respective documentation.","title":"Programmatically"},{"location":"reference/api/","text":"\u00b6 This module defines the API class, which makes use of a JSON-RPC client to provide higher-level methods to interact easily with a remote aria2c process. API \u00b6 A class providing high-level methods to interact with a remote aria2c process. This class is instantiated with a reference to a [ Client ][aria2p.client.Client] instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like [ Download ][aria2p.downloads.Download], allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc.. __init__ ( self , client = None ) special \u00b6 Initialization method. Parameters: Name Type Description Default client an instance of the [aria2p.client.Client][] class. None Source code in aria2p/api.py 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , client = None ) -> None : \"\"\" Initialization method. Parameters: client: an instance of the [aria2p.client.Client][] class. \"\"\" if client is None : client = Client () self . client = client self . listener = None add_magnet ( self , magnet_uri , options = None , position = None ) \u00b6 Add a download with a Magnet URI. Parameters: Name Type Description Default magnet_uri str the Magnet URI. required options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def add_magnet ( self , magnet_uri : str , options : Union [ Options , dict ] = None , position : int = None ) -> Download : \"\"\" Add a download with a Magnet URI. Parameters: magnet_uri: the Magnet URI. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ([ magnet_uri ], client_options , position ) return self . get_download ( gid ) add_metalink ( self , metalink_file_path , options = None , position = None ) \u00b6 Add a download with a Metalink file. Parameters: Name Type Description Default metalink_file_path Union[str, pathlib.Path] the path to the Metalink file. required options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description List[aria2p.downloads.Download] The newly created download objects. Source code in aria2p/api.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def add_metalink ( self , metalink_file_path : Union [ str , Path ], options : Union [ Options , dict ] = None , position : int = None ) -> List [ Download ]: \"\"\" Add a download with a Metalink file. Parameters: metalink_file_path: the path to the Metalink file. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download objects. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( metalink_file_path , \"rb\" ) as stream : metalink_contents = stream . read () encoded_contents = b64encode ( metalink_contents ) . decode ( \"utf8\" ) gids = self . client . add_metalink ( encoded_contents , client_options , position ) return self . get_downloads ( gids ) add_torrent ( self , torrent_file_path , uris = None , options = None , position = None ) \u00b6 Add a download with a torrent file (usually .torrent extension). Parameters: Name Type Description Default torrent_file_path Union[str, pathlib.Path] the path to the torrent file. required uris List[str] a list of URIs used for Web-seeding. None options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def add_torrent ( self , torrent_file_path : Union [ str , Path ], uris : List [ str ] = None , options : Union [ Options , dict ] = None , position : int = None , ) -> Download : \"\"\" Add a download with a torrent file (usually .torrent extension). Parameters: torrent_file_path: the path to the torrent file. uris: a list of URIs used for Web-seeding. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if uris is None : uris = [] if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( torrent_file_path , \"rb\" ) as stream : torrent_contents = stream . read () encoded_contents = b64encode ( torrent_contents ) . decode ( \"utf8\" ) gid = self . client . add_torrent ( encoded_contents , uris , client_options , position ) return self . get_download ( gid ) add_uris ( self , uris , options = None , position = None ) \u00b6 Add a download with a URL (or more). Parameters: Name Type Description Default uris List[str] a list of URIs that point to the same resource. required options Optional[Union[aria2p.options.Options, dict]] an instance of the Options class or a dictionary containing aria2c options to create the download with. None position Optional[int] the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def add_uris ( self , uris : List [ str ], options : Optional [ Union [ Options , dict ]] = None , position : Optional [ int ] = None ) -> Download : \"\"\" Add a download with a URL (or more). Parameters: uris: a list of URIs that point to the same resource. options: an instance of the ``Options`` class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ( uris , client_options , position ) return self . get_download ( gid ) autopurge ( self ) \u00b6 Purge completed, removed or failed downloads from the queue. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py 497 498 499 500 501 502 503 504 505 506 507 def autopurge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Returns: Success or failure of the operation. \"\"\" version = get_version () if version . major == 0 and 9 > version . minor >= 7 : logger . warning ( \"Future change warning: API method 'autopurge' will be renamed 'purge' in version 0.9.0.\" ) return self . client . purge_download_result () copy_files ( downloads , to_directory , force = False ) staticmethod \u00b6 Copy downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[str, pathlib.Path] the target directory to copy files into. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 @staticmethod def copy_files ( downloads : List [ Download ], to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Parameters: downloads: the list of downloads for which to move files. to_directory: the target directory to copy files into. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . copytree ( str ( path ), str ( to_directory / path . name )) elif path . is_file (): shutil . copy ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results get_download ( self , gid ) \u00b6 Get a [ Download ][aria2p.downloads.Download] object thanks to its GID. Parameters: Name Type Description Default gid str the GID of the download to get. required Returns: Type Description Download The retrieved download object. Source code in aria2p/api.py 214 215 216 217 218 219 220 221 222 223 224 def get_download ( self , gid : str ) -> Download : \"\"\" Get a [`Download`][aria2p.downloads.Download] object thanks to its GID. Parameters: gid: the GID of the download to get. Returns: The retrieved download object. \"\"\" return Download ( self , self . client . tell_status ( gid )) get_downloads ( self , gids = None ) \u00b6 Get a list of [ Download ][aria2p.downloads.Download] object thanks to their GIDs. Parameters: Name Type Description Default gids List[str] the GIDs of the downloads to get. If None, return all the downloads. None Returns: Type Description List[aria2p.downloads.Download] The retrieved download objects. Source code in aria2p/api.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def get_downloads ( self , gids : List [ str ] = None ) -> List [ Download ]: \"\"\" Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs. Parameters: gids: the GIDs of the downloads to get. If None, return all the downloads. Returns: The retrieved download objects. \"\"\" downloads = [] if gids : for gid in gids : downloads . append ( Download ( self , self . client . tell_status ( gid ))) else : structs = [] structs . extend ( self . client . tell_active ()) structs . extend ( self . client . tell_waiting ( 0 , 1000 )) structs . extend ( self . client . tell_stopped ( 0 , 1000 )) downloads = [ Download ( self , struct ) for struct in structs ] return downloads get_global_options ( self ) \u00b6 Get the global options. Returns: Type Description Options The global aria2c options. Source code in aria2p/api.py 525 526 527 528 529 530 531 532 def get_global_options ( self ) -> Options : \"\"\" Get the global options. Returns: The global aria2c options. \"\"\" return Options ( self , self . client . get_global_option ()) get_options ( self , downloads ) \u00b6 Get options for each of the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to get the options of. required Returns: Type Description List[aria2p.options.Options] Options object for each given download. Source code in aria2p/api.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 def get_options ( self , downloads : List [ Download ]) -> List [ Options ]: \"\"\" Get options for each of the given downloads. Parameters: downloads: the list of downloads to get the options of. Returns: Options object for each given download. \"\"\" # TODO: batch/multicall candidate options = [] for download in downloads : options . append ( Options ( self , self . client . get_option ( download . gid ), download )) return options get_stats ( self ) \u00b6 Get the stats of the remote aria2c process. Returns: Type Description Stats stats: the global stats returned by the remote process. Source code in aria2p/api.py 575 576 577 578 579 580 581 582 def get_stats ( self ) -> Stats : \"\"\" Get the stats of the remote aria2c process. Returns: stats: the global stats returned by the remote process. \"\"\" return Stats ( self . client . get_global_stat ()) listen_to_notifications ( self , threaded = False , ** kwargs ) \u00b6 Start listening to aria2 notifications via WebSocket. This method differs from [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, api and gid , instead of only gid . Accepting api allows to use the high-level methods of the [ API ][aria2p.api.API] class. Stop listening to notifications with the [ API.stop_listening ][aria2p.api.API.stop_listening] method. Parameters: Name Type Description Default threaded bool Whether to start the listening loop in a thread or not (non-blocking or blocking). False Source code in aria2p/api.py 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 def listen_to_notifications ( self , threaded : bool = False , ** kwargs : Any ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, ``api`` and ``gid``, instead of only ``gid``. Accepting ``api`` allows to use the high-level methods of the [`API`][aria2p.api.API] class. Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method. Parameters: threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking). \"\"\" def closure ( callback ): return ( lambda gid : callback ( self , gid )) if callable ( callback ) else None def run (): self . client . listen_to_notifications ( ** { key : closure ( value ) if key . startswith ( \"on_\" ) else value for key , value in kwargs . items ()} ) if threaded : kwargs [ \"handle_signals\" ] = False self . listener = threading . Thread ( target = run ) self . listener . start () else : run () move ( self , download , pos ) \u00b6 Move a download in the queue, relatively to its current position. Parameters: Name Type Description Default download Download the download object to move. required pos int the relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 250 251 252 253 254 255 256 257 258 259 260 261 def move ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, relatively to its current position. Parameters: download: the download object to move. pos: the relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" ) move_down ( self , download , pos = 1 ) \u00b6 Move a download down in the queue. Parameters: Name Type Description Default download Download the download object to move. required pos int number of times to move down. With negative values, will move up (use move or move_up instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py 294 295 296 297 298 299 300 301 302 303 304 305 def move_down ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download down in the queue. Parameters: download: the download object to move. pos: number of times to move down. With negative values, will move up (use move or move_up instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" ) move_files ( downloads , to_directory , force = False ) staticmethod \u00b6 Move downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[str, pathlib.Path] the target directory to move files to. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 @staticmethod def move_files ( downloads : List [ Download ], to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Parameters: downloads: the list of downloads for which to move files. to_directory: the target directory to move files to. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : shutil . move ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results move_to ( self , download , pos ) \u00b6 Move a download in the queue, with absolute positioning. Parameters: Name Type Description Default download Download the download object to move. required pos int the absolute position in the queue where to move the download. 0 for top, -1 for bottom. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 def move_to ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, with absolute positioning. Parameters: download: the download object to move. pos: the absolute position in the queue where to move the download. 0 for top, -1 for bottom. Returns: The new position of the download. \"\"\" if pos < 0 : how = \"POS_END\" pos = - pos else : how = \"POS_SET\" return self . client . change_position ( download . gid , pos , how ) move_to_bottom ( self , download ) \u00b6 Move a download to the bottom of the queue. Parameters: Name Type Description Default download Download the download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 319 320 321 322 323 324 325 326 327 328 329 def move_to_bottom ( self , download : Download ) -> int : \"\"\" Move a download to the bottom of the queue. Parameters: download: the download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_END\" ) move_to_top ( self , download ) \u00b6 Move a download to the top of the queue. Parameters: Name Type Description Default download Download the download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 307 308 309 310 311 312 313 314 315 316 317 def move_to_top ( self , download : Download ) -> int : \"\"\" Move a download to the top of the queue. Parameters: download: the download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_SET\" ) move_up ( self , download , pos = 1 ) \u00b6 Move a download up in the queue. Parameters: Name Type Description Default download Download the download object to move. required pos int number of times to move up. With negative values, will move down (use move or move_down instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py 281 282 283 284 285 286 287 288 289 290 291 292 def move_up ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download up in the queue. Parameters: download: the download object to move. pos: number of times to move up. With negative values, will move down (use move or move_down instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , - pos , \"POS_CUR\" ) pause ( self , downloads , force = False ) \u00b6 Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to remove. required force bool whether to pause immediately without contacting servers or not. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 def pause ( self , downloads : List [ Download ], force : bool = False ) -> List [ bool ]: \"\"\" Remove the given downloads from the list. Parameters: downloads: the list of downloads to remove. force: whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate if force : pause_func = self . client . force_pause else : pause_func = self . client . pause result = [] for download in downloads : try : pause_func ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to pause download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result pause_all ( self , force = False ) \u00b6 Remove the given downloads from the list. Parameters: Name Type Description Default force bool whether to pause immediately without contacting servers or not. False Returns: Type Description bool Success or failure of the operation to pause all downloads. Source code in aria2p/api.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def pause_all ( self , force : bool = False ) -> bool : \"\"\" Remove the given downloads from the list. Parameters: force: whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation to pause all downloads. \"\"\" if force : pause_func = self . client . force_pause_all else : pause_func = self . client . pause_all return pause_func () == \"OK\" remove ( self , downloads , force = False , files = False , clean = True ) \u00b6 Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to remove. required force bool whether to force the removal or not. False files bool whether to remove downloads files as well. False clean bool whether to remove the aria2 control file as well. True Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 def remove ( self , downloads : List [ Download ], force : bool = False , files : bool = False , clean : bool = True ) -> List [ bool ]: \"\"\" Remove the given downloads from the list. Parameters: downloads: the list of downloads to remove. force: whether to force the removal or not. files: whether to remove downloads files as well. clean: whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate if force : remove_func = self . client . force_remove else : remove_func = self . client . remove result = [] for download in downloads : if download . is_complete or download . is_removed or download . has_failed : logger . debug ( f \"Try to remove download result { download . gid } \" ) try : self . client . remove_download_result ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download result { download . gid } \" ) result . append ( True ) else : logger . debug ( f \"Try to remove download { download . gid } \" ) try : removed_gid = remove_func ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download { download . gid } \" ) result . append ( True ) try : self . client . remove_download_result ( download . gid ) except ClientException as error2 : logger . debug ( f \"Failed to remove download result { download . gid } \" ) logger . opt ( exception = True ) . trace ( error2 ) if removed_gid != download . gid : logger . debug ( f \"Removed download GID# { removed_gid } is different than download GID# { download . gid } \" ) try : self . client . remove_download_result ( removed_gid ) except ClientException as error2 : logger . debug ( f \"Failed to remove download result { removed_gid } \" ) logger . opt ( exception = True ) . trace ( error2 ) if clean : # FUTURE: use missing_ok parameter on Python 3.8 try : download . control_file_path . unlink () except FileNotFoundError : logger . debug ( f \"aria2 control file { download . control_file_path } was not found\" ) else : logger . debug ( f \"Removed control file { download . control_file_path } \" ) if files and result [ - 1 ]: self . remove_files ([ download ], force = True ) return result remove_all ( self , force = False ) \u00b6 Remove all downloads from the list. Parameters: Name Type Description Default force bool whether to force the removal or not. False Returns: Type Description bool Success or failure of the operation to remove all downloads. Source code in aria2p/api.py 404 405 406 407 408 409 410 411 412 413 414 def remove_all ( self , force : bool = False ) -> bool : \"\"\" Remove all downloads from the list. Parameters: force: whether to force the removal or not. Returns: Success or failure of the operation to remove all downloads. \"\"\" return all ( self . remove ( self . get_downloads (), force = force )) remove_files ( downloads , force = False ) staticmethod \u00b6 Remove downloaded files. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to remove files. required force bool whether to remove files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 @staticmethod def remove_files ( downloads : List [ Download ], force : bool = False ) -> List [ bool ]: \"\"\" Remove downloaded files. Parameters: downloads: the list of downloads for which to remove files. force: whether to remove files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . rmtree ( str ( path )) else : path . unlink () results . append ( True ) else : results . append ( False ) return results resume ( self , downloads ) \u00b6 Resume (unpause) the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to resume. required Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def resume ( self , downloads : List [ Download ]) -> List [ bool ]: \"\"\" Resume (unpause) the given downloads. Parameters: downloads: the list of downloads to resume. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate result = [] for download in downloads : try : self . client . unpause ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to resume download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result resume_all ( self ) \u00b6 Resume (unpause) all downloads. Returns: Type Description bool Success or failure of the operation to resume all downloads. Source code in aria2p/api.py 488 489 490 491 492 493 494 495 def resume_all ( self ) -> bool : \"\"\" Resume (unpause) all downloads. Returns: Success or failure of the operation to resume all downloads. \"\"\" return self . client . unpause_all () == \"OK\" search ( self , patterns ) \u00b6 Not implemented. Search and return [ Download ][aria2p.downloads.Download] objects based on multiple patterns. Parameters: Name Type Description Default patterns List[str] the patterns used to filter the download list. required Returns: Type Description List[aria2p.downloads.Download] The download objects matching the patterns. Source code in aria2p/api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def search ( self , patterns : List [ str ]) -> List [ Download ]: \"\"\" Not implemented. Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns. Parameters: patterns: the patterns used to filter the download list. Returns: The download objects matching the patterns. \"\"\" # gid # status # totalLength # completedLength # uploadLength # bitfield # downloadSpeed # uploadSpeed # infoHash # numSeeders # seeder # pieceLength # numPieces # connections # errorCode # errorMessage # followedBy # following # belongsTo # dir # files # bittorrent # announceList # comment # creationDate # mode # info # name # verifiedLength # verifyIntegrityPending raise NotImplementedError set_global_options ( self , options ) \u00b6 Set global options. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required Returns: Type Description bool Success or failure of the operation for changing global options. Source code in aria2p/api.py 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 def set_global_options ( self , options : Union [ Options , dict ]) -> bool : \"\"\" Set global options. Parameters: options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. Returns: Success or failure of the operation for changing global options. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options return self . client . change_global_option ( client_options ) == \"OK\" set_options ( self , options , downloads ) \u00b6 Set options for specific downloads. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required downloads List[aria2p.downloads.Download] the list of downloads to set the options for. required Returns: Type Description List[bool] Success or failure of the operation for changing options for each given download. Source code in aria2p/api.py 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 def set_options ( self , options : Union [ Options , dict ], downloads : List [ Download ]) -> List [ bool ]: \"\"\" Set options for specific downloads. Parameters: options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. downloads: the list of downloads to set the options for. Returns: Success or failure of the operation for changing options for each given download. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options # TODO: batch/multicall candidate results = [] for download in downloads : results . append ( self . client . change_option ( download . gid , client_options ) == \"OK\" ) return results stop_listening ( self ) \u00b6 Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [ listen_to_notifications ][aria2p.api.API.listen_to_notifications]. Source code in aria2p/api.py 700 701 702 703 704 705 706 707 708 709 710 711 def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [`listen_to_notifications`][aria2p.api.API.listen_to_notifications]. \"\"\" self . client . stop_listening () if self . listener : self . listener . join () self . listener = None","title":"api.py"},{"location":"reference/api/#aria2p.api","text":"This module defines the API class, which makes use of a JSON-RPC client to provide higher-level methods to interact easily with a remote aria2c process.","title":"aria2p.api"},{"location":"reference/api/#aria2p.api.API","text":"A class providing high-level methods to interact with a remote aria2c process. This class is instantiated with a reference to a [ Client ][aria2p.client.Client] instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like [ Download ][aria2p.downloads.Download], allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc..","title":"API"},{"location":"reference/api/#aria2p.api.API.__init__","text":"Initialization method. Parameters: Name Type Description Default client an instance of the [aria2p.client.Client][] class. None Source code in aria2p/api.py 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , client = None ) -> None : \"\"\" Initialization method. Parameters: client: an instance of the [aria2p.client.Client][] class. \"\"\" if client is None : client = Client () self . client = client self . listener = None","title":"__init__()"},{"location":"reference/api/#aria2p.api.API.add_magnet","text":"Add a download with a Magnet URI. Parameters: Name Type Description Default magnet_uri str the Magnet URI. required options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def add_magnet ( self , magnet_uri : str , options : Union [ Options , dict ] = None , position : int = None ) -> Download : \"\"\" Add a download with a Magnet URI. Parameters: magnet_uri: the Magnet URI. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ([ magnet_uri ], client_options , position ) return self . get_download ( gid )","title":"add_magnet()"},{"location":"reference/api/#aria2p.api.API.add_metalink","text":"Add a download with a Metalink file. Parameters: Name Type Description Default metalink_file_path Union[str, pathlib.Path] the path to the Metalink file. required options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description List[aria2p.downloads.Download] The newly created download objects. Source code in aria2p/api.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def add_metalink ( self , metalink_file_path : Union [ str , Path ], options : Union [ Options , dict ] = None , position : int = None ) -> List [ Download ]: \"\"\" Add a download with a Metalink file. Parameters: metalink_file_path: the path to the Metalink file. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download objects. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( metalink_file_path , \"rb\" ) as stream : metalink_contents = stream . read () encoded_contents = b64encode ( metalink_contents ) . decode ( \"utf8\" ) gids = self . client . add_metalink ( encoded_contents , client_options , position ) return self . get_downloads ( gids )","title":"add_metalink()"},{"location":"reference/api/#aria2p.api.API.add_torrent","text":"Add a download with a torrent file (usually .torrent extension). Parameters: Name Type Description Default torrent_file_path Union[str, pathlib.Path] the path to the torrent file. required uris List[str] a list of URIs used for Web-seeding. None options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def add_torrent ( self , torrent_file_path : Union [ str , Path ], uris : List [ str ] = None , options : Union [ Options , dict ] = None , position : int = None , ) -> Download : \"\"\" Add a download with a torrent file (usually .torrent extension). Parameters: torrent_file_path: the path to the torrent file. uris: a list of URIs used for Web-seeding. options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if uris is None : uris = [] if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( torrent_file_path , \"rb\" ) as stream : torrent_contents = stream . read () encoded_contents = b64encode ( torrent_contents ) . decode ( \"utf8\" ) gid = self . client . add_torrent ( encoded_contents , uris , client_options , position ) return self . get_download ( gid )","title":"add_torrent()"},{"location":"reference/api/#aria2p.api.API.add_uris","text":"Add a download with a URL (or more). Parameters: Name Type Description Default uris List[str] a list of URIs that point to the same resource. required options Optional[Union[aria2p.options.Options, dict]] an instance of the Options class or a dictionary containing aria2c options to create the download with. None position Optional[int] the position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def add_uris ( self , uris : List [ str ], options : Optional [ Union [ Options , dict ]] = None , position : Optional [ int ] = None ) -> Download : \"\"\" Add a download with a URL (or more). Parameters: uris: a list of URIs that point to the same resource. options: an instance of the ``Options`` class or a dictionary containing aria2c options to create the download with. position: the position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ( uris , client_options , position ) return self . get_download ( gid )","title":"add_uris()"},{"location":"reference/api/#aria2p.api.API.autopurge","text":"Purge completed, removed or failed downloads from the queue. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py 497 498 499 500 501 502 503 504 505 506 507 def autopurge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Returns: Success or failure of the operation. \"\"\" version = get_version () if version . major == 0 and 9 > version . minor >= 7 : logger . warning ( \"Future change warning: API method 'autopurge' will be renamed 'purge' in version 0.9.0.\" ) return self . client . purge_download_result ()","title":"autopurge()"},{"location":"reference/api/#aria2p.api.API.copy_files","text":"Copy downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[str, pathlib.Path] the target directory to copy files into. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 @staticmethod def copy_files ( downloads : List [ Download ], to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Parameters: downloads: the list of downloads for which to move files. to_directory: the target directory to copy files into. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . copytree ( str ( path ), str ( to_directory / path . name )) elif path . is_file (): shutil . copy ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results","title":"copy_files()"},{"location":"reference/api/#aria2p.api.API.get_download","text":"Get a [ Download ][aria2p.downloads.Download] object thanks to its GID. Parameters: Name Type Description Default gid str the GID of the download to get. required Returns: Type Description Download The retrieved download object. Source code in aria2p/api.py 214 215 216 217 218 219 220 221 222 223 224 def get_download ( self , gid : str ) -> Download : \"\"\" Get a [`Download`][aria2p.downloads.Download] object thanks to its GID. Parameters: gid: the GID of the download to get. Returns: The retrieved download object. \"\"\" return Download ( self , self . client . tell_status ( gid ))","title":"get_download()"},{"location":"reference/api/#aria2p.api.API.get_downloads","text":"Get a list of [ Download ][aria2p.downloads.Download] object thanks to their GIDs. Parameters: Name Type Description Default gids List[str] the GIDs of the downloads to get. If None, return all the downloads. None Returns: Type Description List[aria2p.downloads.Download] The retrieved download objects. Source code in aria2p/api.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def get_downloads ( self , gids : List [ str ] = None ) -> List [ Download ]: \"\"\" Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs. Parameters: gids: the GIDs of the downloads to get. If None, return all the downloads. Returns: The retrieved download objects. \"\"\" downloads = [] if gids : for gid in gids : downloads . append ( Download ( self , self . client . tell_status ( gid ))) else : structs = [] structs . extend ( self . client . tell_active ()) structs . extend ( self . client . tell_waiting ( 0 , 1000 )) structs . extend ( self . client . tell_stopped ( 0 , 1000 )) downloads = [ Download ( self , struct ) for struct in structs ] return downloads","title":"get_downloads()"},{"location":"reference/api/#aria2p.api.API.get_global_options","text":"Get the global options. Returns: Type Description Options The global aria2c options. Source code in aria2p/api.py 525 526 527 528 529 530 531 532 def get_global_options ( self ) -> Options : \"\"\" Get the global options. Returns: The global aria2c options. \"\"\" return Options ( self , self . client . get_global_option ())","title":"get_global_options()"},{"location":"reference/api/#aria2p.api.API.get_options","text":"Get options for each of the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to get the options of. required Returns: Type Description List[aria2p.options.Options] Options object for each given download. Source code in aria2p/api.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 def get_options ( self , downloads : List [ Download ]) -> List [ Options ]: \"\"\" Get options for each of the given downloads. Parameters: downloads: the list of downloads to get the options of. Returns: Options object for each given download. \"\"\" # TODO: batch/multicall candidate options = [] for download in downloads : options . append ( Options ( self , self . client . get_option ( download . gid ), download )) return options","title":"get_options()"},{"location":"reference/api/#aria2p.api.API.get_stats","text":"Get the stats of the remote aria2c process. Returns: Type Description Stats stats: the global stats returned by the remote process. Source code in aria2p/api.py 575 576 577 578 579 580 581 582 def get_stats ( self ) -> Stats : \"\"\" Get the stats of the remote aria2c process. Returns: stats: the global stats returned by the remote process. \"\"\" return Stats ( self . client . get_global_stat ())","title":"get_stats()"},{"location":"reference/api/#aria2p.api.API.listen_to_notifications","text":"Start listening to aria2 notifications via WebSocket. This method differs from [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, api and gid , instead of only gid . Accepting api allows to use the high-level methods of the [ API ][aria2p.api.API] class. Stop listening to notifications with the [ API.stop_listening ][aria2p.api.API.stop_listening] method. Parameters: Name Type Description Default threaded bool Whether to start the listening loop in a thread or not (non-blocking or blocking). False Source code in aria2p/api.py 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 def listen_to_notifications ( self , threaded : bool = False , ** kwargs : Any ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, ``api`` and ``gid``, instead of only ``gid``. Accepting ``api`` allows to use the high-level methods of the [`API`][aria2p.api.API] class. Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method. Parameters: threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking). \"\"\" def closure ( callback ): return ( lambda gid : callback ( self , gid )) if callable ( callback ) else None def run (): self . client . listen_to_notifications ( ** { key : closure ( value ) if key . startswith ( \"on_\" ) else value for key , value in kwargs . items ()} ) if threaded : kwargs [ \"handle_signals\" ] = False self . listener = threading . Thread ( target = run ) self . listener . start () else : run ()","title":"listen_to_notifications()"},{"location":"reference/api/#aria2p.api.API.move","text":"Move a download in the queue, relatively to its current position. Parameters: Name Type Description Default download Download the download object to move. required pos int the relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 250 251 252 253 254 255 256 257 258 259 260 261 def move ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, relatively to its current position. Parameters: download: the download object to move. pos: the relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" )","title":"move()"},{"location":"reference/api/#aria2p.api.API.move_down","text":"Move a download down in the queue. Parameters: Name Type Description Default download Download the download object to move. required pos int number of times to move down. With negative values, will move up (use move or move_up instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py 294 295 296 297 298 299 300 301 302 303 304 305 def move_down ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download down in the queue. Parameters: download: the download object to move. pos: number of times to move down. With negative values, will move up (use move or move_up instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" )","title":"move_down()"},{"location":"reference/api/#aria2p.api.API.move_files","text":"Move downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[str, pathlib.Path] the target directory to move files to. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 @staticmethod def move_files ( downloads : List [ Download ], to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Parameters: downloads: the list of downloads for which to move files. to_directory: the target directory to move files to. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : shutil . move ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results","title":"move_files()"},{"location":"reference/api/#aria2p.api.API.move_to","text":"Move a download in the queue, with absolute positioning. Parameters: Name Type Description Default download Download the download object to move. required pos int the absolute position in the queue where to move the download. 0 for top, -1 for bottom. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 def move_to ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, with absolute positioning. Parameters: download: the download object to move. pos: the absolute position in the queue where to move the download. 0 for top, -1 for bottom. Returns: The new position of the download. \"\"\" if pos < 0 : how = \"POS_END\" pos = - pos else : how = \"POS_SET\" return self . client . change_position ( download . gid , pos , how )","title":"move_to()"},{"location":"reference/api/#aria2p.api.API.move_to_bottom","text":"Move a download to the bottom of the queue. Parameters: Name Type Description Default download Download the download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 319 320 321 322 323 324 325 326 327 328 329 def move_to_bottom ( self , download : Download ) -> int : \"\"\" Move a download to the bottom of the queue. Parameters: download: the download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_END\" )","title":"move_to_bottom()"},{"location":"reference/api/#aria2p.api.API.move_to_top","text":"Move a download to the top of the queue. Parameters: Name Type Description Default download Download the download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py 307 308 309 310 311 312 313 314 315 316 317 def move_to_top ( self , download : Download ) -> int : \"\"\" Move a download to the top of the queue. Parameters: download: the download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_SET\" )","title":"move_to_top()"},{"location":"reference/api/#aria2p.api.API.move_up","text":"Move a download up in the queue. Parameters: Name Type Description Default download Download the download object to move. required pos int number of times to move up. With negative values, will move down (use move or move_down instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py 281 282 283 284 285 286 287 288 289 290 291 292 def move_up ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download up in the queue. Parameters: download: the download object to move. pos: number of times to move up. With negative values, will move down (use move or move_down instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , - pos , \"POS_CUR\" )","title":"move_up()"},{"location":"reference/api/#aria2p.api.API.pause","text":"Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to remove. required force bool whether to pause immediately without contacting servers or not. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 def pause ( self , downloads : List [ Download ], force : bool = False ) -> List [ bool ]: \"\"\" Remove the given downloads from the list. Parameters: downloads: the list of downloads to remove. force: whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate if force : pause_func = self . client . force_pause else : pause_func = self . client . pause result = [] for download in downloads : try : pause_func ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to pause download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result","title":"pause()"},{"location":"reference/api/#aria2p.api.API.pause_all","text":"Remove the given downloads from the list. Parameters: Name Type Description Default force bool whether to pause immediately without contacting servers or not. False Returns: Type Description bool Success or failure of the operation to pause all downloads. Source code in aria2p/api.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def pause_all ( self , force : bool = False ) -> bool : \"\"\" Remove the given downloads from the list. Parameters: force: whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation to pause all downloads. \"\"\" if force : pause_func = self . client . force_pause_all else : pause_func = self . client . pause_all return pause_func () == \"OK\"","title":"pause_all()"},{"location":"reference/api/#aria2p.api.API.remove","text":"Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to remove. required force bool whether to force the removal or not. False files bool whether to remove downloads files as well. False clean bool whether to remove the aria2 control file as well. True Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 def remove ( self , downloads : List [ Download ], force : bool = False , files : bool = False , clean : bool = True ) -> List [ bool ]: \"\"\" Remove the given downloads from the list. Parameters: downloads: the list of downloads to remove. force: whether to force the removal or not. files: whether to remove downloads files as well. clean: whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate if force : remove_func = self . client . force_remove else : remove_func = self . client . remove result = [] for download in downloads : if download . is_complete or download . is_removed or download . has_failed : logger . debug ( f \"Try to remove download result { download . gid } \" ) try : self . client . remove_download_result ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download result { download . gid } \" ) result . append ( True ) else : logger . debug ( f \"Try to remove download { download . gid } \" ) try : removed_gid = remove_func ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download { download . gid } \" ) result . append ( True ) try : self . client . remove_download_result ( download . gid ) except ClientException as error2 : logger . debug ( f \"Failed to remove download result { download . gid } \" ) logger . opt ( exception = True ) . trace ( error2 ) if removed_gid != download . gid : logger . debug ( f \"Removed download GID# { removed_gid } is different than download GID# { download . gid } \" ) try : self . client . remove_download_result ( removed_gid ) except ClientException as error2 : logger . debug ( f \"Failed to remove download result { removed_gid } \" ) logger . opt ( exception = True ) . trace ( error2 ) if clean : # FUTURE: use missing_ok parameter on Python 3.8 try : download . control_file_path . unlink () except FileNotFoundError : logger . debug ( f \"aria2 control file { download . control_file_path } was not found\" ) else : logger . debug ( f \"Removed control file { download . control_file_path } \" ) if files and result [ - 1 ]: self . remove_files ([ download ], force = True ) return result","title":"remove()"},{"location":"reference/api/#aria2p.api.API.remove_all","text":"Remove all downloads from the list. Parameters: Name Type Description Default force bool whether to force the removal or not. False Returns: Type Description bool Success or failure of the operation to remove all downloads. Source code in aria2p/api.py 404 405 406 407 408 409 410 411 412 413 414 def remove_all ( self , force : bool = False ) -> bool : \"\"\" Remove all downloads from the list. Parameters: force: whether to force the removal or not. Returns: Success or failure of the operation to remove all downloads. \"\"\" return all ( self . remove ( self . get_downloads (), force = force ))","title":"remove_all()"},{"location":"reference/api/#aria2p.api.API.remove_files","text":"Remove downloaded files. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to remove files. required force bool whether to remove files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 @staticmethod def remove_files ( downloads : List [ Download ], force : bool = False ) -> List [ bool ]: \"\"\" Remove downloaded files. Parameters: downloads: the list of downloads for which to remove files. force: whether to remove files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . rmtree ( str ( path )) else : path . unlink () results . append ( True ) else : results . append ( False ) return results","title":"remove_files()"},{"location":"reference/api/#aria2p.api.API.resume","text":"Resume (unpause) the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads to resume. required Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def resume ( self , downloads : List [ Download ]) -> List [ bool ]: \"\"\" Resume (unpause) the given downloads. Parameters: downloads: the list of downloads to resume. Returns: Success or failure of the operation for each given download. \"\"\" # TODO: batch/multicall candidate result = [] for download in downloads : try : self . client . unpause ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to resume download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result","title":"resume()"},{"location":"reference/api/#aria2p.api.API.resume_all","text":"Resume (unpause) all downloads. Returns: Type Description bool Success or failure of the operation to resume all downloads. Source code in aria2p/api.py 488 489 490 491 492 493 494 495 def resume_all ( self ) -> bool : \"\"\" Resume (unpause) all downloads. Returns: Success or failure of the operation to resume all downloads. \"\"\" return self . client . unpause_all () == \"OK\"","title":"resume_all()"},{"location":"reference/api/#aria2p.api.API.search","text":"Not implemented. Search and return [ Download ][aria2p.downloads.Download] objects based on multiple patterns. Parameters: Name Type Description Default patterns List[str] the patterns used to filter the download list. required Returns: Type Description List[aria2p.downloads.Download] The download objects matching the patterns. Source code in aria2p/api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def search ( self , patterns : List [ str ]) -> List [ Download ]: \"\"\" Not implemented. Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns. Parameters: patterns: the patterns used to filter the download list. Returns: The download objects matching the patterns. \"\"\" # gid # status # totalLength # completedLength # uploadLength # bitfield # downloadSpeed # uploadSpeed # infoHash # numSeeders # seeder # pieceLength # numPieces # connections # errorCode # errorMessage # followedBy # following # belongsTo # dir # files # bittorrent # announceList # comment # creationDate # mode # info # name # verifiedLength # verifyIntegrityPending raise NotImplementedError","title":"search()"},{"location":"reference/api/#aria2p.api.API.set_global_options","text":"Set global options. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required Returns: Type Description bool Success or failure of the operation for changing global options. Source code in aria2p/api.py 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 def set_global_options ( self , options : Union [ Options , dict ]) -> bool : \"\"\" Set global options. Parameters: options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. Returns: Success or failure of the operation for changing global options. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options return self . client . change_global_option ( client_options ) == \"OK\"","title":"set_global_options()"},{"location":"reference/api/#aria2p.api.API.set_options","text":"Set options for specific downloads. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] an instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required downloads List[aria2p.downloads.Download] the list of downloads to set the options for. required Returns: Type Description List[bool] Success or failure of the operation for changing options for each given download. Source code in aria2p/api.py 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 def set_options ( self , options : Union [ Options , dict ], downloads : List [ Download ]) -> List [ bool ]: \"\"\" Set options for specific downloads. Parameters: options: an instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. downloads: the list of downloads to set the options for. Returns: Success or failure of the operation for changing options for each given download. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options # TODO: batch/multicall candidate results = [] for download in downloads : results . append ( self . client . change_option ( download . gid , client_options ) == \"OK\" ) return results","title":"set_options()"},{"location":"reference/api/#aria2p.api.API.stop_listening","text":"Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [ listen_to_notifications ][aria2p.api.API.listen_to_notifications]. Source code in aria2p/api.py 700 701 702 703 704 705 706 707 708 709 710 711 def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [`listen_to_notifications`][aria2p.api.API.listen_to_notifications]. \"\"\" self . client . stop_listening () if self . listener : self . listener . join () self . listener = None","title":"stop_listening()"},{"location":"reference/cli/","text":"\u00b6 Module that contains the command line application. Why does this file exist, and why not put this in main ? You might be tempted to import things from main later, but that will cause problems: the code will get executed twice: When you run python -m aria2p python will execute __main__.py as a script. That means there won't be any aria2p.__main__ in sys.modules . When you import main it will get executed again (as a module) because there's no aria2p.__main__ in sys.modules . Also see http://click.pocoo.org/5/setuptools/#setuptools-integration. check_args ( parser , args ) \u00b6 Additional checks for command line arguments. Source code in aria2p/cli.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def check_args ( parser : argparse . ArgumentParser , args : namedtuple ) -> None : \"\"\"Additional checks for command line arguments.\"\"\" subparser = [ action for action in parser . _actions if isinstance ( action , argparse . _SubParsersAction )][ 0 ] . choices if args . subcommand in ( \"pause\" , \"stop\" , \"remove\" , \"rm\" , \"del\" , \"delete\" , \"resume\" , \"start\" , \"purge\" , \"clear\" ): if not args . do_all and not args . gids : subparser [ args . subcommand ] . error ( \"the following arguments are required: gids or --all\" ) elif args . do_all and args . gids : subparser [ args . subcommand ] . error ( \"argument -a/--all: not allowed with arguments gids\" ) elif args . subcommand in ( \"add\" , \"add-magnet\" , \"add-magnets\" ): if not args . uris and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: uris or -f FILE\" ) elif args . subcommand in ( \"add-torrent\" , \"add-torrents\" ): if not args . torrent_files and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: torrent_files or -f FILE\" ) elif args . subcommand in ( \"add-metalink\" , \"add-metalinks\" ): if not args . metalink_files and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: metalink_files or -f FILE\" ) get_method ( name , default = None ) \u00b6 Return the actual aria2 method name from a differently formatted name. Source code in aria2p/cli.py 362 363 364 365 366 367 368 369 370 371 def get_method ( name : str , default : Any = None ) -> str : \"\"\"Return the actual aria2 method name from a differently formatted name.\"\"\" methods = {} for method in Client . METHODS : methods [ method . lower ()] = method methods [ method . split ( \".\" )[ 1 ] . lower ()] = method name = name . lower () name = name . replace ( \"-\" , \"\" ) name = name . replace ( \"_\" , \"\" ) return methods . get ( name , default ) get_parser () \u00b6 Return a parser for the command-line options and arguments. Source code in aria2p/cli.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 def get_parser () -> argparse . ArgumentParser : \"\"\"Return a parser for the command-line options and arguments.\"\"\" usage = \" %(prog)s [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\" description = \"Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC.\" parser = argparse . ArgumentParser ( add_help = False , usage = usage , description = description , prog = \"aria2p\" ) main_help = \"Show this help message and exit. Commands also accept the -h/--help option.\" subcommand_help = \"Show this help message and exit.\" global_options = parser . add_argument_group ( title = \"Global options\" ) global_options . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = main_help ) global_options . add_argument ( \"-p\" , \"--port\" , dest = \"port\" , default = DEFAULT_PORT , type = int , help = \"Port to use to connect to the remote server.\" ) global_options . add_argument ( \"-H\" , \"--host\" , dest = \"host\" , default = DEFAULT_HOST , help = \"Host address for the remote server.\" ) global_options . add_argument ( \"-s\" , \"--secret\" , dest = \"secret\" , default = \"\" , help = \"Secret token to use to connect to the remote server.\" ) global_options . add_argument ( \"-L\" , \"--log-level\" , dest = \"log_level\" , default = None , help = \"Log level to use\" , choices = ( \"TRACE\" , \"DEBUG\" , \"INFO\" , \"SUCCESS\" , \"WARNING\" , \"ERROR\" , \"CRITICAL\" ), type = str . upper , ) global_options . add_argument ( \"-P\" , \"--log-path\" , dest = \"log_path\" , default = None , help = \"Log path to use. Can be a directory or a file.\" ) # ========= SUBPARSERS ========= # subparsers = parser . add_subparsers ( dest = \"subcommand\" , title = \"Commands\" , metavar = \"\" , prog = \"aria2p\" ) def subparser ( command : str , text : str , ** kwargs ) -> argparse . ArgumentParser : sub = subparsers . add_parser ( command , add_help = False , help = text , description = text , ** kwargs ) sub . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = subcommand_help ) return sub add_parser = subparser ( \"add\" , \"Add downloads with URIs/Magnets/torrents/Metalinks.\" ) add_magnets_parser = subparser ( \"add-magnets\" , \"Add downloads with Magnet URIs.\" , aliases = [ \"add-magnet\" ]) add_metalinks_parser = subparser ( \"add-metalinks\" , \"Add downloads with Metalink files.\" , aliases = [ \"add-metalink\" ]) add_torrents_parser = subparser ( \"add-torrents\" , \"Add downloads with torrent files.\" , aliases = [ \"add-torrent\" ]) subparser ( \"autopurge\" , \"Automatically purge completed/removed/failed downloads.\" , aliases = [ \"autoclear\" ]) call_parser = subparser ( \"call\" , \"Call a remote method through the JSON-RPC client.\" ) pause_parser = subparser ( \"pause\" , \"Pause downloads.\" , aliases = [ \"stop\" ]) remove_parser = subparser ( \"remove\" , \"Remove downloads.\" , aliases = [ \"rm\" , \"del\" , \"delete\" ]) resume_parser = subparser ( \"resume\" , \"Resume downloads.\" , aliases = [ \"start\" ]) subparser ( \"show\" , \"Show the download progression.\" ) subparser ( \"top\" , \"Launch the top-like interactive interface.\" ) listen_parser = subparser ( \"listen\" , \"Listen to notifications.\" ) # ========= CALL PARSER ========= # call_parser . add_argument ( \"method\" , help = ( \"The method to call (case insensitive). \" \"Dashes and underscores will be removed so you can use as many as you want, or none. \" \"Prefixes like 'aria2.' or 'system.' are also optional.\" ), ) call_parser_mxg = call_parser . add_mutually_exclusive_group () call_parser_mxg . add_argument ( \"-P\" , \"--params-list\" , dest = \"params\" , nargs = \"+\" , help = \"Parameters as a list of strings.\" ) call_parser_mxg . add_argument ( \"-J\" , \"--json-params\" , dest = \"params\" , help = \"Parameters as a JSON string. You should always wrap it at least once in an array '[]'.\" , ) # ========= ADD PARSER ========= # add_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The URIs/file-paths to add.\" ) add_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD MAGNET PARSER ========= # add_magnets_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The magnet URIs to add.\" ) add_magnets_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD TORRENT PARSER ========= # add_torrents_parser . add_argument ( \"torrent_files\" , nargs = \"*\" , help = \"The paths to the torrent files.\" ) add_torrents_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= ADD METALINK PARSER ========= # add_metalinks_parser . add_argument ( \"metalink_files\" , nargs = \"*\" , help = \"The paths to the metalink files.\" ) add_metalinks_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= PAUSE PARSER ========= # pause_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to pause.\" ) pause_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Pause all the downloads.\" ) pause_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Pause without contacting servers first.\" ) # ========= RESUME PARSER ========= # resume_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to resume.\" ) resume_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Resume all the downloads.\" ) # ========= REMOVE PARSER ========= # remove_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to remove.\" ) remove_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Remove all the downloads.\" ) remove_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Remove without contacting servers first.\" ) # ========= LISTEN PARSER ========= # listen_parser . add_argument ( \"-c\" , \"--callbacks-module\" , dest = \"callbacks_module\" , help = \"Path to the Python module defining your notifications callbacks.\" , ) listen_parser . add_argument ( \"event_types\" , nargs = \"*\" , help = \"The types of notifications to process: \" \"start, pause, stop, error, complete or btcomplete. \" \"Example: aria2p listen error btcomplete. \" \"Useful if you want to spawn multiple specialized aria2p listener, \" \"for example one for each type of notification, \" \"but still want to use only one callback file.\" , ) listen_parser . add_argument ( \"-t\" , \"--timeout\" , dest = \"timeout\" , type = float , default = 5 , help = \"Timeout in seconds to use when waiting for data over the WebSocket at each iteration. \" \"Use small values for faster reactivity when stopping to listen.\" , ) return parser main ( args = None ) \u00b6 The main function, which is executed when you type aria2p or python -m aria2p . Source code in aria2p/cli.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\"The main function, which is executed when you type ``aria2p`` or ``python -m aria2p``.\"\"\" parser = get_parser () args = parser . parse_args ( args = args ) kwargs = args . __dict__ log_level = kwargs . pop ( \"log_level\" ) log_path = kwargs . pop ( \"log_path\" ) if log_path : log_path = Path ( log_path ) if log_path . is_dir (): log_path = log_path / \"aria2p- {time} .log\" enable_logger ( sink = log_path , level = log_level or \"WARNING\" ) elif log_level : enable_logger ( sink = sys . stderr , level = log_level ) logger . debug ( \"Checking arguments\" ) check_args ( parser , args ) logger . debug ( \"Instantiating API\" ) api = API ( Client ( host = kwargs . pop ( \"host\" ), port = kwargs . pop ( \"port\" ), secret = kwargs . pop ( \"secret\" ))) logger . info ( f \"API instantiated: { api !r} \" ) # Warn if no aria2 daemon process seems to be running logger . debug ( \"Testing connection\" ) try : api . client . get_version () except requests . ConnectionError as error : print ( f \"[ERROR] { error } \" , file = sys . stderr ) print ( file = sys . stderr ) print ( \"Please make sure that an instance of aria2c is running with RPC mode enabled,\" , file = sys . stderr ) print ( \"and that you have provided the right host, port and secret token.\" , file = sys . stderr ) print ( \"More information at https://aria2p.readthedocs.io/en/latest.\" , file = sys . stderr ) return 2 subcommands = { None : subcommand_top , \"show\" : subcommand_show , \"top\" : subcommand_top , \"call\" : subcommand_call , \"add\" : subcommand_add , \"add-magnet\" : subcommand_add_magnets , \"add-magnets\" : subcommand_add_magnets , \"add-torrent\" : subcommand_add_torrents , \"add-torrents\" : subcommand_add_torrents , \"add-metalink\" : subcommand_add_metalinks , \"add-metalinks\" : subcommand_add_metalinks , \"pause\" : subcommand_pause , \"stop\" : subcommand_pause , # alias for pause \"resume\" : subcommand_resume , \"start\" : subcommand_resume , # alias for resume \"remove\" : subcommand_remove , \"rm\" : subcommand_remove , # alias for remove \"del\" : subcommand_remove , # alias for remove \"delete\" : subcommand_remove , # alias for remove \"autopurge\" : subcommand_autopurge , \"autoclear\" : subcommand_autopurge , # alias for autopurge \"listen\" : subcommand_listen , } subcommand = kwargs . pop ( \"subcommand\" ) if subcommand : logger . debug ( \"Running subcommand \" + subcommand ) try : return subcommands . get ( subcommand )( api , ** kwargs ) except ClientException as error : print ( error . message , file = sys . stderr ) return error . code subcommand_add ( api , uris = None , from_file = None ) \u00b6 Add magnet subcommand. Parameters: Name Type Description Default api API the API instance to use. required uris List[str] the URIs or file-paths to add. None from_file str path to the file to read uris from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 def subcommand_add ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Parameters: api: the API instance to use. uris: the URIs or file-paths to add. from_file: path to the file to read uris from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : path = Path ( uri ) # On Windows, path.exists() generates an OSError when path is an URI # See https://github.com/pawamoy/aria2p/issues/41 try : path_exists = path . exists () except OSError : path_exists = False if path_exists : if path . suffix == \".torrent\" : new_downloads = [ api . add_torrent ( path )] elif path . suffix == \".metalink\" : new_downloads = api . add_metalink ( path ) else : print ( f \"Cannot determine type of file { path } \" , file = sys . stderr ) print ( f \" Known extensions are .torrent and .metalink\" , file = sys . stderr ) ok = False continue elif uri . startswith ( \"magnet:?\" ): new_downloads = [ api . add_magnet ( uri )] else : new_downloads = [ api . add_uris ([ uri ])] for new_download in new_downloads : print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1 subcommand_add_magnets ( api , uris = None , from_file = None ) \u00b6 Add magnet subcommand. Parameters: Name Type Description Default api API the API instance to use. required uris List[str] the URIs of the magnets. None from_file str path to the file to read uris from. None Returns: Type Description int int: always 0. Source code in aria2p/cli.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def subcommand_add_magnets ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Parameters: api: the API instance to use. uris: the URIs of the magnets. from_file: path to the file to read uris from. Returns: int: always 0. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : new_download = api . add_magnet ( uri ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1 subcommand_add_metalinks ( api , metalink_files = None , from_file = None ) \u00b6 Add metalink subcommand. Parameters: Name Type Description Default api API the API instance to use. required metalink_files List[str] the paths to the metalink files. None from_file str path to the file to metalink files paths from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def subcommand_add_metalinks ( api : API , metalink_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add metalink subcommand. Parameters: api: the API instance to use. metalink_files: the paths to the metalink files. from_file: path to the file to metalink files paths from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not metalink_files : metalink_files = [] if from_file : try : metalink_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for metalink_file in metalink_files : new_downloads = api . add_metalink ( metalink_file ) for download in new_downloads : print ( f \"Created download { download . gid } \" ) return 0 if ok else 1 subcommand_add_torrents ( api , torrent_files = None , from_file = None ) \u00b6 Add torrent subcommand. Parameters: Name Type Description Default api API the API instance to use. required torrent_files List[str] the paths to the torrent files. None from_file str path to the file to read torrent files paths from. None Returns: Type Description int int: always 0. Source code in aria2p/cli.py 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 def subcommand_add_torrents ( api : API , torrent_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add torrent subcommand. Parameters: api: the API instance to use. torrent_files: the paths to the torrent files. from_file: path to the file to read torrent files paths from. Returns: int: always 0. \"\"\" ok = True if not torrent_files : torrent_files = [] if from_file : try : torrent_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for torrent_file in torrent_files : new_download = api . add_torrent ( torrent_file ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1 subcommand_autopurge ( api ) \u00b6 Autopurge subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 def subcommand_autopurge ( api : API ) -> int : \"\"\" Autopurge subcommand. Parameters: api: the API instance to use. Returns: int: 0 if all success, 1 if one failure. \"\"\" version = get_version () if version . major == 0 and 9 > version . minor >= 7 : print ( \"Future change warning: command 'autopurge' will be renamed 'purge' in version 0.9.0, \" \"with an 'autoremove' alias.\" , file = sys . stderr , ) if api . autopurge (): return 0 return 1 subcommand_call ( api , method , params ) \u00b6 Call subcommand. Parameters: Name Type Description Default api API the API instance to use. required method str name of the method to call. required params Union[str, List[str]] parameters to use when calling method. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 def subcommand_call ( api : API , method : str , params : Union [ str , List [ str ]]) -> int : \"\"\" Call subcommand. Parameters: api: the API instance to use. method: name of the method to call. params: parameters to use when calling method. Returns: int: always 0. \"\"\" real_method = get_method ( method ) if real_method is None : print ( f \"aria2p: call: Unknown method { method } .\" , file = sys . stderr ) print ( \" Run 'aria2p call listmethods' to list the available methods.\" , file = sys . stderr ) return 1 if isinstance ( params , str ): params = json . loads ( params ) elif params is None : params = [] response = api . client . call ( real_method , params ) print ( json . dumps ( response )) return 0 subcommand_listen ( api , callbacks_module = None , event_types = None , timeout = 5 ) \u00b6 Listen subcommand. Parameters: Name Type Description Default api API the API instance to use. required callbacks_module Union[str, pathlib.Path] the path to the module to import, containing the callbacks as functions. None event_types List[str] the event types to process. None timeout int the timeout to pass to the WebSocket connection, in seconds. 5 Returns: Type Description int int: always 0. Source code in aria2p/cli.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 def subcommand_listen ( api : API , callbacks_module : Union [ str , Path ] = None , event_types : List [ str ] = None , timeout : int = 5 ) -> int : \"\"\" Listen subcommand. Parameters: api: the API instance to use. callbacks_module: the path to the module to import, containing the callbacks as functions. event_types: the event types to process. timeout: the timeout to pass to the WebSocket connection, in seconds. Returns: int: always 0. \"\"\" if not callbacks_module : print ( \"aria2p: listen: Please provide the callback module file path with -c option\" , file = sys . stderr ) return 1 if isinstance ( callbacks_module , Path ): callbacks_module = str ( callbacks_module ) if not event_types : event_types = [ \"start\" , \"pause\" , \"stop\" , \"error\" , \"complete\" , \"btcomplete\" ] spec = importlib . util . spec_from_file_location ( \"aria2p_callbacks\" , callbacks_module ) callbacks = importlib . util . module_from_spec ( spec ) if callbacks is None : print ( f \"aria2p: Could not import module file { callbacks_module } \" , file = sys . stderr ) return 1 spec . loader . exec_module ( callbacks ) callbacks_kwargs = {} for callback_name in ( \"on_download_start\" , \"on_download_pause\" , \"on_download_stop\" , \"on_download_error\" , \"on_download_complete\" , \"on_bt_download_complete\" , ): if callback_name [ 3 :] . replace ( \"download\" , \"\" ) . replace ( \"_\" , \"\" ) in event_types : callback = getattr ( callbacks , callback_name , None ) if callback : callbacks_kwargs [ callback_name ] = callback api . listen_to_notifications ( timeout = timeout , handle_signals = True , threaded = False , ** callbacks_kwargs ) return 0 subcommand_pause ( api , gids = None , do_all = False , force = False ) \u00b6 Pause subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to pause. None do_all bool pause all downloads if True. False force bool force pause or not (see API.pause). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def subcommand_pause ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Pause subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to pause. do_all: pause all downloads if True. force: force pause or not (see API.pause). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . pause_all ( force = force ): return 0 return 1 # FIXME: could break if API.resume needs more info than just gid # See how we do that in subcommand_remove downloads = [ Download ( api , { \"gid\" : gid }) for gid in gids ] result = api . pause ( downloads , force = force ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_remove ( api , gids = None , do_all = False , force = False ) \u00b6 Remove subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to remove. None do_all bool pause all downloads if True. False force bool force pause or not (see API.remove). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 def subcommand_remove ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Remove subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to remove. do_all: pause all downloads if True. force: force pause or not (see API.remove). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . remove_all (): return 0 return 1 ok = True downloads = [] for gid in gids : try : downloads . append ( api . get_download ( gid )) except ClientException as error : print ( str ( error ), file = sys . stderr ) ok = False result = api . remove ( downloads , force = force ) if all ( result ): return 0 if ok else 1 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_resume ( api , gids = None , do_all = False ) \u00b6 Resume subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to resume. None do_all bool pause all downloads if True. False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def subcommand_resume ( api : API , gids : List [ str ] = None , do_all : bool = False ) -> int : \"\"\" Resume subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to resume. do_all: pause all downloads if True. Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . resume_all (): return 0 return 1 # FIXME: could break if API.resume needs more info than just gid # See how we do that in subcommand_remove downloads = [ Download ( api , { \"gid\" : gid }) for gid in gids ] result = api . resume ( downloads ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_show ( api ) \u00b6 Show subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def subcommand_show ( api : API ) -> int : \"\"\" Show subcommand. Parameters: api: the API instance to use. Returns: int: always 0. \"\"\" downloads = api . get_downloads () print ( f \" { 'GID' : <17 } \" f \" { 'STATUS' : <9 } \" f \" { 'PROGRESS' : >8 } \" f \" { 'DOWN_SPEED' : >12 } \" f \" { 'UP_SPEED' : >12 } \" f \" { 'ETA' : >8 } \" f \"NAME\" ) for download in downloads : print ( f \" { download . gid : <17 } \" f \" { download . status : <9 } \" f \" { download . progress_string () : >8 } \" f \" { download . download_speed_string () : >12 } \" f \" { download . upload_speed_string () : >12 } \" f \" { download . eta_string () : >8 } \" f \" { download . name } \" ) return 0 subcommand_top ( api ) \u00b6 Top subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 def subcommand_top ( api : API ) -> int : \"\"\" Top subcommand. Parameters: api: the API instance to use. Returns: int: always 0. \"\"\" if Interface is None : print ( \"The top-interface dependencies are not installed. Try running `pip install aria2p[tui]` to install them.\" , file = sys . stderr , ) return 1 interface = Interface ( api ) success = interface . run () return 0 if success else 1","title":"cli.py"},{"location":"reference/cli/#aria2p.cli","text":"Module that contains the command line application. Why does this file exist, and why not put this in main ? You might be tempted to import things from main later, but that will cause problems: the code will get executed twice: When you run python -m aria2p python will execute __main__.py as a script. That means there won't be any aria2p.__main__ in sys.modules . When you import main it will get executed again (as a module) because there's no aria2p.__main__ in sys.modules . Also see http://click.pocoo.org/5/setuptools/#setuptools-integration.","title":"aria2p.cli"},{"location":"reference/cli/#aria2p.cli.check_args","text":"Additional checks for command line arguments. Source code in aria2p/cli.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def check_args ( parser : argparse . ArgumentParser , args : namedtuple ) -> None : \"\"\"Additional checks for command line arguments.\"\"\" subparser = [ action for action in parser . _actions if isinstance ( action , argparse . _SubParsersAction )][ 0 ] . choices if args . subcommand in ( \"pause\" , \"stop\" , \"remove\" , \"rm\" , \"del\" , \"delete\" , \"resume\" , \"start\" , \"purge\" , \"clear\" ): if not args . do_all and not args . gids : subparser [ args . subcommand ] . error ( \"the following arguments are required: gids or --all\" ) elif args . do_all and args . gids : subparser [ args . subcommand ] . error ( \"argument -a/--all: not allowed with arguments gids\" ) elif args . subcommand in ( \"add\" , \"add-magnet\" , \"add-magnets\" ): if not args . uris and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: uris or -f FILE\" ) elif args . subcommand in ( \"add-torrent\" , \"add-torrents\" ): if not args . torrent_files and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: torrent_files or -f FILE\" ) elif args . subcommand in ( \"add-metalink\" , \"add-metalinks\" ): if not args . metalink_files and not args . from_file : subparser [ args . subcommand ] . error ( \"the following arguments are required: metalink_files or -f FILE\" )","title":"check_args()"},{"location":"reference/cli/#aria2p.cli.get_method","text":"Return the actual aria2 method name from a differently formatted name. Source code in aria2p/cli.py 362 363 364 365 366 367 368 369 370 371 def get_method ( name : str , default : Any = None ) -> str : \"\"\"Return the actual aria2 method name from a differently formatted name.\"\"\" methods = {} for method in Client . METHODS : methods [ method . lower ()] = method methods [ method . split ( \".\" )[ 1 ] . lower ()] = method name = name . lower () name = name . replace ( \"-\" , \"\" ) name = name . replace ( \"_\" , \"\" ) return methods . get ( name , default )","title":"get_method()"},{"location":"reference/cli/#aria2p.cli.get_parser","text":"Return a parser for the command-line options and arguments. Source code in aria2p/cli.pydef get_parser () -> argparse . ArgumentParser : \"\"\"Return a parser for the command-line options and arguments.\"\"\" usage = \" %(prog)s [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\" description = \"Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC.\" parser = argparse . ArgumentParser ( add_help = False , usage = usage , description = description , prog = \"aria2p\" ) main_help = \"Show this help message and exit. Commands also accept the -h/--help option.\" subcommand_help = \"Show this help message and exit.\" global_options = parser . add_argument_group ( title = \"Global options\" ) global_options . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = main_help ) global_options . add_argument ( \"-p\" , \"--port\" , dest = \"port\" , default = DEFAULT_PORT , type = int , help = \"Port to use to connect to the remote server.\" ) global_options . add_argument ( \"-H\" , \"--host\" , dest = \"host\" , default = DEFAULT_HOST , help = \"Host address for the remote server.\" ) global_options . add_argument ( \"-s\" , \"--secret\" , dest = \"secret\" , default = \"\" , help = \"Secret token to use to connect to the remote server.\" ) global_options . add_argument ( \"-L\" , \"--log-level\" , dest = \"log_level\" , default = None , help = \"Log level to use\" , choices = ( \"TRACE\" , \"DEBUG\" , \"INFO\" , \"SUCCESS\" , \"WARNING\" , \"ERROR\" , \"CRITICAL\" ), type = str . upper , ) global_options . add_argument ( \"-P\" , \"--log-path\" , dest = \"log_path\" , default = None , help = \"Log path to use. Can be a directory or a file.\" ) # ========= SUBPARSERS ========= # subparsers = parser . add_subparsers ( dest = \"subcommand\" , title = \"Commands\" , metavar = \"\" , prog = \"aria2p\" ) def subparser ( command : str , text : str , ** kwargs ) -> argparse . ArgumentParser : sub = subparsers . add_parser ( command , add_help = False , help = text , description = text , ** kwargs ) sub . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = subcommand_help ) return sub add_parser = subparser ( \"add\" , \"Add downloads with URIs/Magnets/torrents/Metalinks.\" ) add_magnets_parser = subparser ( \"add-magnets\" , \"Add downloads with Magnet URIs.\" , aliases = [ \"add-magnet\" ]) add_metalinks_parser = subparser ( \"add-metalinks\" , \"Add downloads with Metalink files.\" , aliases = [ \"add-metalink\" ]) add_torrents_parser = subparser ( \"add-torrents\" , \"Add downloads with torrent files.\" , aliases = [ \"add-torrent\" ]) subparser ( \"autopurge\" , \"Automatically purge completed/removed/failed downloads.\" , aliases = [ \"autoclear\" ]) call_parser = subparser ( \"call\" , \"Call a remote method through the JSON-RPC client.\" ) pause_parser = subparser ( \"pause\" , \"Pause downloads.\" , aliases = [ \"stop\" ]) remove_parser = subparser ( \"remove\" , \"Remove downloads.\" , aliases = [ \"rm\" , \"del\" , \"delete\" ]) resume_parser = subparser ( \"resume\" , \"Resume downloads.\" , aliases = [ \"start\" ]) subparser ( \"show\" , \"Show the download progression.\" ) subparser ( \"top\" , \"Launch the top-like interactive interface.\" ) listen_parser = subparser ( \"listen\" , \"Listen to notifications.\" ) # ========= CALL PARSER ========= # call_parser . add_argument ( \"method\" , help = ( \"The method to call (case insensitive). \" \"Dashes and underscores will be removed so you can use as many as you want, or none. \" \"Prefixes like 'aria2.' or 'system.' are also optional.\" ), ) call_parser_mxg = call_parser . add_mutually_exclusive_group () call_parser_mxg . add_argument ( \"-P\" , \"--params-list\" , dest = \"params\" , nargs = \"+\" , help = \"Parameters as a list of strings.\" ) call_parser_mxg . add_argument ( \"-J\" , \"--json-params\" , dest = \"params\" , help = \"Parameters as a JSON string. You should always wrap it at least once in an array '[]'.\" , ) # ========= ADD PARSER ========= # add_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The URIs/file-paths to add.\" ) add_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD MAGNET PARSER ========= # add_magnets_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The magnet URIs to add.\" ) add_magnets_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD TORRENT PARSER ========= # add_torrents_parser . add_argument ( \"torrent_files\" , nargs = \"*\" , help = \"The paths to the torrent files.\" ) add_torrents_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= ADD METALINK PARSER ========= # add_metalinks_parser . add_argument ( \"metalink_files\" , nargs = \"*\" , help = \"The paths to the metalink files.\" ) add_metalinks_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= PAUSE PARSER ========= # pause_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to pause.\" ) pause_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Pause all the downloads.\" ) pause_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Pause without contacting servers first.\" ) # ========= RESUME PARSER ========= # resume_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to resume.\" ) resume_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Resume all the downloads.\" ) # ========= REMOVE PARSER ========= # remove_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to remove.\" ) remove_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Remove all the downloads.\" ) remove_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Remove without contacting servers first.\" ) # ========= LISTEN PARSER ========= # listen_parser . add_argument ( \"-c\" , \"--callbacks-module\" , dest = \"callbacks_module\" , help = \"Path to the Python module defining your notifications callbacks.\" , ) listen_parser . add_argument ( \"event_types\" , nargs = \"*\" , help = \"The types of notifications to process: \" \"start, pause, stop, error, complete or btcomplete. \" \"Example: aria2p listen error btcomplete. \" \"Useful if you want to spawn multiple specialized aria2p listener, \" \"for example one for each type of notification, \" \"but still want to use only one callback file.\" , ) listen_parser . add_argument ( \"-t\" , \"--timeout\" , dest = \"timeout\" , type = float , default = 5 , help = \"Timeout in seconds to use when waiting for data over the WebSocket at each iteration. \" \"Use small values for faster reactivity when stopping to listen.\" , ) return parser","title":"get_parser()"},{"location":"reference/cli/#aria2p.cli.main","text":"The main function, which is executed when you type aria2p or python -m aria2p . Source code in aria2p/cli.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\"The main function, which is executed when you type ``aria2p`` or ``python -m aria2p``.\"\"\" parser = get_parser () args = parser . parse_args ( args = args ) kwargs = args . __dict__ log_level = kwargs . pop ( \"log_level\" ) log_path = kwargs . pop ( \"log_path\" ) if log_path : log_path = Path ( log_path ) if log_path . is_dir (): log_path = log_path / \"aria2p- {time} .log\" enable_logger ( sink = log_path , level = log_level or \"WARNING\" ) elif log_level : enable_logger ( sink = sys . stderr , level = log_level ) logger . debug ( \"Checking arguments\" ) check_args ( parser , args ) logger . debug ( \"Instantiating API\" ) api = API ( Client ( host = kwargs . pop ( \"host\" ), port = kwargs . pop ( \"port\" ), secret = kwargs . pop ( \"secret\" ))) logger . info ( f \"API instantiated: { api !r} \" ) # Warn if no aria2 daemon process seems to be running logger . debug ( \"Testing connection\" ) try : api . client . get_version () except requests . ConnectionError as error : print ( f \"[ERROR] { error } \" , file = sys . stderr ) print ( file = sys . stderr ) print ( \"Please make sure that an instance of aria2c is running with RPC mode enabled,\" , file = sys . stderr ) print ( \"and that you have provided the right host, port and secret token.\" , file = sys . stderr ) print ( \"More information at https://aria2p.readthedocs.io/en/latest.\" , file = sys . stderr ) return 2 subcommands = { None : subcommand_top , \"show\" : subcommand_show , \"top\" : subcommand_top , \"call\" : subcommand_call , \"add\" : subcommand_add , \"add-magnet\" : subcommand_add_magnets , \"add-magnets\" : subcommand_add_magnets , \"add-torrent\" : subcommand_add_torrents , \"add-torrents\" : subcommand_add_torrents , \"add-metalink\" : subcommand_add_metalinks , \"add-metalinks\" : subcommand_add_metalinks , \"pause\" : subcommand_pause , \"stop\" : subcommand_pause , # alias for pause \"resume\" : subcommand_resume , \"start\" : subcommand_resume , # alias for resume \"remove\" : subcommand_remove , \"rm\" : subcommand_remove , # alias for remove \"del\" : subcommand_remove , # alias for remove \"delete\" : subcommand_remove , # alias for remove \"autopurge\" : subcommand_autopurge , \"autoclear\" : subcommand_autopurge , # alias for autopurge \"listen\" : subcommand_listen , } subcommand = kwargs . pop ( \"subcommand\" ) if subcommand : logger . debug ( \"Running subcommand \" + subcommand ) try : return subcommands . get ( subcommand )( api , ** kwargs ) except ClientException as error : print ( error . message , file = sys . stderr ) return error . code","title":"main()"},{"location":"reference/cli/#aria2p.cli.subcommand_add","text":"Add magnet subcommand. Parameters: Name Type Description Default api API the API instance to use. required uris List[str] the URIs or file-paths to add. None from_file str path to the file to read uris from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 def subcommand_add ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Parameters: api: the API instance to use. uris: the URIs or file-paths to add. from_file: path to the file to read uris from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : path = Path ( uri ) # On Windows, path.exists() generates an OSError when path is an URI # See https://github.com/pawamoy/aria2p/issues/41 try : path_exists = path . exists () except OSError : path_exists = False if path_exists : if path . suffix == \".torrent\" : new_downloads = [ api . add_torrent ( path )] elif path . suffix == \".metalink\" : new_downloads = api . add_metalink ( path ) else : print ( f \"Cannot determine type of file { path } \" , file = sys . stderr ) print ( f \" Known extensions are .torrent and .metalink\" , file = sys . stderr ) ok = False continue elif uri . startswith ( \"magnet:?\" ): new_downloads = [ api . add_magnet ( uri )] else : new_downloads = [ api . add_uris ([ uri ])] for new_download in new_downloads : print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1","title":"subcommand_add()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_magnets","text":"Add magnet subcommand. Parameters: Name Type Description Default api API the API instance to use. required uris List[str] the URIs of the magnets. None from_file str path to the file to read uris from. None Returns: Type Description int int: always 0. Source code in aria2p/cli.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def subcommand_add_magnets ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Parameters: api: the API instance to use. uris: the URIs of the magnets. from_file: path to the file to read uris from. Returns: int: always 0. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : new_download = api . add_magnet ( uri ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_magnets()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_metalinks","text":"Add metalink subcommand. Parameters: Name Type Description Default api API the API instance to use. required metalink_files List[str] the paths to the metalink files. None from_file str path to the file to metalink files paths from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def subcommand_add_metalinks ( api : API , metalink_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add metalink subcommand. Parameters: api: the API instance to use. metalink_files: the paths to the metalink files. from_file: path to the file to metalink files paths from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not metalink_files : metalink_files = [] if from_file : try : metalink_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for metalink_file in metalink_files : new_downloads = api . add_metalink ( metalink_file ) for download in new_downloads : print ( f \"Created download { download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_metalinks()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_torrents","text":"Add torrent subcommand. Parameters: Name Type Description Default api API the API instance to use. required torrent_files List[str] the paths to the torrent files. None from_file str path to the file to read torrent files paths from. None Returns: Type Description int int: always 0. Source code in aria2p/cli.py 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 def subcommand_add_torrents ( api : API , torrent_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add torrent subcommand. Parameters: api: the API instance to use. torrent_files: the paths to the torrent files. from_file: path to the file to read torrent files paths from. Returns: int: always 0. \"\"\" ok = True if not torrent_files : torrent_files = [] if from_file : try : torrent_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for torrent_file in torrent_files : new_download = api . add_torrent ( torrent_file ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_torrents()"},{"location":"reference/cli/#aria2p.cli.subcommand_autopurge","text":"Autopurge subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 def subcommand_autopurge ( api : API ) -> int : \"\"\" Autopurge subcommand. Parameters: api: the API instance to use. Returns: int: 0 if all success, 1 if one failure. \"\"\" version = get_version () if version . major == 0 and 9 > version . minor >= 7 : print ( \"Future change warning: command 'autopurge' will be renamed 'purge' in version 0.9.0, \" \"with an 'autoremove' alias.\" , file = sys . stderr , ) if api . autopurge (): return 0 return 1","title":"subcommand_autopurge()"},{"location":"reference/cli/#aria2p.cli.subcommand_call","text":"Call subcommand. Parameters: Name Type Description Default api API the API instance to use. required method str name of the method to call. required params Union[str, List[str]] parameters to use when calling method. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 def subcommand_call ( api : API , method : str , params : Union [ str , List [ str ]]) -> int : \"\"\" Call subcommand. Parameters: api: the API instance to use. method: name of the method to call. params: parameters to use when calling method. Returns: int: always 0. \"\"\" real_method = get_method ( method ) if real_method is None : print ( f \"aria2p: call: Unknown method { method } .\" , file = sys . stderr ) print ( \" Run 'aria2p call listmethods' to list the available methods.\" , file = sys . stderr ) return 1 if isinstance ( params , str ): params = json . loads ( params ) elif params is None : params = [] response = api . client . call ( real_method , params ) print ( json . dumps ( response )) return 0","title":"subcommand_call()"},{"location":"reference/cli/#aria2p.cli.subcommand_listen","text":"Listen subcommand. Parameters: Name Type Description Default api API the API instance to use. required callbacks_module Union[str, pathlib.Path] the path to the module to import, containing the callbacks as functions. None event_types List[str] the event types to process. None timeout int the timeout to pass to the WebSocket connection, in seconds. 5 Returns: Type Description int int: always 0. Source code in aria2p/cli.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 def subcommand_listen ( api : API , callbacks_module : Union [ str , Path ] = None , event_types : List [ str ] = None , timeout : int = 5 ) -> int : \"\"\" Listen subcommand. Parameters: api: the API instance to use. callbacks_module: the path to the module to import, containing the callbacks as functions. event_types: the event types to process. timeout: the timeout to pass to the WebSocket connection, in seconds. Returns: int: always 0. \"\"\" if not callbacks_module : print ( \"aria2p: listen: Please provide the callback module file path with -c option\" , file = sys . stderr ) return 1 if isinstance ( callbacks_module , Path ): callbacks_module = str ( callbacks_module ) if not event_types : event_types = [ \"start\" , \"pause\" , \"stop\" , \"error\" , \"complete\" , \"btcomplete\" ] spec = importlib . util . spec_from_file_location ( \"aria2p_callbacks\" , callbacks_module ) callbacks = importlib . util . module_from_spec ( spec ) if callbacks is None : print ( f \"aria2p: Could not import module file { callbacks_module } \" , file = sys . stderr ) return 1 spec . loader . exec_module ( callbacks ) callbacks_kwargs = {} for callback_name in ( \"on_download_start\" , \"on_download_pause\" , \"on_download_stop\" , \"on_download_error\" , \"on_download_complete\" , \"on_bt_download_complete\" , ): if callback_name [ 3 :] . replace ( \"download\" , \"\" ) . replace ( \"_\" , \"\" ) in event_types : callback = getattr ( callbacks , callback_name , None ) if callback : callbacks_kwargs [ callback_name ] = callback api . listen_to_notifications ( timeout = timeout , handle_signals = True , threaded = False , ** callbacks_kwargs ) return 0","title":"subcommand_listen()"},{"location":"reference/cli/#aria2p.cli.subcommand_pause","text":"Pause subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to pause. None do_all bool pause all downloads if True. False force bool force pause or not (see API.pause). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def subcommand_pause ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Pause subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to pause. do_all: pause all downloads if True. force: force pause or not (see API.pause). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . pause_all ( force = force ): return 0 return 1 # FIXME: could break if API.resume needs more info than just gid # See how we do that in subcommand_remove downloads = [ Download ( api , { \"gid\" : gid }) for gid in gids ] result = api . pause ( downloads , force = force ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_pause()"},{"location":"reference/cli/#aria2p.cli.subcommand_remove","text":"Remove subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to remove. None do_all bool pause all downloads if True. False force bool force pause or not (see API.remove). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 def subcommand_remove ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Remove subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to remove. do_all: pause all downloads if True. force: force pause or not (see API.remove). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . remove_all (): return 0 return 1 ok = True downloads = [] for gid in gids : try : downloads . append ( api . get_download ( gid )) except ClientException as error : print ( str ( error ), file = sys . stderr ) ok = False result = api . remove ( downloads , force = force ) if all ( result ): return 0 if ok else 1 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_remove()"},{"location":"reference/cli/#aria2p.cli.subcommand_resume","text":"Resume subcommand. Parameters: Name Type Description Default api API the API instance to use. required gids List[str] the GIDs of the downloads to resume. None do_all bool pause all downloads if True. False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def subcommand_resume ( api : API , gids : List [ str ] = None , do_all : bool = False ) -> int : \"\"\" Resume subcommand. Parameters: api: the API instance to use. gids: the GIDs of the downloads to resume. do_all: pause all downloads if True. Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . resume_all (): return 0 return 1 # FIXME: could break if API.resume needs more info than just gid # See how we do that in subcommand_remove downloads = [ Download ( api , { \"gid\" : gid }) for gid in gids ] result = api . resume ( downloads ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_resume()"},{"location":"reference/cli/#aria2p.cli.subcommand_show","text":"Show subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def subcommand_show ( api : API ) -> int : \"\"\" Show subcommand. Parameters: api: the API instance to use. Returns: int: always 0. \"\"\" downloads = api . get_downloads () print ( f \" { 'GID' : <17 } \" f \" { 'STATUS' : <9 } \" f \" { 'PROGRESS' : >8 } \" f \" { 'DOWN_SPEED' : >12 } \" f \" { 'UP_SPEED' : >12 } \" f \" { 'ETA' : >8 } \" f \"NAME\" ) for download in downloads : print ( f \" { download . gid : <17 } \" f \" { download . status : <9 } \" f \" { download . progress_string () : >8 } \" f \" { download . download_speed_string () : >12 } \" f \" { download . upload_speed_string () : >12 } \" f \" { download . eta_string () : >8 } \" f \" { download . name } \" ) return 0","title":"subcommand_show()"},{"location":"reference/cli/#aria2p.cli.subcommand_top","text":"Top subcommand. Parameters: Name Type Description Default api API the API instance to use. required Returns: Type Description int int: always 0. Source code in aria2p/cli.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 def subcommand_top ( api : API ) -> int : \"\"\" Top subcommand. Parameters: api: the API instance to use. Returns: int: always 0. \"\"\" if Interface is None : print ( \"The top-interface dependencies are not installed. Try running `pip install aria2p[tui]` to install them.\" , file = sys . stderr , ) return 1 interface = Interface ( api ) success = interface . run () return 0 if success else 1","title":"subcommand_top()"},{"location":"reference/client/","text":"\u00b6 This module defines the ClientException and Client classes, which are used to communicate with a remote aria2c process through the JSON-RPC protocol. Client \u00b6 The JSON-RPC client class. In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote. This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri). The class defines a METHODS variable which contains the names of the available methods. The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument. The class provides utility methods: call, which performs a JSON-RPC call for a single method; batch_call, which performs a JSON-RPC call for a list of methods; multicall2, which is an equivalent of multicall, but easier to use; post, which is responsible for actually sending a payload to the remote process using a POST request; get_payload, which is used to build payloads; get_params, which is used to build list of parameters. server: str property readonly \u00b6 Property to return the full remote process / server address. ws_server: str property readonly \u00b6 Property to return the full WebSocket remote server address. __init__ ( self , host = 'http://localhost' , port = 6800 , secret = '' ) special \u00b6 Initialization method. Parameters: Name Type Description Default host str the remote process address. 'http://localhost' port int the remote process port. 6800 secret str the secret token. '' Source code in aria2p/client.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def __init__ ( self , host : str = DEFAULT_HOST , port : int = DEFAULT_PORT , secret : str = \"\" ) -> None : # nosec \"\"\" Initialization method. Parameters: host: the remote process address. port: the remote process port. secret: the secret token. \"\"\" host = host . rstrip ( \"/\" ) self . host = host self . port = port self . secret = secret self . listening = False add_metalink ( self , metalink , options = None , position = None ) \u00b6 aria2.addMetalink([secret], metalink[, options[, position]]) This method adds a Metalink download by uploading a \".metalink\" file. metalink is a base64-encoded string which contains the contents of the \".metalink\" file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns an array of GIDs of newly registered downloads. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.meta4. JSON-RPC Example >>> import urllib2 , json , base64 >>> metalink = base64 . b64encode ( open ( 'file.meta4' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addMetalink' , ... 'params' :[ metalink ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"2089b05ecca3d829\"]}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addMetalink ( xmlrpclib . Binary ( open ( 'file.meta4' , mode = 'rb' ) . read ())) [ '2089b05ecca3d829' ] Source code in aria2p/client.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def add_metalink ( self , metalink , options = None , position = None ): \"\"\" aria2.addMetalink([secret], metalink[, options[, position]]) This method adds a Metalink download by uploading a \".metalink\" file. metalink is a base64-encoded string which contains the contents of the \".metalink\" file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns an array of GIDs of newly registered downloads. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.meta4. JSON-RPC Example >>> import urllib2, json, base64 >>> metalink = base64.b64encode(open('file.meta4').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addMetalink', ... 'params':[metalink]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"2089b05ecca3d829\"]}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addMetalink(xmlrpclib.Binary(open('file.meta4', mode='rb').read())) ['2089b05ecca3d829'] \"\"\" return self . call ( self . ADD_METALINK , [ metalink , options , position ]) add_torrent ( self , torrent , uris , options = None , position = None ) \u00b6 aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) This method adds a BitTorrent download by uploading a \".torrent\" file. If you want to add a BitTorrent Magnet URI, use the aria2.addUri() method instead. torrent must be a base64-encoded string containing the contents of the \".torrent\" file. uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.torrent. JSON-RPC Example >>> import urllib2 , json , base64 >>> torrent = base64 . b64encode ( open ( 'file.torrent' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , 'params' :[ torrent ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addTorrent ( xmlrpclib . Binary ( open ( 'file.torrent' , mode = 'rb' ) . read ())) '2089b05ecca3d829' Source code in aria2p/client.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def add_torrent ( self , torrent , uris , options = None , position = None ): \"\"\" aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) This method adds a BitTorrent download by uploading a \".torrent\" file. If you want to add a BitTorrent Magnet URI, use the aria2.addUri() method instead. torrent must be a base64-encoded string containing the contents of the \".torrent\" file. uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.torrent. JSON-RPC Example >>> import urllib2, json, base64 >>> torrent = base64.b64encode(open('file.torrent').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', 'params':[torrent]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addTorrent(xmlrpclib.Binary(open('file.torrent', mode='rb').read())) '2089b05ecca3d829' \"\"\" return self . call ( self . ADD_TORRENT , [ torrent , uris , options , position ]) add_uri ( self , uris , options = None , position = None ) \u00b6 aria2.addUri([secret], uris[, options[, position]]) This method adds a new download. uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. JSON-RPC Example The following example adds http://example.org/file: >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example The following example adds http://example.org/file: >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addUri ([ 'http://example.org/file' ]) '2089b05ecca3d829' The following example adds a new download with two sources and some options: >>> s.aria2.addUri(['http://example.org/file', 'http://mirror/file'], dict(dir=\"/tmp\")) 'd2703803b52216d1' The following example adds a download and inserts it to the front of the queue: >>> s.aria2.addUri(['http://example.org/file'], {}, 0) 'ca3d829cee549a4d' Source code in aria2p/client.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def add_uri ( self , uris : List [ str ], options : dict = None , position : int = None ): \"\"\" aria2.addUri([secret], uris[, options[, position]]) This method adds a new download. uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. JSON-RPC Example The following example adds http://example.org/file: >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example The following example adds http://example.org/file: >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addUri(['http://example.org/file']) '2089b05ecca3d829' The following example adds a new download with two sources and some options: >>> s.aria2.addUri(['http://example.org/file', 'http://mirror/file'], dict(dir=\"/tmp\")) 'd2703803b52216d1' The following example adds a download and inserts it to the front of the queue: >>> s.aria2.addUri(['http://example.org/file'], {}, 0) 'ca3d829cee549a4d' \"\"\" return self . call ( self . ADD_URI , params = [ uris , options , position ]) batch_call ( self , calls , insert_secret = True ) \u00b6 Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: Name Type Description Default calls List[Tuple[str, List[str], Union[str, int]]] a list of tuples composed of method name, parameters and ID. required insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description List[Union[dict, list, str, int]] The results for each call in the batch. Source code in aria2p/client.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def batch_call ( self , calls : List [ Tuple [ str , List [ str ], Union [ str , int ]]], insert_secret : bool = True ) -> List [ CALL_RETURN_TYPE ]: \"\"\" Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: calls: a list of tuples composed of method name, parameters and ID. insert_secret: whether to insert the secret token in the parameters or not. Returns: The results for each call in the batch. \"\"\" payloads = [] for method , params , msg_id in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) payloads . append ( self . get_payload ( method , params , msg_id , as_json = False )) payload = json . dumps ( payloads ) responses = self . post ( payload ) return [ self . res_or_raise ( resp ) for resp in responses ] call ( self , method , params = None , msg_id = None , insert_secret = True ) \u00b6 Call a single JSON-RPC method. Parameters: Name Type Description Default method str the method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[str] a list of parameters. None msg_id Union[int, str] the ID of the call, sent back with the server's answer. None insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def call ( self , method : str , params : List [ str ] = None , msg_id : Union [ int , str ] = None , insert_secret : bool = True ) -> CALL_RETURN_TYPE : \"\"\" Call a single JSON-RPC method. Parameters: method: the method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: a list of parameters. msg_id: the ID of the call, sent back with the server's answer. insert_secret: whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" params = self . get_params ( * ( params or [])) if insert_secret and self . secret : if method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) elif method == self . MULTICALL : for param in params [ 0 ]: param [ \"params\" ] . insert ( 0 , f \"token: { self . secret } \" ) return self . res_or_raise ( self . post ( self . get_payload ( method , params , msg_id = msg_id ))) change_global_option ( self , options ) \u00b6 aria2.changeGlobalOption([secret], options) This method changes global options dynamically. options is a struct. The following options are available: \u00b7 bt-max-open-files \u00b7 download-result \u00b7 keep-unfinished-download-result \u00b7 log \u00b7 log-level \u00b7 max-concurrent-downloads \u00b7 max-download-result \u00b7 max-overall-download-limit \u00b7 max-overall-upload-limit \u00b7 optimize-concurrent-downloads \u00b7 save-cookies \u00b7 save-session \u00b7 server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum, index-out, out, pause and select-file. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string(\"\") as the parameter value. Note that log file is always opened in append mode. This method returns OK for success. Source code in aria2p/client.py 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 def change_global_option ( self , options ): \"\"\" aria2.changeGlobalOption([secret], options) This method changes global options dynamically. options is a struct. The following options are available: \u00b7 bt-max-open-files \u00b7 download-result \u00b7 keep-unfinished-download-result \u00b7 log \u00b7 log-level \u00b7 max-concurrent-downloads \u00b7 max-download-result \u00b7 max-overall-download-limit \u00b7 max-overall-upload-limit \u00b7 optimize-concurrent-downloads \u00b7 save-cookies \u00b7 save-session \u00b7 server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum, index-out, out, pause and select-file. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string(\"\") as the parameter value. Note that log file is always opened in append mode. This method returns OK for success. \"\"\" return self . call ( self . CHANGE_GLOBAL_OPTION , [ options ]) change_option ( self , gid , options ) \u00b6 aria2.changeOption([secret], gid, options) This method changes options of the download denoted by gid (string) dynamically. options is a struct. The options listed in Input File subsection are available, except for following options: \u00b7 dry-run \u00b7 metalink-base-uri \u00b7 parameterized-uri \u00b7 pause \u00b7 piece-length \u00b7 rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): \u00b7 bt-max-peers \u00b7 bt-request-peer-speed-limit \u00b7 bt-remove-unselected-file \u00b7 force-save \u00b7 max-download-limit \u00b7 max-upload-limit This method returns OK for success. The following examples set the max-download-limit option to 20K for the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeOption' , ... 'params' :[ '2089b05ecca3d829' , ... { 'max-download-limit' : '10K' }]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changeOption ( '2089b05ecca3d829' , { 'max-download-limit' : '20K' }) 'OK' Source code in aria2p/client.py 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 def change_option ( self , gid , options ): \"\"\" aria2.changeOption([secret], gid, options) This method changes options of the download denoted by gid (string) dynamically. options is a struct. The options listed in Input File subsection are available, except for following options: \u00b7 dry-run \u00b7 metalink-base-uri \u00b7 parameterized-uri \u00b7 pause \u00b7 piece-length \u00b7 rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): \u00b7 bt-max-peers \u00b7 bt-request-peer-speed-limit \u00b7 bt-remove-unselected-file \u00b7 force-save \u00b7 max-download-limit \u00b7 max-upload-limit This method returns OK for success. The following examples set the max-download-limit option to 20K for the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeOption', ... 'params':['2089b05ecca3d829', ... {'max-download-limit':'10K'}]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changeOption('2089b05ecca3d829', {'max-download-limit':'20K'}) 'OK' \"\"\" return self . call ( self . CHANGE_OPTION , [ gid , options ]) change_position ( self , gid , pos , how ) \u00b6 aria2.changePosition([secret], gid, pos, how) This method changes the position of the download denoted by gid in the queue. pos is an integer. how is a string. If how is POS_SET, it moves the download to a position relative to the beginning of the queue. If how is POS_CUR, it moves the download to a position relative to the current position. If how is POS_END, it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. The response is an integer denoting the resulting position. For example, if GID#2089b05ecca3d829 is currently in position 3, aria2.changePosition('2089b05ecca3d829', -1, 'POS_CUR') will change its position to 2. Additionally aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). The following examples move the download GID#2089b05ecca3d829 to the front of the queue. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changePosition' , ... 'params' :[ '2089b05ecca3d829' , 0 , 'POS_SET' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : 0 } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changePosition ( '2089b05ecca3d829' , 0 , 'POS_SET' ) 0 Source code in aria2p/client.py 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def change_position ( self , gid , pos , how ): \"\"\" aria2.changePosition([secret], gid, pos, how) This method changes the position of the download denoted by gid in the queue. pos is an integer. how is a string. If how is POS_SET, it moves the download to a position relative to the beginning of the queue. If how is POS_CUR, it moves the download to a position relative to the current position. If how is POS_END, it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. The response is an integer denoting the resulting position. For example, if GID#2089b05ecca3d829 is currently in position 3, aria2.changePosition('2089b05ecca3d829', -1, 'POS_CUR') will change its position to 2. Additionally aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). The following examples move the download GID#2089b05ecca3d829 to the front of the queue. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changePosition', ... 'params':['2089b05ecca3d829', 0, 'POS_SET']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') 0 \"\"\" return self . call ( self . CHANGE_POSITION , [ gid , pos , how ]) change_uri ( self , gid , file_index , del_uris , add_uris , position = None ) \u00b6 aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) This method removes the URIs in delUris from and appends the URIs in addUris to download denoted by gid. delUris and addUris are lists of strings. A download can contain multiple files and URIs are attached to each file. fileIndex is used to select which file to remove/attach given URIs. fileIndex is 1-based. position is used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in delUris. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in delUris. This method returns a list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeUri' , ... 'params' :[ '2089b05ecca3d829' , 1 , [], [ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ 0 , 1 ]} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changeUri ( '2089b05ecca3d829' , 1 , [], [ 'http://example.org/file' ]) [ 0 , 1 ] Source code in aria2p/client.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 def change_uri ( self , gid , file_index , del_uris , add_uris , position = None ): \"\"\" aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) This method removes the URIs in delUris from and appends the URIs in addUris to download denoted by gid. delUris and addUris are lists of strings. A download can contain multiple files and URIs are attached to each file. fileIndex is used to select which file to remove/attach given URIs. fileIndex is 1-based. position is used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in delUris. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in delUris. This method returns a list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeUri', ... 'params':['2089b05ecca3d829', 1, [], ['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changeUri('2089b05ecca3d829', 1, [], ['http://example.org/file']) [0, 1] \"\"\" return self . call ( self . CHANGE_URI , [ gid , file_index , del_uris , add_uris , position ]) force_pause ( self , gid ) \u00b6 aria2.forcePause([secret], gid) This method pauses the download denoted by gid. This method behaves just like aria2.pause() except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Source code in aria2p/client.py 584 585 586 587 588 589 590 591 592 def force_pause ( self , gid ): \"\"\" aria2.forcePause([secret], gid) This method pauses the download denoted by gid. This method behaves just like aria2.pause() except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. \"\"\" return self . call ( self . FORCE_PAUSE , [ gid ]) force_pause_all ( self ) \u00b6 aria2.forcePauseAll([secret]) This method is equal to calling aria2.forcePause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 594 595 596 597 598 599 600 def force_pause_all ( self ): \"\"\" aria2.forcePauseAll([secret]) This method is equal to calling aria2.forcePause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . FORCE_PAUSE_ALL ) force_remove ( self , gid ) \u00b6 aria2.forceRemove([secret], gid) This method removes the download denoted by gid. This method behaves just like aria2.remove() except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Source code in aria2p/client.py 555 556 557 558 559 560 561 562 563 def force_remove ( self , gid ): \"\"\" aria2.forceRemove([secret], gid) This method removes the download denoted by gid. This method behaves just like aria2.remove() except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. \"\"\" return self . call ( self . FORCE_REMOVE , [ gid ]) force_shutdown ( self ) \u00b6 aria2.forceShutdown([secret]) This method shuts down aria2(). This method behaves like :func:'aria2.shutdown` without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. This method returns OK. Source code in aria2p/client.py 1513 1514 1515 1516 1517 1518 1519 1520 1521 def force_shutdown ( self ): \"\"\" aria2.forceShutdown([secret]) This method shuts down aria2(). This method behaves like :func:'aria2.shutdown` without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. This method returns OK. \"\"\" return self . call ( self . FORCE_SHUTDOWN ) get_files ( self , gid ) \u00b6 aria2.getFiles([secret], gid) This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path File path. length File size in bytes. completedLength Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. selected true if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getFiles' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getFiles ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'index' : '1' , 'length' : '34896138' , 'completedLength' : '34896138' , 'path' : '/downloads/file' , 'selected' : 'true' , 'uris' : [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }]}] Source code in aria2p/client.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 def get_files ( self , gid ): \"\"\" aria2.getFiles([secret], gid) This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path File path. length File size in bytes. completedLength Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. selected true if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getFiles', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getFiles('2089b05ecca3d829') >>> pprint(r) [{'index': '1', 'length': '34896138', 'completedLength': '34896138', 'path': '/downloads/file', 'selected': 'true', 'uris': [{'status': 'used', 'uri': 'http://example.org/file'}]}] \"\"\" return self . call ( self . GET_FILES , [ gid ]) get_global_option ( self ) \u00b6 aria2.getGlobalOption([secret]) This method returns the global options. The response is a struct. Its keys are the names of options. Values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the aria2.getOption() method. Source code in aria2p/client.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 def get_global_option ( self ): \"\"\" aria2.getGlobalOption([secret]) This method returns the global options. The response is a struct. Its keys are the names of options. Values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the aria2.getOption() method. \"\"\" return self . call ( self . GET_GLOBAL_OPTION ) get_global_stat ( self ) \u00b6 aria2.getGlobalStat([secret]) This method returns global statistics such as the overall download and upload speeds. The response is a struct and contains the following keys. Values are strings. downloadSpeed Overall download speed (byte/sec). uploadSpeed Overall upload speed(byte/sec). numActive The number of active downloads. numWaiting The number of waiting downloads. numStopped The number of stopped downloads in the current session. This value is capped by the --max-download-result option. numStoppedTotal The number of stopped downloads in the current session and not capped by the --max-download-result option. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getGlobalStat' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'downloadSpeed' : u '21846' , u 'numActive' : u '2' , u 'numStopped' : u '0' , u 'numWaiting' : u '0' , u 'uploadSpeed' : u '0' }} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getGlobalStat () >>> pprint ( r ) { 'downloadSpeed' : '23136' , 'numActive' : '2' , 'numStopped' : '0' , 'numWaiting' : '0' , 'uploadSpeed' : '0' } Source code in aria2p/client.py 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 def get_global_stat ( self ): \"\"\" aria2.getGlobalStat([secret]) This method returns global statistics such as the overall download and upload speeds. The response is a struct and contains the following keys. Values are strings. downloadSpeed Overall download speed (byte/sec). uploadSpeed Overall upload speed(byte/sec). numActive The number of active downloads. numWaiting The number of waiting downloads. numStopped The number of stopped downloads in the current session. This value is capped by the --max-download-result option. numStoppedTotal The number of stopped downloads in the current session and not capped by the --max-download-result option. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getGlobalStat'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'downloadSpeed': u'21846', u'numActive': u'2', u'numStopped': u'0', u'numWaiting': u'0', u'uploadSpeed': u'0'}} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getGlobalStat() >>> pprint(r) {'downloadSpeed': '23136', 'numActive': '2', 'numStopped': '0', 'numWaiting': '0', 'uploadSpeed': '0'} \"\"\" return self . call ( self . GET_GLOBAL_STAT ) get_option ( self , gid ) \u00b6 aria2.getOption([secret], gid) This method returns options of the download denoted by gid. The response is a struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. The following examples get options of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getOption' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'allow-overwrite' : u 'false' , u 'allow-piece-length-change' : u 'false' , u 'always-resume' : u 'true' , u 'async-dns' : u 'true' , ... XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getOption ( '2089b05ecca3d829' ) >>> pprint ( r ) { 'allow-overwrite' : 'false' , 'allow-piece-length-change' : 'false' , 'always-resume' : 'true' , 'async-dns' : 'true' , .... Source code in aria2p/client.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 def get_option ( self , gid ): \"\"\" aria2.getOption([secret], gid) This method returns options of the download denoted by gid. The response is a struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. The following examples get options of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getOption', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'allow-overwrite': u'false', u'allow-piece-length-change': u'false', u'always-resume': u'true', u'async-dns': u'true', ... XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getOption('2089b05ecca3d829') >>> pprint(r) {'allow-overwrite': 'false', 'allow-piece-length-change': 'false', 'always-resume': 'true', 'async-dns': 'true', .... \"\"\" return self . call ( self . GET_OPTION , [ gid ]) get_params ( * args ) staticmethod \u00b6 Build the list of parameters. This method simply removes the None values from the given arguments. Parameters: Name Type Description Default args Any list of parameters. () Returns: Type Description list A new list, with None values filtered out. Source code in aria2p/client.py 386 387 388 389 390 391 392 393 394 395 396 397 398 399 @staticmethod def get_params ( * args : Any ) -> list : \"\"\" Build the list of parameters. This method simply removes the ``None`` values from the given arguments. Parameters: args: list of parameters. Returns: A new list, with ``None`` values filtered out. \"\"\" return [ p for p in args if p is not None ] get_payload ( method , params = None , msg_id = None , as_json = True ) staticmethod \u00b6 Build a payload. Parameters: Name Type Description Default method the method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] the list of parameters. None msg_id Union[int, str] the ID of the call, sent back with the server's answer. None as_json bool whether to return the payload as a JSON-string or Python dictionary. True Returns: Type Description Union[str, dict] The payload as a JSON string or as Python dictionary. Source code in aria2p/client.py 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @staticmethod def get_payload ( method , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , as_json : bool = True ) -> Union [ str , dict ]: \"\"\" Build a payload. Parameters: method: the method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: the list of parameters. msg_id: the ID of the call, sent back with the server's answer. as_json: whether to return the payload as a JSON-string or Python dictionary. Returns: The payload as a JSON string or as Python dictionary. \"\"\" payload = { \"jsonrpc\" : \"2.0\" , \"method\" : method } if msg_id is not None : payload [ \"id\" ] = msg_id else : payload [ \"id\" ] = DEFAULT_ID if params : payload [ \"params\" ] = params return json . dumps ( payload ) if as_json else payload get_peers ( self , gid ) \u00b6 aria2.getPeers([secret], gid) This method returns a list peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId Percent-encoded peer ID. ip IP address of the peer. port Port number of the peer. bitfield Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking true if aria2 is choking the peer. Otherwise false. peerChoking true if the peer is choking aria2. Otherwise false. downloadSpeed Download speed (byte/sec) that this client obtains from the peer. uploadSpeed Upload speed(byte/sec) that this client uploads to the peer. seeder true if this peer is a seeder. Otherwise false. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getPeers' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'amChoking' : u 'true' , u 'bitfield' : u 'ffffffffffffffffffffffffffffffffffffffff' , u 'downloadSpeed' : u '10602' , u 'ip' : u '10.0.0.9' , u 'peerChoking' : u 'false' , u 'peerId' : u 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , u 'port' : u '6881' , u 'seeder' : u 'true' , u 'uploadSpeed' : u '0' }, { u 'amChoking' : u 'false' , u 'bitfield' : u 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , u 'downloadSpeed' : u '8654' , u 'ip' : u '10.0.0.30' , u 'peerChoking' : u 'false' , u 'peerId' : u 'bittorrent client758' , u 'port' : u '37842' , u 'seeder' : u 'false' , u 'uploadSpeed' : u '6890' }]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getPeers ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'amChoking' : 'true' , 'bitfield' : 'ffffffffffffffffffffffffffffffffffffffff' , 'downloadSpeed' : '10602' , 'ip' : '10.0.0.9' , 'peerChoking' : 'false' , 'peerId' : 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , 'port' : '6881' , 'seeder' : 'true' , 'uploadSpeed' : '0' }, { 'amChoking' : 'false' , 'bitfield' : 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , 'downloadSpeed' : '8654' , 'ip' : '10.0.0.30' , 'peerChoking' : 'false' , 'peerId' : 'bittorrent client758' , 'port' : '37842' , 'seeder' : 'false, 'uploadSpeed' : '6890' }] Source code in aria2p/client.py 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 def get_peers ( self , gid ): \"\"\" aria2.getPeers([secret], gid) This method returns a list peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId Percent-encoded peer ID. ip IP address of the peer. port Port number of the peer. bitfield Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking true if aria2 is choking the peer. Otherwise false. peerChoking true if the peer is choking aria2. Otherwise false. downloadSpeed Download speed (byte/sec) that this client obtains from the peer. uploadSpeed Upload speed(byte/sec) that this client uploads to the peer. seeder true if this peer is a seeder. Otherwise false. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getPeers', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'amChoking': u'true', u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff', u'downloadSpeed': u'10602', u'ip': u'10.0.0.9', u'peerChoking': u'false', u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', u'port': u'6881', u'seeder': u'true', u'uploadSpeed': u'0'}, {u'amChoking': u'false', u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', u'downloadSpeed': u'8654', u'ip': u'10.0.0.30', u'peerChoking': u'false', u'peerId': u'bittorrent client758', u'port': u'37842', u'seeder': u'false', u'uploadSpeed': u'6890'}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getPeers('2089b05ecca3d829') >>> pprint(r) [{'amChoking': 'true', 'bitfield': 'ffffffffffffffffffffffffffffffffffffffff', 'downloadSpeed': '10602', 'ip': '10.0.0.9', 'peerChoking': 'false', 'peerId': 'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', 'port': '6881', 'seeder': 'true', 'uploadSpeed': '0'}, {'amChoking': 'false', 'bitfield': 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', 'downloadSpeed': '8654', 'ip': '10.0.0.30', 'peerChoking': 'false', 'peerId': 'bittorrent client758', 'port': '37842', 'seeder': 'false, 'uploadSpeed': '6890'}] \"\"\" return self . call ( self . GET_PEERS , [ gid ]) get_servers ( self , gid ) \u00b6 aria2.getServers([secret], gid) This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers A list of structs which contain the following keys. uri Original URI . currentUri This is the URI currently used for downloading . If redirection is involved , currentUri and uri may differ . downloadSpeed Download speed ( byte / sec ) JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getServers' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'servers' : [{ u 'currentUri' : u 'http://example.org/file' , u 'downloadSpeed' : u '10467' , u 'uri' : u 'http://example.org/file' }]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getServers ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'index' : '1' , 'servers' : [{ 'currentUri' : 'http://example.org/dl/file' , 'downloadSpeed' : '20285' , 'uri' : 'http://example.org/file' }]}] Source code in aria2p/client.py 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 def get_servers ( self , gid ): \"\"\" aria2.getServers([secret], gid) This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers A list of structs which contain the following keys. uri Original URI. currentUri This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. downloadSpeed Download speed (byte/sec) JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getServers', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'servers': [{u'currentUri': u'http://example.org/file', u'downloadSpeed': u'10467', u'uri': u'http://example.org/file'}]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getServers('2089b05ecca3d829') >>> pprint(r) [{'index': '1', 'servers': [{'currentUri': 'http://example.org/dl/file', 'downloadSpeed': '20285', 'uri': 'http://example.org/file'}]}] \"\"\" return self . call ( self . GET_SERVERS , [ gid ]) get_session_info ( self ) \u00b6 aria2.getSessionInfo([secret]) This method returns session information. The response is a struct and contains following key. sessionId Session ID, which is generated each time when aria2 is invoked. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getSessionInfo' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'sessionId' : u 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' }} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . getSessionInfo () { 'sessionId' : 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' } Source code in aria2p/client.py 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 def get_session_info ( self ): \"\"\" aria2.getSessionInfo([secret]) This method returns session information. The response is a struct and contains following key. sessionId Session ID, which is generated each time when aria2 is invoked. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getSessionInfo'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.getSessionInfo() {'sessionId': 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'} \"\"\" return self . call ( self . GET_SESSION_INFO ) get_uris ( self , gid ) \u00b6 aria2.getUris([secret], gid) This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri URI status 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getUris' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getUris ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }] Source code in aria2p/client.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 def get_uris ( self , gid ): \"\"\" aria2.getUris([secret], gid) This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri URI status 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getUris', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'status': u'used', u'uri': u'http://example.org/file'}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getUris('2089b05ecca3d829') >>> pprint(r) [{'status': 'used', 'uri': 'http://example.org/file'}] \"\"\" return self . call ( self . GET_URIS , [ gid ]) get_version ( self ) \u00b6 aria2.getVersion([secret]) This method returns the version of aria2 and the list of enabled features. The response is a struct and contains following keys. version Version number of aria2 as a string. enabledFeatures List of enabled features. Each feature is given as a string. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getVersion' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'enabledFeatures' : [ u 'Async DNS' , u 'BitTorrent' , u 'Firefox3 Cookie' , u 'GZip' , u 'HTTPS' , u 'Message Digest' , u 'Metalink' , u 'XML-RPC' ], u 'version' : u '1.11.0' }} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getVersion () >>> pprint ( r ) { 'enabledFeatures' : [ 'Async DNS' , 'BitTorrent' , 'Firefox3 Cookie' , 'GZip' , 'HTTPS' , 'Message Digest' , 'Metalink' , 'XML-RPC' ], 'version' : '1.11.0' } Source code in aria2p/client.py 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 def get_version ( self ): \"\"\" aria2.getVersion([secret]) This method returns the version of aria2 and the list of enabled features. The response is a struct and contains following keys. version Version number of aria2 as a string. enabledFeatures List of enabled features. Each feature is given as a string. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getVersion'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'enabledFeatures': [u'Async DNS', u'BitTorrent', u'Firefox3 Cookie', u'GZip', u'HTTPS', u'Message Digest', u'Metalink', u'XML-RPC'], u'version': u'1.11.0'}} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getVersion() >>> pprint(r) {'enabledFeatures': ['Async DNS', 'BitTorrent', 'Firefox3 Cookie', 'GZip', 'HTTPS', 'Message Digest', 'Metalink', 'XML-RPC'], 'version': '1.11.0'} \"\"\" return self . call ( self . GET_VERSION ) list_methods ( self ) \u00b6 system.listMethods() This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listMethods' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.addUri' , u 'aria2.addTorrent' , ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . system . listMethods () [ 'aria2.addUri' , 'aria2.addTorrent' , ... Source code in aria2p/client.py 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 def list_methods ( self ): \"\"\" system.listMethods() This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listMethods'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.addUri', u'aria2.addTorrent', ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.system.listMethods() ['aria2.addUri', 'aria2.addTorrent', ... \"\"\" return self . call ( self . LIST_METHODS ) list_notifications ( self ) \u00b6 system.listNotifications() This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listNotifications' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.onDownloadStart' , u 'aria2.onDownloadPause' , ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . system . listNotifications () [ 'aria2.onDownloadStart' , 'aria2.onDownloadPause' , ... Source code in aria2p/client.py 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 def list_notifications ( self ): \"\"\" system.listNotifications() This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listNotifications'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.onDownloadStart', u'aria2.onDownloadPause', ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.system.listNotifications() ['aria2.onDownloadStart', 'aria2.onDownloadPause', ... \"\"\" return self . call ( self . LIST_NOTIFICATIONS ) listen_to_notifications ( self , on_download_start = None , on_download_pause = None , on_download_stop = None , on_download_complete = None , on_download_error = None , on_bt_download_complete = None , timeout = 5 , handle_signals = True ) \u00b6 Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [ stop_listening ][aria2p.client.Client.stop_listening] method. Parameters: Name Type Description Default on_download_start Callable Callback for the aria2.onDownloadStart event. None on_download_pause Callable Callback for the aria2.onDownloadPause event. None on_download_stop Callable Callback for the aria2.onDownloadStop event. None on_download_complete Callable Callback for the aria2.onDownloadComplete event. None on_download_error Callable Callback for the aria2.onDownloadError event. None on_bt_download_complete Callable Callback for the aria2.onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/client.py 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 def listen_to_notifications ( self , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method. Parameters: on_download_start: Callback for the ``aria2.onDownloadStart`` event. on_download_pause: Callback for the ``aria2.onDownloadPause`` event. on_download_stop: Callback for the ``aria2.onDownloadStop`` event. on_download_complete: Callback for the ``aria2.onDownloadComplete`` event. on_download_error: Callback for the ``aria2.onDownloadError`` event. on_bt_download_complete: Callback for the ``aria2.onBtDownloadComplete`` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" self . listening = True ws_server = self . ws_server logger . debug ( f \"Notifications ( { ws_server } ): opening WebSocket with timeout= { timeout } \" ) try : socket = websocket . create_connection ( ws_server , timeout = timeout ) except ConnectionRefusedError : logger . error ( f \"Notifications ( { ws_server } ): connection refused. Is the server running?\" ) return callbacks = { NOTIFICATION_START : on_download_start , NOTIFICATION_PAUSE : on_download_pause , NOTIFICATION_STOP : on_download_stop , NOTIFICATION_COMPLETE : on_download_complete , NOTIFICATION_ERROR : on_download_error , NOTIFICATION_BT_COMPLETE : on_bt_download_complete , } stopped = SignalHandler ([ \"SIGTERM\" , \"SIGINT\" ]) if handle_signals else False while not stopped : try : logger . debug ( f \"Notifications ( { ws_server } ): waiting for data over WebSocket\" ) message = socket . recv () except websocket . WebSocketConnectionClosedException : logger . error ( f \"Notifications ( { ws_server } ): connection to server was closed. Is the server running?\" ) break except websocket . WebSocketTimeoutException : logger . debug ( f \"Notifications ( { ws_server } ): reached timeout ( { timeout } s)\" ) else : notification = Notification . get_or_raise ( json . loads ( message )) logger . info ( f \"Notifications ( { ws_server } ): received { notification . type } with gid= { notification . gid } \" ) callback = callbacks . get ( notification . type ) if callable ( callback ): logger . debug ( f \"Notifications ( { ws_server } ): calling { callback } with gid= { notification . gid } \" ) callback ( notification . gid ) else : logger . debug ( f \"Notifications ( { ws_server } ): no callback given for type \" + notification . type ) if not self . listening : logger . debug ( f \"Notifications ( { ws_server } ): stopped listening\" ) break if stopped : logger . debug ( \"Notifications: stopped listening after receiving a signal\" ) self . listening = False logger . debug ( f \"Notifications ( { ws_server } ): closing WebSocket\" ) socket . close () multicall ( self , methods ) \u00b6 system.multicall(methods) This methods encapsulates multiple method calls in a single request. methods is an array of structs. The structs contain two keys: methodName and params. methodName is the method name to call and params is array containing parameters to the method call. This method returns an array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. JSON-RPC Example >>> import urllib2 , json , base64 >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.multicall' , ... 'params' :[[{ 'methodName' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'methodName' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [[ u '2089b05ecca3d829' ], [ u 'd2703803b52216d1' ]]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'2089b05ecca3d829'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> mc = xmlrpclib . MultiCall ( s ) >>> mc . aria2 . addUri ([ 'http://example.org/file' ]) >>> mc . aria2 . addTorrent ( xmlrpclib . Binary ( open ( 'file.torrent' , mode = 'rb' ) . read ())) >>> r = mc () >>> tuple ( r ) ( '2089b05ecca3d829' , 'd2703803b52216d1' ) Source code in aria2p/client.py 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 def multicall ( self , methods ): \"\"\" system.multicall(methods) This methods encapsulates multiple method calls in a single request. methods is an array of structs. The structs contain two keys: methodName and params. methodName is the method name to call and params is array containing parameters to the method call. This method returns an array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. JSON-RPC Example >>> import urllib2, json, base64 >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.multicall', ... 'params':[[{'methodName':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'methodName':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'2089b05ecca3d829'], [u'd2703803b52216d1']]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'2089b05ecca3d829'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> mc = xmlrpclib.MultiCall(s) >>> mc.aria2.addUri(['http://example.org/file']) >>> mc.aria2.addTorrent(xmlrpclib.Binary(open('file.torrent', mode='rb').read())) >>> r = mc() >>> tuple(r) ('2089b05ecca3d829', 'd2703803b52216d1') \"\"\" return self . call ( self . MULTICALL , [ methods ]) multicall2 ( self , calls , insert_secret = True ) \u00b6 An method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"2089b05ecca3d829\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"2089b05ecca3d829\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: Name Type Description Default calls List[Tuple[str, List[str]]] list of tuples composed of method name and parameters. required insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def multicall2 ( self , calls : List [ Tuple [ str , List [ str ]]], insert_secret : bool = True ) -> CALL_RETURN_TYPE : \"\"\" An method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"2089b05ecca3d829\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"2089b05ecca3d829\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note: multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: calls: list of tuples composed of method name and parameters. insert_secret: whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" multicall_params = [] for method , params in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) multicall_params . append ({ \"methodName\" : method , \"params\" : params }) payload = self . get_payload ( self . MULTICALL , [ multicall_params ]) return self . res_or_raise ( self . post ( payload )) pause ( self , gid ) \u00b6 aria2.pause([secret], gid) This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the aria2.unpause() method. This method returns GID of paused download. Source code in aria2p/client.py 565 566 567 568 569 570 571 572 573 574 def pause ( self , gid ): \"\"\" aria2.pause([secret], gid) This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the aria2.unpause() method. This method returns GID of paused download. \"\"\" return self . call ( self . PAUSE , [ gid ]) pause_all ( self ) \u00b6 aria2.pauseAll([secret]) This method is equal to calling aria2.pause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 576 577 578 579 580 581 582 def pause_all ( self ): \"\"\" aria2.pauseAll([secret]) This method is equal to calling aria2.pause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . PAUSE_ALL ) post ( self , payload ) \u00b6 Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: Name Type Description Default payload dict the payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). required Returns: Type Description dict The answer from the server, as a Python dictionary. Source code in aria2p/client.py 311 312 313 314 315 316 317 318 319 320 321 322 323 324 def post ( self , payload : dict ) -> dict : \"\"\" Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: payload: the payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). Returns: The answer from the server, as a Python dictionary. \"\"\" return requests . post ( self . server , data = payload ) . json () purge_download_result ( self ) \u00b6 aria2.purgeDownloadResult([secret]) This method purges completed/error/removed downloads to free memory. This method returns OK. Source code in aria2p/client.py 1386 1387 1388 1389 1390 1391 1392 def purge_download_result ( self ): \"\"\" aria2.purgeDownloadResult([secret]) This method purges completed/error/removed downloads to free memory. This method returns OK. \"\"\" return self . call ( self . PURGE_DOWNLOAD_RESULT ) remove ( self , gid ) \u00b6 aria2.remove([secret], gid) This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. The following examples remove a download with GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.remove' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . remove ( '2089b05ecca3d829' ) '2089b05ecca3d829' Source code in aria2p/client.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 def remove ( self , gid ): \"\"\" aria2.remove([secret], gid) This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. The following examples remove a download with GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.remove', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.remove('2089b05ecca3d829') '2089b05ecca3d829' \"\"\" return self . call ( self . REMOVE , [ gid ]) remove_download_result ( self , gid ) \u00b6 aria2.removeDownloadResult([secret], gid) This method removes a completed/error/removed download denoted by gid from memory. This method returns OK for success. The following examples remove the download result of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.removeDownloadResult' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . removeDownloadResult ( '2089b05ecca3d829' ) 'OK' Source code in aria2p/client.py 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 def remove_download_result ( self , gid ): \"\"\" aria2.removeDownloadResult([secret], gid) This method removes a completed/error/removed download denoted by gid from memory. This method returns OK for success. The following examples remove the download result of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.removeDownloadResult', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.removeDownloadResult('2089b05ecca3d829') 'OK' \"\"\" return self . call ( self . REMOVE_DOWNLOAD_RESULT , [ gid ]) res_or_raise ( response ) staticmethod \u00b6 Return the result of the response, or raise an error with code and message. Parameters: Name Type Description Default response dict a response sent by the server. required Returns: Type Description Union[dict, list, str, int] The \"result\" value of the response. Exceptions: Type Description ClientException when the response contains an error (client/server error). See the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 @staticmethod def res_or_raise ( response : dict ) -> CALL_RETURN_TYPE : \"\"\" Return the result of the response, or raise an error with code and message. Parameters: response: a response sent by the server. Returns: The \"result\" value of the response. Raises: ClientException: when the response contains an error (client/server error). See the [`ClientException`][aria2p.client.ClientException] class. \"\"\" if \"error\" in response : raise Client . response_as_exception ( response ) return response [ \"result\" ] response_as_exception ( response ) staticmethod \u00b6 Transform the response as a [ ClientException ][aria2p.client.ClientException] instance and return it. Parameters: Name Type Description Default response dict a response sent by the server. required Returns: Type Description ClientException An instance of the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py 326 327 328 329 330 331 332 333 334 335 336 337 @staticmethod def response_as_exception ( response : dict ) -> ClientException : \"\"\" Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it. Parameters: response: a response sent by the server. Returns: An instance of the [`ClientException`][aria2p.client.ClientException] class. \"\"\" return ClientException ( response [ \"error\" ][ \"code\" ], response [ \"error\" ][ \"message\" ]) save_session ( self ) \u00b6 aria2.saveSession([secret]) This method saves the current session to a file specified by the --save-session option. This method returns OK if it succeeds. Source code in aria2p/client.py 1523 1524 1525 1526 1527 1528 1529 1530 def save_session ( self ): \"\"\" aria2.saveSession([secret]) This method saves the current session to a file specified by the --save-session option. This method returns OK if it succeeds. \"\"\" return self . call ( self . SAVE_SESSION ) shutdown ( self ) \u00b6 aria2.shutdown([secret]) This method shuts down aria2. This method returns OK. Source code in aria2p/client.py 1505 1506 1507 1508 1509 1510 1511 def shutdown ( self ): \"\"\" aria2.shutdown([secret]) This method shuts down aria2. This method returns OK. \"\"\" return self . call ( self . SHUTDOWN ) stop_listening ( self ) \u00b6 Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications]. Source code in aria2p/client.py 1731 1732 1733 1734 1735 1736 1737 1738 def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]. \"\"\" self . listening = False tell_active ( self , keys = None ) \u00b6 aria2.tellActive([secret][, keys]) This method returns a list of active downloads. The response is an array of the same structs as returned by the aria2.tellStatus() method. For the keys parameter, please refer to the aria2.tellStatus() method. Source code in aria2p/client.py 1054 1055 1056 1057 1058 1059 1060 1061 def tell_active ( self , keys = None ): \"\"\" aria2.tellActive([secret][, keys]) This method returns a list of active downloads. The response is an array of the same structs as returned by the aria2.tellStatus() method. For the keys parameter, please refer to the aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_ACTIVE , [ keys ]) tell_status ( self , gid , keys = None ) \u00b6 aria2.tellStatus([secret], gid[, keys]) This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, aria2.tellStatus(\"2089b05ecca3d829\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid GID of the download. status active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength Total length of the download in bytes. completedLength Completed length of the download in bytes. uploadLength Uploaded length of the download in bytes. bitfield Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed Download speed of this download measured in bytes/sec. uploadSpeed Upload speed of this download measured in bytes/sec. infoHash InfoHash. BitTorrent only. numSeeders The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength Piece length in bytes. numPieces The number of pieces. connections The number of peers/servers aria2 has connected to. errorCode The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage The (hopefully) human readable error message associated to errorCode. followedBy List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir Directory to save files. files Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. bittorrent Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains following keys. announceList List of lists of announce URIs . If the torrent contains announce and no announce - list , announce is converted to the announce - list format . comment The comment of the torrent . comment . utf - 8 is used if available . creationDate The creation time of the torrent . The value is an integer since the epoch , measured in seconds . mode File mode of the torrent . The value is either single or multi . info Struct which contains data from Info dictionary . It contains following keys . name name in info dictionary . name . utf - 8 is used if available . verifiedLength The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. JSON-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'bitfield' : u '0000000000' , u 'completedLength' : u '901120' , u 'connections' : u '1' , u 'dir' : u '/downloads' , u 'downloadSpeed' : u '15158' , u 'files' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}], u 'gid' : u '2089b05ecca3d829' , u 'numPieces' : u '34' , u 'pieceLength' : u '1048576' , u 'status' : u 'active' , u 'totalLength' : u '34896138' , u 'uploadLength' : u '0' , u 'uploadSpeed' : u '0' }} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'2089b05ecca3d829', u'totalLength': u'34896138'}} XML-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . tellStatus ( '2089b05ecca3d829' ) >>> pprint ( r ) { 'bitfield' : 'ffff80' , 'completedLength' : '34896138' , 'connections' : '0' , 'dir' : '/downloads' , 'downloadSpeed' : '0' , 'errorCode' : '0' , 'files' : [{ 'index' : '1' , 'length' : '34896138' , 'completedLength' : '34896138' , 'path' : '/downloads/file' , 'selected' : 'true' , 'uris' : [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }]}], 'gid' : '2089b05ecca3d829' , 'numPieces' : '17' , 'pieceLength' : '2097152' , 'status' : 'complete' , 'totalLength' : '34896138' , 'uploadLength' : '0' , 'uploadSpeed' : '0' } The following example gets only specific keys: >>> r = s.aria2.tellStatus('2089b05ecca3d829', ['gid', 'totalLength', 'completedLength']) >>> pprint(r) {'completedLength': '34896138', 'gid': '2089b05ecca3d829', 'totalLength': '34896138'} Source code in aria2p/client.pydef tell_status ( self , gid , keys = None ): \"\"\" aria2.tellStatus([secret], gid[, keys]) This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, aria2.tellStatus(\"2089b05ecca3d829\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid GID of the download. status active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength Total length of the download in bytes. completedLength Completed length of the download in bytes. uploadLength Uploaded length of the download in bytes. bitfield Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed Download speed of this download measured in bytes/sec. uploadSpeed Upload speed of this download measured in bytes/sec. infoHash InfoHash. BitTorrent only. numSeeders The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength Piece length in bytes. numPieces The number of pieces. connections The number of peers/servers aria2 has connected to. errorCode The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage The (hopefully) human readable error message associated to errorCode. followedBy List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir Directory to save files. files Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. bittorrent Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains following keys. announceList List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. comment The comment of the torrent. comment.utf-8 is used if available. creationDate The creation time of the torrent. The value is an integer since the epoch, measured in seconds. mode File mode of the torrent. The value is either single or multi. info Struct which contains data from Info dictionary. It contains following keys. name name in info dictionary. name.utf-8 is used if available. verifiedLength The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. JSON-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'bitfield': u'0000000000', u'completedLength': u'901120', u'connections': u'1', u'dir': u'/downloads', u'downloadSpeed': u'15158', u'files': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}], u'gid': u'2089b05ecca3d829', u'numPieces': u'34', u'pieceLength': u'1048576', u'status': u'active', u'totalLength': u'34896138', u'uploadLength': u'0', u'uploadSpeed': u'0'}} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'2089b05ecca3d829', u'totalLength': u'34896138'}} XML-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.tellStatus('2089b05ecca3d829') >>> pprint(r) {'bitfield': 'ffff80', 'completedLength': '34896138', 'connections': '0', 'dir': '/downloads', 'downloadSpeed': '0', 'errorCode': '0', 'files': [{'index': '1', 'length': '34896138', 'completedLength': '34896138', 'path': '/downloads/file', 'selected': 'true', 'uris': [{'status': 'used', 'uri': 'http://example.org/file'}]}], 'gid': '2089b05ecca3d829', 'numPieces': '17', 'pieceLength': '2097152', 'status': 'complete', 'totalLength': '34896138', 'uploadLength': '0', 'uploadSpeed': '0'} The following example gets only specific keys: >>> r = s.aria2.tellStatus('2089b05ecca3d829', ['gid', 'totalLength', 'completedLength']) >>> pprint(r) {'completedLength': '34896138', 'gid': '2089b05ecca3d829', 'totalLength': '34896138'} \"\"\" return self . call ( self . TELL_STATUS , [ gid , keys ]) tell_stopped ( self , offset , num , keys = None ) \u00b6 aria2.tellStopped([secret], offset, num[, keys]) This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. offset and num have the same semantics as described in the aria2.tellWaiting() method. The response is an array of the same structs as returned by the aria2.tellStatus() method. Source code in aria2p/client.py 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 def tell_stopped ( self , offset , num , keys = None ): \"\"\" aria2.tellStopped([secret], offset, num[, keys]) This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. offset and num have the same semantics as described in the aria2.tellWaiting() method. The response is an array of the same structs as returned by the aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_STOPPED , [ offset , num , keys ]) tell_waiting ( self , offset , num , keys = None ) \u00b6 aria2.tellWaiting([secret], offset, num[, keys]) This method returns a list of waiting downloads, including paused ones. offset is an integer and specifies the offset from the download waiting at the front. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. If offset is a positive integer, this method returns downloads in the range of [offset, offset + num). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. aria2.tellWaiting(0, 1) returns [\"A\"]. aria2.tellWaiting(1, 2) returns [\"B\", \"C\"]. aria2.tellWaiting(-1, 2) returns [\"C\", \"B\"]. The response is an array of the same structs as returned by aria2.tellStatus() method. Source code in aria2p/client.py 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 def tell_waiting ( self , offset , num , keys = None ): \"\"\" aria2.tellWaiting([secret], offset, num[, keys]) This method returns a list of waiting downloads, including paused ones. offset is an integer and specifies the offset from the download waiting at the front. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. If offset is a positive integer, this method returns downloads in the range of [offset, offset + num). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. aria2.tellWaiting(0, 1) returns [\"A\"]. aria2.tellWaiting(1, 2) returns [\"B\", \"C\"]. aria2.tellWaiting(-1, 2) returns [\"C\", \"B\"]. The response is an array of the same structs as returned by aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_WAITING , [ offset , num , keys ]) unpause ( self , gid ) \u00b6 aria2.unpause([secret], gid) This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Source code in aria2p/client.py 602 603 604 605 606 607 608 609 def unpause ( self , gid ): \"\"\" aria2.unpause([secret], gid) This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. \"\"\" return self . call ( self . UNPAUSE , [ gid ]) unpause_all ( self ) \u00b6 aria2.unpauseAll([secret]) This method is equal to calling aria2.unpause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 611 612 613 614 615 616 617 def unpause_all ( self ): \"\"\" aria2.unpauseAll([secret]) This method is equal to calling aria2.unpause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . UNPAUSE_ALL ) ClientException \u00b6 An exception specific to JSON-RPC errors. Notification \u00b6 A helper class for notifications. You should not need to use this class. It simply provides methods to instantiate a notification with a message received from the server through a WebSocket, or to raise a ClientException if the message is invalid. __init__ ( self , event_type , gid ) special \u00b6 Initialization method. Parameters: Name Type Description Default event_type str The notification type. Possible types are available in the NOTIFICATION_TYPES variable. required gid str The GID of the download related to the notification. required Source code in aria2p/client.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 def __init__ ( self , event_type : str , gid : str ) -> None : \"\"\" Initialization method. Parameters: event_type: The notification type. Possible types are available in the NOTIFICATION_TYPES variable. gid: The GID of the download related to the notification. \"\"\" self . type = event_type self . gid = gid from_message ( message ) staticmethod \u00b6 Static method to return an instance of Notification. This method expects a valid message (not containing errors). Parameters: Name Type Description Default message dict A valid message received over WebSocket. required Returns: Type Description Notification A Notification instance. Source code in aria2p/client.py 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 @staticmethod def from_message ( message : dict ) -> \"Notification\" : \"\"\" Static method to return an instance of Notification. This method expects a valid message (not containing errors). Parameters: message: A valid message received over WebSocket. Returns: A Notification instance. \"\"\" return Notification ( event_type = message [ \"method\" ], gid = message [ \"params\" ][ 0 ][ \"gid\" ]) get_or_raise ( message ) staticmethod \u00b6 Static method to raise a ClientException when the message is invalid or return a Notification instance. Parameters: Name Type Description Default message dict The JSON-loaded message received over WebSocket. required Returns: Type Description Notification A Notification instance if the message is valid. Exceptions: Type Description ClientException when the message contains an error. Source code in aria2p/client.py 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 @staticmethod def get_or_raise ( message : dict ) -> \"Notification\" : \"\"\" Static method to raise a ClientException when the message is invalid or return a Notification instance. Parameters: message: The JSON-loaded message received over WebSocket. Returns: A Notification instance if the message is valid. Raises: ClientException: when the message contains an error. \"\"\" if \"error\" in message : raise Client . response_as_exception ( message ) return Notification . from_message ( message )","title":"client.py"},{"location":"reference/client/#aria2p.client","text":"This module defines the ClientException and Client classes, which are used to communicate with a remote aria2c process through the JSON-RPC protocol.","title":"aria2p.client"},{"location":"reference/client/#aria2p.client.Client","text":"The JSON-RPC client class. In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote. This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri). The class defines a METHODS variable which contains the names of the available methods. The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument. The class provides utility methods: call, which performs a JSON-RPC call for a single method; batch_call, which performs a JSON-RPC call for a list of methods; multicall2, which is an equivalent of multicall, but easier to use; post, which is responsible for actually sending a payload to the remote process using a POST request; get_payload, which is used to build payloads; get_params, which is used to build list of parameters.","title":"Client"},{"location":"reference/client/#aria2p.client.Client.server","text":"Property to return the full remote process / server address.","title":"server"},{"location":"reference/client/#aria2p.client.Client.ws_server","text":"Property to return the full WebSocket remote server address.","title":"ws_server"},{"location":"reference/client/#aria2p.client.Client.__init__","text":"Initialization method. Parameters: Name Type Description Default host str the remote process address. 'http://localhost' port int the remote process port. 6800 secret str the secret token. '' Source code in aria2p/client.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def __init__ ( self , host : str = DEFAULT_HOST , port : int = DEFAULT_PORT , secret : str = \"\" ) -> None : # nosec \"\"\" Initialization method. Parameters: host: the remote process address. port: the remote process port. secret: the secret token. \"\"\" host = host . rstrip ( \"/\" ) self . host = host self . port = port self . secret = secret self . listening = False","title":"__init__()"},{"location":"reference/client/#aria2p.client.Client.add_metalink","text":"aria2.addMetalink([secret], metalink[, options[, position]]) This method adds a Metalink download by uploading a \".metalink\" file. metalink is a base64-encoded string which contains the contents of the \".metalink\" file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns an array of GIDs of newly registered downloads. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.meta4. JSON-RPC Example >>> import urllib2 , json , base64 >>> metalink = base64 . b64encode ( open ( 'file.meta4' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addMetalink' , ... 'params' :[ metalink ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"2089b05ecca3d829\"]}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addMetalink ( xmlrpclib . Binary ( open ( 'file.meta4' , mode = 'rb' ) . read ())) [ '2089b05ecca3d829' ] Source code in aria2p/client.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def add_metalink ( self , metalink , options = None , position = None ): \"\"\" aria2.addMetalink([secret], metalink[, options[, position]]) This method adds a Metalink download by uploading a \".metalink\" file. metalink is a base64-encoded string which contains the contents of the \".metalink\" file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns an array of GIDs of newly registered downloads. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.meta4. JSON-RPC Example >>> import urllib2, json, base64 >>> metalink = base64.b64encode(open('file.meta4').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addMetalink', ... 'params':[metalink]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"2089b05ecca3d829\"]}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addMetalink(xmlrpclib.Binary(open('file.meta4', mode='rb').read())) ['2089b05ecca3d829'] \"\"\" return self . call ( self . ADD_METALINK , [ metalink , options , position ])","title":"add_metalink()"},{"location":"reference/client/#aria2p.client.Client.add_torrent","text":"aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) This method adds a BitTorrent download by uploading a \".torrent\" file. If you want to add a BitTorrent Magnet URI, use the aria2.addUri() method instead. torrent must be a base64-encoded string containing the contents of the \".torrent\" file. uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.torrent. JSON-RPC Example >>> import urllib2 , json , base64 >>> torrent = base64 . b64encode ( open ( 'file.torrent' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , 'params' :[ torrent ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addTorrent ( xmlrpclib . Binary ( open ( 'file.torrent' , mode = 'rb' ) . read ())) '2089b05ecca3d829' Source code in aria2p/client.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 def add_torrent ( self , torrent , uris , options = None , position = None ): \"\"\" aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) This method adds a BitTorrent download by uploading a \".torrent\" file. If you want to add a BitTorrent Magnet URI, use the aria2.addUri() method instead. torrent must be a base64-encoded string containing the contents of the \".torrent\" file. uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. If --rpc-save-upload-metadata is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by --dir option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or --rpc-save-upload-metadata is false, the downloads added by this method are not saved by --save-session. The following examples add local file file.torrent. JSON-RPC Example >>> import urllib2, json, base64 >>> torrent = base64.b64encode(open('file.torrent').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', 'params':[torrent]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addTorrent(xmlrpclib.Binary(open('file.torrent', mode='rb').read())) '2089b05ecca3d829' \"\"\" return self . call ( self . ADD_TORRENT , [ torrent , uris , options , position ])","title":"add_torrent()"},{"location":"reference/client/#aria2p.client.Client.add_uri","text":"aria2.addUri([secret], uris[, options[, position]]) This method adds a new download. uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. JSON-RPC Example The following example adds http://example.org/file: >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example The following example adds http://example.org/file: >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . addUri ([ 'http://example.org/file' ]) '2089b05ecca3d829' The following example adds a new download with two sources and some options: >>> s.aria2.addUri(['http://example.org/file', 'http://mirror/file'], dict(dir=\"/tmp\")) 'd2703803b52216d1' The following example adds a download and inserts it to the front of the queue: >>> s.aria2.addUri(['http://example.org/file'], {}, 0) 'ca3d829cee549a4d' Source code in aria2p/client.py 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def add_uri ( self , uris : List [ str ], options : dict = None , position : int = None ): \"\"\" aria2.addUri([secret], uris[, options[, position]]) This method adds a new download. uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options is a struct and its members are pairs of option name and value. See Options below for more details. If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. This method returns the GID of the newly registered download. JSON-RPC Example The following example adds http://example.org/file: >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example The following example adds http://example.org/file: >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.addUri(['http://example.org/file']) '2089b05ecca3d829' The following example adds a new download with two sources and some options: >>> s.aria2.addUri(['http://example.org/file', 'http://mirror/file'], dict(dir=\"/tmp\")) 'd2703803b52216d1' The following example adds a download and inserts it to the front of the queue: >>> s.aria2.addUri(['http://example.org/file'], {}, 0) 'ca3d829cee549a4d' \"\"\" return self . call ( self . ADD_URI , params = [ uris , options , position ])","title":"add_uri()"},{"location":"reference/client/#aria2p.client.Client.batch_call","text":"Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: Name Type Description Default calls List[Tuple[str, List[str], Union[str, int]]] a list of tuples composed of method name, parameters and ID. required insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description List[Union[dict, list, str, int]] The results for each call in the batch. Source code in aria2p/client.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def batch_call ( self , calls : List [ Tuple [ str , List [ str ], Union [ str , int ]]], insert_secret : bool = True ) -> List [ CALL_RETURN_TYPE ]: \"\"\" Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: calls: a list of tuples composed of method name, parameters and ID. insert_secret: whether to insert the secret token in the parameters or not. Returns: The results for each call in the batch. \"\"\" payloads = [] for method , params , msg_id in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) payloads . append ( self . get_payload ( method , params , msg_id , as_json = False )) payload = json . dumps ( payloads ) responses = self . post ( payload ) return [ self . res_or_raise ( resp ) for resp in responses ]","title":"batch_call()"},{"location":"reference/client/#aria2p.client.Client.call","text":"Call a single JSON-RPC method. Parameters: Name Type Description Default method str the method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[str] a list of parameters. None msg_id Union[int, str] the ID of the call, sent back with the server's answer. None insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def call ( self , method : str , params : List [ str ] = None , msg_id : Union [ int , str ] = None , insert_secret : bool = True ) -> CALL_RETURN_TYPE : \"\"\" Call a single JSON-RPC method. Parameters: method: the method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: a list of parameters. msg_id: the ID of the call, sent back with the server's answer. insert_secret: whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" params = self . get_params ( * ( params or [])) if insert_secret and self . secret : if method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) elif method == self . MULTICALL : for param in params [ 0 ]: param [ \"params\" ] . insert ( 0 , f \"token: { self . secret } \" ) return self . res_or_raise ( self . post ( self . get_payload ( method , params , msg_id = msg_id )))","title":"call()"},{"location":"reference/client/#aria2p.client.Client.change_global_option","text":"aria2.changeGlobalOption([secret], options) This method changes global options dynamically. options is a struct. The following options are available: \u00b7 bt-max-open-files \u00b7 download-result \u00b7 keep-unfinished-download-result \u00b7 log \u00b7 log-level \u00b7 max-concurrent-downloads \u00b7 max-download-result \u00b7 max-overall-download-limit \u00b7 max-overall-upload-limit \u00b7 optimize-concurrent-downloads \u00b7 save-cookies \u00b7 save-session \u00b7 server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum, index-out, out, pause and select-file. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string(\"\") as the parameter value. Note that log file is always opened in append mode. This method returns OK for success. Source code in aria2p/client.py 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 def change_global_option ( self , options ): \"\"\" aria2.changeGlobalOption([secret], options) This method changes global options dynamically. options is a struct. The following options are available: \u00b7 bt-max-open-files \u00b7 download-result \u00b7 keep-unfinished-download-result \u00b7 log \u00b7 log-level \u00b7 max-concurrent-downloads \u00b7 max-download-result \u00b7 max-overall-download-limit \u00b7 max-overall-upload-limit \u00b7 optimize-concurrent-downloads \u00b7 save-cookies \u00b7 save-session \u00b7 server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum, index-out, out, pause and select-file. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string(\"\") as the parameter value. Note that log file is always opened in append mode. This method returns OK for success. \"\"\" return self . call ( self . CHANGE_GLOBAL_OPTION , [ options ])","title":"change_global_option()"},{"location":"reference/client/#aria2p.client.Client.change_option","text":"aria2.changeOption([secret], gid, options) This method changes options of the download denoted by gid (string) dynamically. options is a struct. The options listed in Input File subsection are available, except for following options: \u00b7 dry-run \u00b7 metalink-base-uri \u00b7 parameterized-uri \u00b7 pause \u00b7 piece-length \u00b7 rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): \u00b7 bt-max-peers \u00b7 bt-request-peer-speed-limit \u00b7 bt-remove-unselected-file \u00b7 force-save \u00b7 max-download-limit \u00b7 max-upload-limit This method returns OK for success. The following examples set the max-download-limit option to 20K for the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeOption' , ... 'params' :[ '2089b05ecca3d829' , ... { 'max-download-limit' : '10K' }]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changeOption ( '2089b05ecca3d829' , { 'max-download-limit' : '20K' }) 'OK' Source code in aria2p/client.py 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 def change_option ( self , gid , options ): \"\"\" aria2.changeOption([secret], gid, options) This method changes options of the download denoted by gid (string) dynamically. options is a struct. The options listed in Input File subsection are available, except for following options: \u00b7 dry-run \u00b7 metalink-base-uri \u00b7 parameterized-uri \u00b7 pause \u00b7 piece-length \u00b7 rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): \u00b7 bt-max-peers \u00b7 bt-request-peer-speed-limit \u00b7 bt-remove-unselected-file \u00b7 force-save \u00b7 max-download-limit \u00b7 max-upload-limit This method returns OK for success. The following examples set the max-download-limit option to 20K for the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeOption', ... 'params':['2089b05ecca3d829', ... {'max-download-limit':'10K'}]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changeOption('2089b05ecca3d829', {'max-download-limit':'20K'}) 'OK' \"\"\" return self . call ( self . CHANGE_OPTION , [ gid , options ])","title":"change_option()"},{"location":"reference/client/#aria2p.client.Client.change_position","text":"aria2.changePosition([secret], gid, pos, how) This method changes the position of the download denoted by gid in the queue. pos is an integer. how is a string. If how is POS_SET, it moves the download to a position relative to the beginning of the queue. If how is POS_CUR, it moves the download to a position relative to the current position. If how is POS_END, it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. The response is an integer denoting the resulting position. For example, if GID#2089b05ecca3d829 is currently in position 3, aria2.changePosition('2089b05ecca3d829', -1, 'POS_CUR') will change its position to 2. Additionally aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). The following examples move the download GID#2089b05ecca3d829 to the front of the queue. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changePosition' , ... 'params' :[ '2089b05ecca3d829' , 0 , 'POS_SET' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : 0 } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changePosition ( '2089b05ecca3d829' , 0 , 'POS_SET' ) 0 Source code in aria2p/client.py 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def change_position ( self , gid , pos , how ): \"\"\" aria2.changePosition([secret], gid, pos, how) This method changes the position of the download denoted by gid in the queue. pos is an integer. how is a string. If how is POS_SET, it moves the download to a position relative to the beginning of the queue. If how is POS_CUR, it moves the download to a position relative to the current position. If how is POS_END, it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. The response is an integer denoting the resulting position. For example, if GID#2089b05ecca3d829 is currently in position 3, aria2.changePosition('2089b05ecca3d829', -1, 'POS_CUR') will change its position to 2. Additionally aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). The following examples move the download GID#2089b05ecca3d829 to the front of the queue. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changePosition', ... 'params':['2089b05ecca3d829', 0, 'POS_SET']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changePosition('2089b05ecca3d829', 0, 'POS_SET') 0 \"\"\" return self . call ( self . CHANGE_POSITION , [ gid , pos , how ])","title":"change_position()"},{"location":"reference/client/#aria2p.client.Client.change_uri","text":"aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) This method removes the URIs in delUris from and appends the URIs in addUris to download denoted by gid. delUris and addUris are lists of strings. A download can contain multiple files and URIs are attached to each file. fileIndex is used to select which file to remove/attach given URIs. fileIndex is 1-based. position is used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in delUris. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in delUris. This method returns a list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeUri' , ... 'params' :[ '2089b05ecca3d829' , 1 , [], [ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ 0 , 1 ]} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . changeUri ( '2089b05ecca3d829' , 1 , [], [ 'http://example.org/file' ]) [ 0 , 1 ] Source code in aria2p/client.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 def change_uri ( self , gid , file_index , del_uris , add_uris , position = None ): \"\"\" aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) This method removes the URIs in delUris from and appends the URIs in addUris to download denoted by gid. delUris and addUris are lists of strings. A download can contain multiple files and URIs are attached to each file. fileIndex is used to select which file to remove/attach given URIs. fileIndex is 1-based. position is used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in delUris. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in delUris. This method returns a list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeUri', ... 'params':['2089b05ecca3d829', 1, [], ['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.changeUri('2089b05ecca3d829', 1, [], ['http://example.org/file']) [0, 1] \"\"\" return self . call ( self . CHANGE_URI , [ gid , file_index , del_uris , add_uris , position ])","title":"change_uri()"},{"location":"reference/client/#aria2p.client.Client.force_pause","text":"aria2.forcePause([secret], gid) This method pauses the download denoted by gid. This method behaves just like aria2.pause() except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Source code in aria2p/client.py 584 585 586 587 588 589 590 591 592 def force_pause ( self , gid ): \"\"\" aria2.forcePause([secret], gid) This method pauses the download denoted by gid. This method behaves just like aria2.pause() except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. \"\"\" return self . call ( self . FORCE_PAUSE , [ gid ])","title":"force_pause()"},{"location":"reference/client/#aria2p.client.Client.force_pause_all","text":"aria2.forcePauseAll([secret]) This method is equal to calling aria2.forcePause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 594 595 596 597 598 599 600 def force_pause_all ( self ): \"\"\" aria2.forcePauseAll([secret]) This method is equal to calling aria2.forcePause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . FORCE_PAUSE_ALL )","title":"force_pause_all()"},{"location":"reference/client/#aria2p.client.Client.force_remove","text":"aria2.forceRemove([secret], gid) This method removes the download denoted by gid. This method behaves just like aria2.remove() except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Source code in aria2p/client.py 555 556 557 558 559 560 561 562 563 def force_remove ( self , gid ): \"\"\" aria2.forceRemove([secret], gid) This method removes the download denoted by gid. This method behaves just like aria2.remove() except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. \"\"\" return self . call ( self . FORCE_REMOVE , [ gid ])","title":"force_remove()"},{"location":"reference/client/#aria2p.client.Client.force_shutdown","text":"aria2.forceShutdown([secret]) This method shuts down aria2(). This method behaves like :func:'aria2.shutdown` without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. This method returns OK. Source code in aria2p/client.py 1513 1514 1515 1516 1517 1518 1519 1520 1521 def force_shutdown ( self ): \"\"\" aria2.forceShutdown([secret]) This method shuts down aria2(). This method behaves like :func:'aria2.shutdown` without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. This method returns OK. \"\"\" return self . call ( self . FORCE_SHUTDOWN )","title":"force_shutdown()"},{"location":"reference/client/#aria2p.client.Client.get_files","text":"aria2.getFiles([secret], gid) This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path File path. length File size in bytes. completedLength Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. selected true if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getFiles' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getFiles ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'index' : '1' , 'length' : '34896138' , 'completedLength' : '34896138' , 'path' : '/downloads/file' , 'selected' : 'true' , 'uris' : [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }]}] Source code in aria2p/client.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 def get_files ( self , gid ): \"\"\" aria2.getFiles([secret], gid) This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path File path. length File size in bytes. completedLength Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. selected true if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getFiles', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getFiles('2089b05ecca3d829') >>> pprint(r) [{'index': '1', 'length': '34896138', 'completedLength': '34896138', 'path': '/downloads/file', 'selected': 'true', 'uris': [{'status': 'used', 'uri': 'http://example.org/file'}]}] \"\"\" return self . call ( self . GET_FILES , [ gid ])","title":"get_files()"},{"location":"reference/client/#aria2p.client.Client.get_global_option","text":"aria2.getGlobalOption([secret]) This method returns the global options. The response is a struct. Its keys are the names of options. Values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the aria2.getOption() method. Source code in aria2p/client.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 def get_global_option ( self ): \"\"\" aria2.getGlobalOption([secret]) This method returns the global options. The response is a struct. Its keys are the names of options. Values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the aria2.getOption() method. \"\"\" return self . call ( self . GET_GLOBAL_OPTION )","title":"get_global_option()"},{"location":"reference/client/#aria2p.client.Client.get_global_stat","text":"aria2.getGlobalStat([secret]) This method returns global statistics such as the overall download and upload speeds. The response is a struct and contains the following keys. Values are strings. downloadSpeed Overall download speed (byte/sec). uploadSpeed Overall upload speed(byte/sec). numActive The number of active downloads. numWaiting The number of waiting downloads. numStopped The number of stopped downloads in the current session. This value is capped by the --max-download-result option. numStoppedTotal The number of stopped downloads in the current session and not capped by the --max-download-result option. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getGlobalStat' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'downloadSpeed' : u '21846' , u 'numActive' : u '2' , u 'numStopped' : u '0' , u 'numWaiting' : u '0' , u 'uploadSpeed' : u '0' }} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getGlobalStat () >>> pprint ( r ) { 'downloadSpeed' : '23136' , 'numActive' : '2' , 'numStopped' : '0' , 'numWaiting' : '0' , 'uploadSpeed' : '0' } Source code in aria2p/client.py 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 def get_global_stat ( self ): \"\"\" aria2.getGlobalStat([secret]) This method returns global statistics such as the overall download and upload speeds. The response is a struct and contains the following keys. Values are strings. downloadSpeed Overall download speed (byte/sec). uploadSpeed Overall upload speed(byte/sec). numActive The number of active downloads. numWaiting The number of waiting downloads. numStopped The number of stopped downloads in the current session. This value is capped by the --max-download-result option. numStoppedTotal The number of stopped downloads in the current session and not capped by the --max-download-result option. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getGlobalStat'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'downloadSpeed': u'21846', u'numActive': u'2', u'numStopped': u'0', u'numWaiting': u'0', u'uploadSpeed': u'0'}} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getGlobalStat() >>> pprint(r) {'downloadSpeed': '23136', 'numActive': '2', 'numStopped': '0', 'numWaiting': '0', 'uploadSpeed': '0'} \"\"\" return self . call ( self . GET_GLOBAL_STAT )","title":"get_global_stat()"},{"location":"reference/client/#aria2p.client.Client.get_option","text":"aria2.getOption([secret], gid) This method returns options of the download denoted by gid. The response is a struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. The following examples get options of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getOption' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'allow-overwrite' : u 'false' , u 'allow-piece-length-change' : u 'false' , u 'always-resume' : u 'true' , u 'async-dns' : u 'true' , ... XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getOption ( '2089b05ecca3d829' ) >>> pprint ( r ) { 'allow-overwrite' : 'false' , 'allow-piece-length-change' : 'false' , 'always-resume' : 'true' , 'async-dns' : 'true' , .... Source code in aria2p/client.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 def get_option ( self , gid ): \"\"\" aria2.getOption([secret], gid) This method returns options of the download denoted by gid. The response is a struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. The following examples get options of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getOption', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'allow-overwrite': u'false', u'allow-piece-length-change': u'false', u'always-resume': u'true', u'async-dns': u'true', ... XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getOption('2089b05ecca3d829') >>> pprint(r) {'allow-overwrite': 'false', 'allow-piece-length-change': 'false', 'always-resume': 'true', 'async-dns': 'true', .... \"\"\" return self . call ( self . GET_OPTION , [ gid ])","title":"get_option()"},{"location":"reference/client/#aria2p.client.Client.get_params","text":"Build the list of parameters. This method simply removes the None values from the given arguments. Parameters: Name Type Description Default args Any list of parameters. () Returns: Type Description list A new list, with None values filtered out. Source code in aria2p/client.py 386 387 388 389 390 391 392 393 394 395 396 397 398 399 @staticmethod def get_params ( * args : Any ) -> list : \"\"\" Build the list of parameters. This method simply removes the ``None`` values from the given arguments. Parameters: args: list of parameters. Returns: A new list, with ``None`` values filtered out. \"\"\" return [ p for p in args if p is not None ]","title":"get_params()"},{"location":"reference/client/#aria2p.client.Client.get_payload","text":"Build a payload. Parameters: Name Type Description Default method the method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] the list of parameters. None msg_id Union[int, str] the ID of the call, sent back with the server's answer. None as_json bool whether to return the payload as a JSON-string or Python dictionary. True Returns: Type Description Union[str, dict] The payload as a JSON string or as Python dictionary. Source code in aria2p/client.py 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @staticmethod def get_payload ( method , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , as_json : bool = True ) -> Union [ str , dict ]: \"\"\" Build a payload. Parameters: method: the method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: the list of parameters. msg_id: the ID of the call, sent back with the server's answer. as_json: whether to return the payload as a JSON-string or Python dictionary. Returns: The payload as a JSON string or as Python dictionary. \"\"\" payload = { \"jsonrpc\" : \"2.0\" , \"method\" : method } if msg_id is not None : payload [ \"id\" ] = msg_id else : payload [ \"id\" ] = DEFAULT_ID if params : payload [ \"params\" ] = params return json . dumps ( payload ) if as_json else payload","title":"get_payload()"},{"location":"reference/client/#aria2p.client.Client.get_peers","text":"aria2.getPeers([secret], gid) This method returns a list peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId Percent-encoded peer ID. ip IP address of the peer. port Port number of the peer. bitfield Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking true if aria2 is choking the peer. Otherwise false. peerChoking true if the peer is choking aria2. Otherwise false. downloadSpeed Download speed (byte/sec) that this client obtains from the peer. uploadSpeed Upload speed(byte/sec) that this client uploads to the peer. seeder true if this peer is a seeder. Otherwise false. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getPeers' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'amChoking' : u 'true' , u 'bitfield' : u 'ffffffffffffffffffffffffffffffffffffffff' , u 'downloadSpeed' : u '10602' , u 'ip' : u '10.0.0.9' , u 'peerChoking' : u 'false' , u 'peerId' : u 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , u 'port' : u '6881' , u 'seeder' : u 'true' , u 'uploadSpeed' : u '0' }, { u 'amChoking' : u 'false' , u 'bitfield' : u 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , u 'downloadSpeed' : u '8654' , u 'ip' : u '10.0.0.30' , u 'peerChoking' : u 'false' , u 'peerId' : u 'bittorrent client758' , u 'port' : u '37842' , u 'seeder' : u 'false' , u 'uploadSpeed' : u '6890' }]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getPeers ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'amChoking' : 'true' , 'bitfield' : 'ffffffffffffffffffffffffffffffffffffffff' , 'downloadSpeed' : '10602' , 'ip' : '10.0.0.9' , 'peerChoking' : 'false' , 'peerId' : 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , 'port' : '6881' , 'seeder' : 'true' , 'uploadSpeed' : '0' }, { 'amChoking' : 'false' , 'bitfield' : 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , 'downloadSpeed' : '8654' , 'ip' : '10.0.0.30' , 'peerChoking' : 'false' , 'peerId' : 'bittorrent client758' , 'port' : '37842' , 'seeder' : 'false, 'uploadSpeed' : '6890' }] Source code in aria2p/client.py 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 def get_peers ( self , gid ): \"\"\" aria2.getPeers([secret], gid) This method returns a list peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId Percent-encoded peer ID. ip IP address of the peer. port Port number of the peer. bitfield Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking true if aria2 is choking the peer. Otherwise false. peerChoking true if the peer is choking aria2. Otherwise false. downloadSpeed Download speed (byte/sec) that this client obtains from the peer. uploadSpeed Upload speed(byte/sec) that this client uploads to the peer. seeder true if this peer is a seeder. Otherwise false. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getPeers', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'amChoking': u'true', u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff', u'downloadSpeed': u'10602', u'ip': u'10.0.0.9', u'peerChoking': u'false', u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', u'port': u'6881', u'seeder': u'true', u'uploadSpeed': u'0'}, {u'amChoking': u'false', u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', u'downloadSpeed': u'8654', u'ip': u'10.0.0.30', u'peerChoking': u'false', u'peerId': u'bittorrent client758', u'port': u'37842', u'seeder': u'false', u'uploadSpeed': u'6890'}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getPeers('2089b05ecca3d829') >>> pprint(r) [{'amChoking': 'true', 'bitfield': 'ffffffffffffffffffffffffffffffffffffffff', 'downloadSpeed': '10602', 'ip': '10.0.0.9', 'peerChoking': 'false', 'peerId': 'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', 'port': '6881', 'seeder': 'true', 'uploadSpeed': '0'}, {'amChoking': 'false', 'bitfield': 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', 'downloadSpeed': '8654', 'ip': '10.0.0.30', 'peerChoking': 'false', 'peerId': 'bittorrent client758', 'port': '37842', 'seeder': 'false, 'uploadSpeed': '6890'}] \"\"\" return self . call ( self . GET_PEERS , [ gid ])","title":"get_peers()"},{"location":"reference/client/#aria2p.client.Client.get_servers","text":"aria2.getServers([secret], gid) This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers A list of structs which contain the following keys. uri Original URI . currentUri This is the URI currently used for downloading . If redirection is involved , currentUri and uri may differ . downloadSpeed Download speed ( byte / sec ) JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getServers' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'servers' : [{ u 'currentUri' : u 'http://example.org/file' , u 'downloadSpeed' : u '10467' , u 'uri' : u 'http://example.org/file' }]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getServers ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'index' : '1' , 'servers' : [{ 'currentUri' : 'http://example.org/dl/file' , 'downloadSpeed' : '20285' , 'uri' : 'http://example.org/file' }]}] Source code in aria2p/client.py 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 def get_servers ( self , gid ): \"\"\" aria2.getServers([secret], gid) This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers A list of structs which contain the following keys. uri Original URI. currentUri This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. downloadSpeed Download speed (byte/sec) JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getServers', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'servers': [{u'currentUri': u'http://example.org/file', u'downloadSpeed': u'10467', u'uri': u'http://example.org/file'}]}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getServers('2089b05ecca3d829') >>> pprint(r) [{'index': '1', 'servers': [{'currentUri': 'http://example.org/dl/file', 'downloadSpeed': '20285', 'uri': 'http://example.org/file'}]}] \"\"\" return self . call ( self . GET_SERVERS , [ gid ])","title":"get_servers()"},{"location":"reference/client/#aria2p.client.Client.get_session_info","text":"aria2.getSessionInfo([secret]) This method returns session information. The response is a struct and contains following key. sessionId Session ID, which is generated each time when aria2 is invoked. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getSessionInfo' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'sessionId' : u 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' }} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . getSessionInfo () { 'sessionId' : 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' } Source code in aria2p/client.py 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 def get_session_info ( self ): \"\"\" aria2.getSessionInfo([secret]) This method returns session information. The response is a struct and contains following key. sessionId Session ID, which is generated each time when aria2 is invoked. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getSessionInfo'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.getSessionInfo() {'sessionId': 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'} \"\"\" return self . call ( self . GET_SESSION_INFO )","title":"get_session_info()"},{"location":"reference/client/#aria2p.client.Client.get_uris","text":"aria2.getUris([secret], gid) This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri URI status 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getUris' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getUris ( '2089b05ecca3d829' ) >>> pprint ( r ) [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }] Source code in aria2p/client.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 def get_uris ( self , gid ): \"\"\" aria2.getUris([secret], gid) This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri URI status 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getUris', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'status': u'used', u'uri': u'http://example.org/file'}]} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getUris('2089b05ecca3d829') >>> pprint(r) [{'status': 'used', 'uri': 'http://example.org/file'}] \"\"\" return self . call ( self . GET_URIS , [ gid ])","title":"get_uris()"},{"location":"reference/client/#aria2p.client.Client.get_version","text":"aria2.getVersion([secret]) This method returns the version of aria2 and the list of enabled features. The response is a struct and contains following keys. version Version number of aria2 as a string. enabledFeatures List of enabled features. Each feature is given as a string. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getVersion' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'enabledFeatures' : [ u 'Async DNS' , u 'BitTorrent' , u 'Firefox3 Cookie' , u 'GZip' , u 'HTTPS' , u 'Message Digest' , u 'Metalink' , u 'XML-RPC' ], u 'version' : u '1.11.0' }} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . getVersion () >>> pprint ( r ) { 'enabledFeatures' : [ 'Async DNS' , 'BitTorrent' , 'Firefox3 Cookie' , 'GZip' , 'HTTPS' , 'Message Digest' , 'Metalink' , 'XML-RPC' ], 'version' : '1.11.0' } Source code in aria2p/client.py 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 def get_version ( self ): \"\"\" aria2.getVersion([secret]) This method returns the version of aria2 and the list of enabled features. The response is a struct and contains following keys. version Version number of aria2 as a string. enabledFeatures List of enabled features. Each feature is given as a string. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getVersion'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'enabledFeatures': [u'Async DNS', u'BitTorrent', u'Firefox3 Cookie', u'GZip', u'HTTPS', u'Message Digest', u'Metalink', u'XML-RPC'], u'version': u'1.11.0'}} XML-RPC Example >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.getVersion() >>> pprint(r) {'enabledFeatures': ['Async DNS', 'BitTorrent', 'Firefox3 Cookie', 'GZip', 'HTTPS', 'Message Digest', 'Metalink', 'XML-RPC'], 'version': '1.11.0'} \"\"\" return self . call ( self . GET_VERSION )","title":"get_version()"},{"location":"reference/client/#aria2p.client.Client.list_methods","text":"system.listMethods() This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listMethods' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.addUri' , u 'aria2.addTorrent' , ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . system . listMethods () [ 'aria2.addUri' , 'aria2.addTorrent' , ... Source code in aria2p/client.py 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 def list_methods ( self ): \"\"\" system.listMethods() This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listMethods'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.addUri', u'aria2.addTorrent', ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.system.listMethods() ['aria2.addUri', 'aria2.addTorrent', ... \"\"\" return self . call ( self . LIST_METHODS )","title":"list_methods()"},{"location":"reference/client/#aria2p.client.Client.list_notifications","text":"system.listNotifications() This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listNotifications' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.onDownloadStart' , u 'aria2.onDownloadPause' , ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . system . listNotifications () [ 'aria2.onDownloadStart' , 'aria2.onDownloadPause' , ... Source code in aria2p/client.py 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 def list_notifications ( self ): \"\"\" system.listNotifications() This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listNotifications'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.onDownloadStart', u'aria2.onDownloadPause', ... XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.system.listNotifications() ['aria2.onDownloadStart', 'aria2.onDownloadPause', ... \"\"\" return self . call ( self . LIST_NOTIFICATIONS )","title":"list_notifications()"},{"location":"reference/client/#aria2p.client.Client.listen_to_notifications","text":"Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [ stop_listening ][aria2p.client.Client.stop_listening] method. Parameters: Name Type Description Default on_download_start Callable Callback for the aria2.onDownloadStart event. None on_download_pause Callable Callback for the aria2.onDownloadPause event. None on_download_stop Callable Callback for the aria2.onDownloadStop event. None on_download_complete Callable Callback for the aria2.onDownloadComplete event. None on_download_error Callable Callback for the aria2.onDownloadError event. None on_bt_download_complete Callable Callback for the aria2.onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/client.py 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 def listen_to_notifications ( self , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method. Parameters: on_download_start: Callback for the ``aria2.onDownloadStart`` event. on_download_pause: Callback for the ``aria2.onDownloadPause`` event. on_download_stop: Callback for the ``aria2.onDownloadStop`` event. on_download_complete: Callback for the ``aria2.onDownloadComplete`` event. on_download_error: Callback for the ``aria2.onDownloadError`` event. on_bt_download_complete: Callback for the ``aria2.onBtDownloadComplete`` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" self . listening = True ws_server = self . ws_server logger . debug ( f \"Notifications ( { ws_server } ): opening WebSocket with timeout= { timeout } \" ) try : socket = websocket . create_connection ( ws_server , timeout = timeout ) except ConnectionRefusedError : logger . error ( f \"Notifications ( { ws_server } ): connection refused. Is the server running?\" ) return callbacks = { NOTIFICATION_START : on_download_start , NOTIFICATION_PAUSE : on_download_pause , NOTIFICATION_STOP : on_download_stop , NOTIFICATION_COMPLETE : on_download_complete , NOTIFICATION_ERROR : on_download_error , NOTIFICATION_BT_COMPLETE : on_bt_download_complete , } stopped = SignalHandler ([ \"SIGTERM\" , \"SIGINT\" ]) if handle_signals else False while not stopped : try : logger . debug ( f \"Notifications ( { ws_server } ): waiting for data over WebSocket\" ) message = socket . recv () except websocket . WebSocketConnectionClosedException : logger . error ( f \"Notifications ( { ws_server } ): connection to server was closed. Is the server running?\" ) break except websocket . WebSocketTimeoutException : logger . debug ( f \"Notifications ( { ws_server } ): reached timeout ( { timeout } s)\" ) else : notification = Notification . get_or_raise ( json . loads ( message )) logger . info ( f \"Notifications ( { ws_server } ): received { notification . type } with gid= { notification . gid } \" ) callback = callbacks . get ( notification . type ) if callable ( callback ): logger . debug ( f \"Notifications ( { ws_server } ): calling { callback } with gid= { notification . gid } \" ) callback ( notification . gid ) else : logger . debug ( f \"Notifications ( { ws_server } ): no callback given for type \" + notification . type ) if not self . listening : logger . debug ( f \"Notifications ( { ws_server } ): stopped listening\" ) break if stopped : logger . debug ( \"Notifications: stopped listening after receiving a signal\" ) self . listening = False logger . debug ( f \"Notifications ( { ws_server } ): closing WebSocket\" ) socket . close ()","title":"listen_to_notifications()"},{"location":"reference/client/#aria2p.client.Client.multicall","text":"system.multicall(methods) This methods encapsulates multiple method calls in a single request. methods is an array of structs. The structs contain two keys: methodName and params. methodName is the method name to call and params is array containing parameters to the method call. This method returns an array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. JSON-RPC Example >>> import urllib2 , json , base64 >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.multicall' , ... 'params' :[[{ 'methodName' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'methodName' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [[ u '2089b05ecca3d829' ], [ u 'd2703803b52216d1' ]]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'2089b05ecca3d829'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> mc = xmlrpclib . MultiCall ( s ) >>> mc . aria2 . addUri ([ 'http://example.org/file' ]) >>> mc . aria2 . addTorrent ( xmlrpclib . Binary ( open ( 'file.torrent' , mode = 'rb' ) . read ())) >>> r = mc () >>> tuple ( r ) ( '2089b05ecca3d829' , 'd2703803b52216d1' ) Source code in aria2p/client.py 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 def multicall ( self , methods ): \"\"\" system.multicall(methods) This methods encapsulates multiple method calls in a single request. methods is an array of structs. The structs contain two keys: methodName and params. methodName is the method name to call and params is array containing parameters to the method call. This method returns an array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. JSON-RPC Example >>> import urllib2, json, base64 >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.multicall', ... 'params':[[{'methodName':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'methodName':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'2089b05ecca3d829'], [u'd2703803b52216d1']]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'2089b05ecca3d829'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> mc = xmlrpclib.MultiCall(s) >>> mc.aria2.addUri(['http://example.org/file']) >>> mc.aria2.addTorrent(xmlrpclib.Binary(open('file.torrent', mode='rb').read())) >>> r = mc() >>> tuple(r) ('2089b05ecca3d829', 'd2703803b52216d1') \"\"\" return self . call ( self . MULTICALL , [ methods ])","title":"multicall()"},{"location":"reference/client/#aria2p.client.Client.multicall2","text":"An method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"2089b05ecca3d829\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"2089b05ecca3d829\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: Name Type Description Default calls List[Tuple[str, List[str]]] list of tuples composed of method name and parameters. required insert_secret bool whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def multicall2 ( self , calls : List [ Tuple [ str , List [ str ]]], insert_secret : bool = True ) -> CALL_RETURN_TYPE : \"\"\" An method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"2089b05ecca3d829\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"2089b05ecca3d829\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note: multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: calls: list of tuples composed of method name and parameters. insert_secret: whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" multicall_params = [] for method , params in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) multicall_params . append ({ \"methodName\" : method , \"params\" : params }) payload = self . get_payload ( self . MULTICALL , [ multicall_params ]) return self . res_or_raise ( self . post ( payload ))","title":"multicall2()"},{"location":"reference/client/#aria2p.client.Client.pause","text":"aria2.pause([secret], gid) This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the aria2.unpause() method. This method returns GID of paused download. Source code in aria2p/client.py 565 566 567 568 569 570 571 572 573 574 def pause ( self , gid ): \"\"\" aria2.pause([secret], gid) This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the aria2.unpause() method. This method returns GID of paused download. \"\"\" return self . call ( self . PAUSE , [ gid ])","title":"pause()"},{"location":"reference/client/#aria2p.client.Client.pause_all","text":"aria2.pauseAll([secret]) This method is equal to calling aria2.pause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 576 577 578 579 580 581 582 def pause_all ( self ): \"\"\" aria2.pauseAll([secret]) This method is equal to calling aria2.pause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . PAUSE_ALL )","title":"pause_all()"},{"location":"reference/client/#aria2p.client.Client.post","text":"Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: Name Type Description Default payload dict the payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). required Returns: Type Description dict The answer from the server, as a Python dictionary. Source code in aria2p/client.py 311 312 313 314 315 316 317 318 319 320 321 322 323 324 def post ( self , payload : dict ) -> dict : \"\"\" Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: payload: the payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). Returns: The answer from the server, as a Python dictionary. \"\"\" return requests . post ( self . server , data = payload ) . json ()","title":"post()"},{"location":"reference/client/#aria2p.client.Client.purge_download_result","text":"aria2.purgeDownloadResult([secret]) This method purges completed/error/removed downloads to free memory. This method returns OK. Source code in aria2p/client.py 1386 1387 1388 1389 1390 1391 1392 def purge_download_result ( self ): \"\"\" aria2.purgeDownloadResult([secret]) This method purges completed/error/removed downloads to free memory. This method returns OK. \"\"\" return self . call ( self . PURGE_DOWNLOAD_RESULT )","title":"purge_download_result()"},{"location":"reference/client/#aria2p.client.Client.remove","text":"aria2.remove([secret], gid) This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. The following examples remove a download with GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.remove' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . remove ( '2089b05ecca3d829' ) '2089b05ecca3d829' Source code in aria2p/client.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 def remove ( self , gid ): \"\"\" aria2.remove([secret], gid) This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. The following examples remove a download with GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.remove', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"2089b05ecca3d829\"}' XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.remove('2089b05ecca3d829') '2089b05ecca3d829' \"\"\" return self . call ( self . REMOVE , [ gid ])","title":"remove()"},{"location":"reference/client/#aria2p.client.Client.remove_download_result","text":"aria2.removeDownloadResult([secret], gid) This method removes a completed/error/removed download denoted by gid from memory. This method returns OK for success. The following examples remove the download result of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.removeDownloadResult' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> s . aria2 . removeDownloadResult ( '2089b05ecca3d829' ) 'OK' Source code in aria2p/client.py 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 def remove_download_result ( self , gid ): \"\"\" aria2.removeDownloadResult([secret], gid) This method removes a completed/error/removed download denoted by gid from memory. This method returns OK for success. The following examples remove the download result of the download GID#2089b05ecca3d829. JSON-RPC Example >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.removeDownloadResult', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} XML-RPC Example >>> import xmlrpclib >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> s.aria2.removeDownloadResult('2089b05ecca3d829') 'OK' \"\"\" return self . call ( self . REMOVE_DOWNLOAD_RESULT , [ gid ])","title":"remove_download_result()"},{"location":"reference/client/#aria2p.client.Client.res_or_raise","text":"Return the result of the response, or raise an error with code and message. Parameters: Name Type Description Default response dict a response sent by the server. required Returns: Type Description Union[dict, list, str, int] The \"result\" value of the response. Exceptions: Type Description ClientException when the response contains an error (client/server error). See the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 @staticmethod def res_or_raise ( response : dict ) -> CALL_RETURN_TYPE : \"\"\" Return the result of the response, or raise an error with code and message. Parameters: response: a response sent by the server. Returns: The \"result\" value of the response. Raises: ClientException: when the response contains an error (client/server error). See the [`ClientException`][aria2p.client.ClientException] class. \"\"\" if \"error\" in response : raise Client . response_as_exception ( response ) return response [ \"result\" ]","title":"res_or_raise()"},{"location":"reference/client/#aria2p.client.Client.response_as_exception","text":"Transform the response as a [ ClientException ][aria2p.client.ClientException] instance and return it. Parameters: Name Type Description Default response dict a response sent by the server. required Returns: Type Description ClientException An instance of the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py 326 327 328 329 330 331 332 333 334 335 336 337 @staticmethod def response_as_exception ( response : dict ) -> ClientException : \"\"\" Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it. Parameters: response: a response sent by the server. Returns: An instance of the [`ClientException`][aria2p.client.ClientException] class. \"\"\" return ClientException ( response [ \"error\" ][ \"code\" ], response [ \"error\" ][ \"message\" ])","title":"response_as_exception()"},{"location":"reference/client/#aria2p.client.Client.save_session","text":"aria2.saveSession([secret]) This method saves the current session to a file specified by the --save-session option. This method returns OK if it succeeds. Source code in aria2p/client.py 1523 1524 1525 1526 1527 1528 1529 1530 def save_session ( self ): \"\"\" aria2.saveSession([secret]) This method saves the current session to a file specified by the --save-session option. This method returns OK if it succeeds. \"\"\" return self . call ( self . SAVE_SESSION )","title":"save_session()"},{"location":"reference/client/#aria2p.client.Client.shutdown","text":"aria2.shutdown([secret]) This method shuts down aria2. This method returns OK. Source code in aria2p/client.py 1505 1506 1507 1508 1509 1510 1511 def shutdown ( self ): \"\"\" aria2.shutdown([secret]) This method shuts down aria2. This method returns OK. \"\"\" return self . call ( self . SHUTDOWN )","title":"shutdown()"},{"location":"reference/client/#aria2p.client.Client.stop_listening","text":"Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications]. Source code in aria2p/client.py 1731 1732 1733 1734 1735 1736 1737 1738 def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]. \"\"\" self . listening = False","title":"stop_listening()"},{"location":"reference/client/#aria2p.client.Client.tell_active","text":"aria2.tellActive([secret][, keys]) This method returns a list of active downloads. The response is an array of the same structs as returned by the aria2.tellStatus() method. For the keys parameter, please refer to the aria2.tellStatus() method. Source code in aria2p/client.py 1054 1055 1056 1057 1058 1059 1060 1061 def tell_active ( self , keys = None ): \"\"\" aria2.tellActive([secret][, keys]) This method returns a list of active downloads. The response is an array of the same structs as returned by the aria2.tellStatus() method. For the keys parameter, please refer to the aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_ACTIVE , [ keys ])","title":"tell_active()"},{"location":"reference/client/#aria2p.client.Client.tell_status","text":"aria2.tellStatus([secret], gid[, keys]) This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, aria2.tellStatus(\"2089b05ecca3d829\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid GID of the download. status active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength Total length of the download in bytes. completedLength Completed length of the download in bytes. uploadLength Uploaded length of the download in bytes. bitfield Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed Download speed of this download measured in bytes/sec. uploadSpeed Upload speed of this download measured in bytes/sec. infoHash InfoHash. BitTorrent only. numSeeders The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength Piece length in bytes. numPieces The number of pieces. connections The number of peers/servers aria2 has connected to. errorCode The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage The (hopefully) human readable error message associated to errorCode. followedBy List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir Directory to save files. files Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. bittorrent Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains following keys. announceList List of lists of announce URIs . If the torrent contains announce and no announce - list , announce is converted to the announce - list format . comment The comment of the torrent . comment . utf - 8 is used if available . creationDate The creation time of the torrent . The value is an integer since the epoch , measured in seconds . mode File mode of the torrent . The value is either single or multi . info Struct which contains data from Info dictionary . It contains following keys . name name in info dictionary . name . utf - 8 is used if available . verifiedLength The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. JSON-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '2089b05ecca3d829' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'bitfield' : u '0000000000' , u 'completedLength' : u '901120' , u 'connections' : u '1' , u 'dir' : u '/downloads' , u 'downloadSpeed' : u '15158' , u 'files' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}], u 'gid' : u '2089b05ecca3d829' , u 'numPieces' : u '34' , u 'pieceLength' : u '1048576' , u 'status' : u 'active' , u 'totalLength' : u '34896138' , u 'uploadLength' : u '0' , u 'uploadSpeed' : u '0' }} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'2089b05ecca3d829', u'totalLength': u'34896138'}} XML-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib . ServerProxy ( 'http://localhost:6800/rpc' ) >>> r = s . aria2 . tellStatus ( '2089b05ecca3d829' ) >>> pprint ( r ) { 'bitfield' : 'ffff80' , 'completedLength' : '34896138' , 'connections' : '0' , 'dir' : '/downloads' , 'downloadSpeed' : '0' , 'errorCode' : '0' , 'files' : [{ 'index' : '1' , 'length' : '34896138' , 'completedLength' : '34896138' , 'path' : '/downloads/file' , 'selected' : 'true' , 'uris' : [{ 'status' : 'used' , 'uri' : 'http://example.org/file' }]}], 'gid' : '2089b05ecca3d829' , 'numPieces' : '17' , 'pieceLength' : '2097152' , 'status' : 'complete' , 'totalLength' : '34896138' , 'uploadLength' : '0' , 'uploadSpeed' : '0' } The following example gets only specific keys: >>> r = s.aria2.tellStatus('2089b05ecca3d829', ['gid', 'totalLength', 'completedLength']) >>> pprint(r) {'completedLength': '34896138', 'gid': '2089b05ecca3d829', 'totalLength': '34896138'} Source code in aria2p/client.pydef tell_status ( self , gid , keys = None ): \"\"\" aria2.tellStatus([secret], gid[, keys]) This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, aria2.tellStatus(\"2089b05ecca3d829\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid GID of the download. status active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength Total length of the download in bytes. completedLength Completed length of the download in bytes. uploadLength Uploaded length of the download in bytes. bitfield Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed Download speed of this download measured in bytes/sec. uploadSpeed Upload speed of this download measured in bytes/sec. infoHash InfoHash. BitTorrent only. numSeeders The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength Piece length in bytes. numPieces The number of pieces. connections The number of peers/servers aria2 has connected to. errorCode The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage The (hopefully) human readable error message associated to errorCode. followedBy List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir Directory to save files. files Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. bittorrent Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains following keys. announceList List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. comment The comment of the torrent. comment.utf-8 is used if available. creationDate The creation time of the torrent. The value is an integer since the epoch, measured in seconds. mode File mode of the torrent. The value is either single or multi. info Struct which contains data from Info dictionary. It contains following keys. name name in info dictionary. name.utf-8 is used if available. verifiedLength The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. JSON-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'bitfield': u'0000000000', u'completedLength': u'901120', u'connections': u'1', u'dir': u'/downloads', u'downloadSpeed': u'15158', u'files': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}], u'gid': u'2089b05ecca3d829', u'numPieces': u'34', u'pieceLength': u'1048576', u'status': u'active', u'totalLength': u'34896138', u'uploadLength': u'0', u'uploadSpeed': u'0'}} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['2089b05ecca3d829', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'2089b05ecca3d829', u'totalLength': u'34896138'}} XML-RPC Example The following example gets information about a download with GID#2089b05ecca3d829: >>> import xmlrpclib >>> from pprint import pprint >>> s = xmlrpclib.ServerProxy('http://localhost:6800/rpc') >>> r = s.aria2.tellStatus('2089b05ecca3d829') >>> pprint(r) {'bitfield': 'ffff80', 'completedLength': '34896138', 'connections': '0', 'dir': '/downloads', 'downloadSpeed': '0', 'errorCode': '0', 'files': [{'index': '1', 'length': '34896138', 'completedLength': '34896138', 'path': '/downloads/file', 'selected': 'true', 'uris': [{'status': 'used', 'uri': 'http://example.org/file'}]}], 'gid': '2089b05ecca3d829', 'numPieces': '17', 'pieceLength': '2097152', 'status': 'complete', 'totalLength': '34896138', 'uploadLength': '0', 'uploadSpeed': '0'} The following example gets only specific keys: >>> r = s.aria2.tellStatus('2089b05ecca3d829', ['gid', 'totalLength', 'completedLength']) >>> pprint(r) {'completedLength': '34896138', 'gid': '2089b05ecca3d829', 'totalLength': '34896138'} \"\"\" return self . call ( self . TELL_STATUS , [ gid , keys ])","title":"tell_status()"},{"location":"reference/client/#aria2p.client.Client.tell_stopped","text":"aria2.tellStopped([secret], offset, num[, keys]) This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. offset and num have the same semantics as described in the aria2.tellWaiting() method. The response is an array of the same structs as returned by the aria2.tellStatus() method. Source code in aria2p/client.py 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 def tell_stopped ( self , offset , num , keys = None ): \"\"\" aria2.tellStopped([secret], offset, num[, keys]) This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. offset and num have the same semantics as described in the aria2.tellWaiting() method. The response is an array of the same structs as returned by the aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_STOPPED , [ offset , num , keys ])","title":"tell_stopped()"},{"location":"reference/client/#aria2p.client.Client.tell_waiting","text":"aria2.tellWaiting([secret], offset, num[, keys]) This method returns a list of waiting downloads, including paused ones. offset is an integer and specifies the offset from the download waiting at the front. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. If offset is a positive integer, this method returns downloads in the range of [offset, offset + num). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. aria2.tellWaiting(0, 1) returns [\"A\"]. aria2.tellWaiting(1, 2) returns [\"B\", \"C\"]. aria2.tellWaiting(-1, 2) returns [\"C\", \"B\"]. The response is an array of the same structs as returned by aria2.tellStatus() method. Source code in aria2p/client.py 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 def tell_waiting ( self , offset , num , keys = None ): \"\"\" aria2.tellWaiting([secret], offset, num[, keys]) This method returns a list of waiting downloads, including paused ones. offset is an integer and specifies the offset from the download waiting at the front. num is an integer and specifies the max. number of downloads to be returned. For the keys parameter, please refer to the aria2.tellStatus() method. If offset is a positive integer, this method returns downloads in the range of [offset, offset + num). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. aria2.tellWaiting(0, 1) returns [\"A\"]. aria2.tellWaiting(1, 2) returns [\"B\", \"C\"]. aria2.tellWaiting(-1, 2) returns [\"C\", \"B\"]. The response is an array of the same structs as returned by aria2.tellStatus() method. \"\"\" return self . call ( self . TELL_WAITING , [ offset , num , keys ])","title":"tell_waiting()"},{"location":"reference/client/#aria2p.client.Client.unpause","text":"aria2.unpause([secret], gid) This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Source code in aria2p/client.py 602 603 604 605 606 607 608 609 def unpause ( self , gid ): \"\"\" aria2.unpause([secret], gid) This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. \"\"\" return self . call ( self . UNPAUSE , [ gid ])","title":"unpause()"},{"location":"reference/client/#aria2p.client.Client.unpause_all","text":"aria2.unpauseAll([secret]) This method is equal to calling aria2.unpause() for every active/waiting download. This methods returns OK. Source code in aria2p/client.py 611 612 613 614 615 616 617 def unpause_all ( self ): \"\"\" aria2.unpauseAll([secret]) This method is equal to calling aria2.unpause() for every active/waiting download. This methods returns OK. \"\"\" return self . call ( self . UNPAUSE_ALL )","title":"unpause_all()"},{"location":"reference/client/#aria2p.client.ClientException","text":"An exception specific to JSON-RPC errors.","title":"ClientException"},{"location":"reference/client/#aria2p.client.Notification","text":"A helper class for notifications. You should not need to use this class. It simply provides methods to instantiate a notification with a message received from the server through a WebSocket, or to raise a ClientException if the message is invalid.","title":"Notification"},{"location":"reference/client/#aria2p.client.Notification.__init__","text":"Initialization method. Parameters: Name Type Description Default event_type str The notification type. Possible types are available in the NOTIFICATION_TYPES variable. required gid str The GID of the download related to the notification. required Source code in aria2p/client.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 def __init__ ( self , event_type : str , gid : str ) -> None : \"\"\" Initialization method. Parameters: event_type: The notification type. Possible types are available in the NOTIFICATION_TYPES variable. gid: The GID of the download related to the notification. \"\"\" self . type = event_type self . gid = gid","title":"__init__()"},{"location":"reference/client/#aria2p.client.Notification.from_message","text":"Static method to return an instance of Notification. This method expects a valid message (not containing errors). Parameters: Name Type Description Default message dict A valid message received over WebSocket. required Returns: Type Description Notification A Notification instance. Source code in aria2p/client.py 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 @staticmethod def from_message ( message : dict ) -> \"Notification\" : \"\"\" Static method to return an instance of Notification. This method expects a valid message (not containing errors). Parameters: message: A valid message received over WebSocket. Returns: A Notification instance. \"\"\" return Notification ( event_type = message [ \"method\" ], gid = message [ \"params\" ][ 0 ][ \"gid\" ])","title":"from_message()"},{"location":"reference/client/#aria2p.client.Notification.get_or_raise","text":"Static method to raise a ClientException when the message is invalid or return a Notification instance. Parameters: Name Type Description Default message dict The JSON-loaded message received over WebSocket. required Returns: Type Description Notification A Notification instance if the message is valid. Exceptions: Type Description ClientException when the message contains an error. Source code in aria2p/client.py 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 @staticmethod def get_or_raise ( message : dict ) -> \"Notification\" : \"\"\" Static method to raise a ClientException when the message is invalid or return a Notification instance. Parameters: message: The JSON-loaded message received over WebSocket. Returns: A Notification instance if the message is valid. Raises: ClientException: when the message contains an error. \"\"\" if \"error\" in message : raise Client . response_as_exception ( message ) return Notification . from_message ( message )","title":"get_or_raise()"},{"location":"reference/downloads/","text":"\u00b6 This module defines the BitTorrent, File and Download classes, which respectively hold structured information about torrent files, files and downloads in aria2c. BitTorrent \u00b6 Information retrieved from a torrent file. announce_list property readonly \u00b6 List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. comment property readonly \u00b6 The comment of the torrent. comment.utf-8 is used if available. creation_date: datetime property readonly \u00b6 The creation time of the torrent. The value is an integer since the epoch, measured in seconds. info property readonly \u00b6 Struct which contains data from Info dictionary. It contains following keys: name name in info dictionary. name.utf-8 is used if available. mode: str property readonly \u00b6 File mode of the torrent. The value is either single or multi. __init__ ( self , struct ) special \u00b6 Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 20 21 22 23 24 25 26 27 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Args: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} Download \u00b6 Class containing all information about a download, as retrieved with the client. belongs_to property readonly \u00b6 Parent download. Returns an instance of [ Download ][aria2p.downloads.Download]. belongs_to_id property readonly \u00b6 GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. bitfield property readonly \u00b6 Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. bittorrent property readonly \u00b6 Struct which contains information retrieved from the .torrent (file). BitTorrent only. completed_length property readonly \u00b6 Completed length of the download in bytes. connections property readonly \u00b6 The number of peers/servers aria2 has connected to. control_file_path property readonly \u00b6 Return the path to the aria2 control file for this download. dir property readonly \u00b6 Directory to save files. download_speed property readonly \u00b6 Download speed of this download measured in bytes/sec. error_code property readonly \u00b6 The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. error_message property readonly \u00b6 The (hopefully) human readable error message associated to errorCode. eta: timedelta property readonly \u00b6 Return the Estimated Time of Arrival (a timedelta). Return timedelta.max if unknown. files property readonly \u00b6 Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. followed_by property readonly \u00b6 List of downloads generated as the result of this download. Returns a list of instances of [ Download ][aria2p.downloads.Download]. followed_by_ids property readonly \u00b6 List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following property readonly \u00b6 The download this download is following. Returns an instance of [ Download ][aria2p.downloads.Download]. following_id property readonly \u00b6 The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. gid property readonly \u00b6 GID of the download. has_failed property readonly \u00b6 Return True if download has errored. info_hash property readonly \u00b6 InfoHash. BitTorrent only. is_active property readonly \u00b6 Return True if download is active. is_complete property readonly \u00b6 Return True if download is complete. is_metadata property readonly \u00b6 Return True if this download is only composed of metadata, and no actual files. is_paused property readonly \u00b6 Return True if download is paused. is_removed property readonly \u00b6 Return True if download was removed. is_waiting property readonly \u00b6 Return True if download is waiting. live: Download property readonly \u00b6 Returns the same object with updated data. name property readonly \u00b6 The name of the download. Name is the name of the file if single-file, first file's directory name if multi-file. num_pieces property readonly \u00b6 The number of pieces. num_seeders property readonly \u00b6 The number of seeders aria2 has connected to. BitTorrent only. options property writable \u00b6 Options specific to this download. The returned object is an instance of [ Options ][aria2p.options.Options]. piece_length property readonly \u00b6 Piece length in bytes. progress: float property readonly \u00b6 Return the progress of the download as float. root_files_paths property readonly \u00b6 Return the unique set of directories/files for this download. Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files. This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible. Examples: # download dir is /a/b. >>> self.files [\"/a/b/c/1.txt\", \"/a/b/c/2.txt\", \"/a/b/3.txt\"] >>> self.root_files_paths [\"/a/b/c\", \"/a/b/3.txt\"] seeder property readonly \u00b6 True if the local endpoint is a seeder, otherwise false. BitTorrent only. status property readonly \u00b6 Status of the download: active, waiting, paused, error, complete or removed. total_length property readonly \u00b6 Total length of the download in bytes. upload_length property readonly \u00b6 Uploaded length of the download in bytes. upload_speed property readonly \u00b6 Upload speed of this download measured in bytes/sec. verified_length: int property readonly \u00b6 The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verify_integrity_pending property readonly \u00b6 True if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. __init__ ( self , api , struct ) special \u00b6 Initialization method. Parameters: Name Type Description Default api aria2p.api.API the reference to an [ API ][aria2p.api.API] instance. required struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def __init__ ( self , api : \"aria2p.api.API\" , struct : dict ) -> None : \"\"\" Initialization method. Parameters: api: the reference to an [`API`][aria2p.api.API] instance. struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . api = api self . _struct = struct or {} self . _files = [] self . _root_files_paths = [] self . _bittorrent = None self . _name = \"\" self . _options = None self . _followed_by = None self . _following = None self . _belongs_to = None completed_length_string ( self , human_readable = True ) \u00b6 Return the completed length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py 375 376 377 378 379 380 381 382 383 384 385 386 387 def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Parameters: human_readable: return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\" copy_files ( self , to_directory , force = False ) \u00b6 Copy downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[str, pathlib.Path] the target directory to copy files into. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/downloads.py 844 845 846 847 848 849 850 851 852 853 854 855 def copy_files ( self , to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Parameters: to_directory: the target directory to copy files into. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" return self . api . copy_files ([ self ], to_directory , force )[ 0 ] download_speed_string ( self , human_readable = True ) \u00b6 Return the download speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/downloads.py 424 425 426 427 428 429 430 431 432 433 434 435 436 def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Parameters: human_readable: return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\" eta_string ( self , precision = 0 ) \u00b6 Return the Estimated Time of Arrival as a string. Source code in aria2p/downloads.py 707 708 709 710 711 712 713 714 def eta_string ( self , precision : int = 0 ) -> str : \"\"\"Return the Estimated Time of Arrival as a string.\"\"\" eta = self . eta if eta == timedelta . max : return \"-\" return human_readable_timedelta ( eta , precision = precision ) move ( self , pos ) \u00b6 Move the download in the queue, relatively. Parameters: Name Type Description Default pos int number of times to move. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 716 717 718 719 720 721 722 723 724 725 726 def move ( self , pos : int ) -> int : \"\"\" Move the download in the queue, relatively. Parameters: pos: number of times to move. Returns: The new position of the download. \"\"\" return self . api . move ( self , pos ) move_down ( self , pos = 1 ) \u00b6 Move the download down in the queue. Parameters: Name Type Description Default pos int number of times to move down. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 752 753 754 755 756 757 758 759 760 761 762 def move_down ( self , pos : int = 1 ) -> int : \"\"\" Move the download down in the queue. Parameters: pos: number of times to move down. Returns: The new position of the download. \"\"\" return self . api . move_down ( self , pos ) move_files ( self , to_directory , force = False ) \u00b6 Move downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[str, pathlib.Path] the target directory to move files to. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/downloads.py 831 832 833 834 835 836 837 838 839 840 841 842 def move_files ( self , to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Parameters: to_directory: the target directory to move files to. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" return self . api . move_files ([ self ], to_directory , force )[ 0 ] move_to ( self , pos ) \u00b6 Move the download in the queue, absolutely. Parameters: Name Type Description Default pos int the absolute position in the queue to take. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 728 729 730 731 732 733 734 735 736 737 738 def move_to ( self , pos : int ) -> int : \"\"\" Move the download in the queue, absolutely. Parameters: pos: the absolute position in the queue to take. Returns: The new position of the download. \"\"\" return self . api . move_to ( self , pos ) move_to_bottom ( self ) \u00b6 Move the download to the bottom of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 773 774 775 776 777 778 779 780 def move_to_bottom ( self ) -> int : \"\"\" Move the download to the bottom of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_bottom ( self ) move_to_top ( self ) \u00b6 Move the download to the top of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 764 765 766 767 768 769 770 771 def move_to_top ( self ) -> int : \"\"\" Move the download to the top of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_top ( self ) move_up ( self , pos = 1 ) \u00b6 Move the download up in the queue. Parameters: Name Type Description Default pos int number of times to move up. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 740 741 742 743 744 745 746 747 748 749 750 def move_up ( self , pos : int = 1 ) -> int : \"\"\" Move the download up in the queue. Parameters: pos: number of times to move up. Returns: The new position of the download. \"\"\" return self . api . move_up ( self , pos ) pause ( self , force = False ) \u00b6 Pause the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when pausing failed. Source code in aria2p/downloads.py 797 798 799 800 801 802 803 804 805 806 807 808 809 810 def pause ( self , force : bool = False ) -> bool : \"\"\" Pause the download. Returns: Always True (raises exception otherwise). Raises: ClientException: when pausing failed. \"\"\" result = self . api . pause ([ self ], force = force )[ 0 ] if not result : raise result return result piece_length_string ( self , human_readable = True ) \u00b6 Return the piece length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The piece length string. Source code in aria2p/downloads.py 489 490 491 492 493 494 495 496 497 498 499 500 501 def piece_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the piece length as string. Parameters: human_readable: return in human readable format or not. Returns: The piece length string. \"\"\" if human_readable : return human_readable_bytes ( self . piece_length , delim = \" \" ) return str ( self . piece_length ) + \" B\" progress_string ( self , digits = 2 ) \u00b6 Return the progress percentage as string. Parameters: Name Type Description Default digits int number of decimal digits to use. 2 Returns: Type Description str The progress percentage. Source code in aria2p/downloads.py 684 685 686 687 688 689 690 691 692 693 694 def progress_string ( self , digits : int = 2 ) -> str : \"\"\" Return the progress percentage as string. Parameters: digits: number of decimal digits to use. Returns: The progress percentage. \"\"\" return f \" { self . progress : . { digits } f } %\" purge ( self ) \u00b6 Purge itself from the results. Source code in aria2p/downloads.py 827 828 829 def purge ( self ) -> bool : \"\"\"Purge itself from the results.\"\"\" return self . api . purge ([ self ])[ 0 ] remove ( self , force = False , files = False ) \u00b6 Remove the download from the queue (even if active). Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when removal failed. Source code in aria2p/downloads.py 782 783 784 785 786 787 788 789 790 791 792 793 794 795 def remove ( self , force : bool = False , files : bool = False ) -> bool : \"\"\" Remove the download from the queue (even if active). Returns: Always True (raises exception otherwise). Raises: ClientException: when removal failed. \"\"\" result = self . api . remove ([ self ], force = force , files = files )[ 0 ] if not result : raise result return result resume ( self ) \u00b6 Resume the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when resuming failed. Source code in aria2p/downloads.py 812 813 814 815 816 817 818 819 820 821 822 823 824 825 def resume ( self ) -> bool : \"\"\" Resume the download. Returns: Always True (raises exception otherwise). Raises: ClientException: when resuming failed. \"\"\" result = self . api . resume ([ self ])[ 0 ] if not result : raise result return result total_length_string ( self , human_readable = True ) \u00b6 Return the total length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The total length string. Source code in aria2p/downloads.py 356 357 358 359 360 361 362 363 364 365 366 367 368 def total_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the total length as string. Parameters: human_readable: return in human readable format or not. Returns: The total length string. \"\"\" if human_readable : return human_readable_bytes ( self . total_length , delim = \" \" ) return str ( self . total_length ) + \" B\" update ( self ) \u00b6 Method to update the internal values of the download with more recent values. Source code in aria2p/downloads.py 204 205 206 207 208 209 210 211 212 213 def update ( self ) -> None : \"\"\"Method to update the internal values of the download with more recent values.\"\"\" self . _struct = self . api . client . tell_status ( self . gid ) self . _files = [] self . _name = None self . _bittorrent = None self . _followed_by = [] self . _following = None self . _belongs_to = None update_options ( self ) \u00b6 Re-fetch the options from the remote. Source code in aria2p/downloads.py 302 303 304 def update_options ( self ): \"\"\"Re-fetch the options from the remote.\"\"\" self . _options = self . api . get_options ( downloads = [ self ])[ 0 ] upload_length_string ( self , human_readable = True ) \u00b6 Return the upload length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload length string. Source code in aria2p/downloads.py 394 395 396 397 398 399 400 401 402 403 404 405 406 def upload_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload length as string. Parameters: human_readable: return in human readable format or not. Returns: The upload length string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_length , delim = \" \" ) return str ( self . upload_length ) + \" B\" upload_speed_string ( self , human_readable = True ) \u00b6 Return the upload speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/downloads.py 443 444 445 446 447 448 449 450 451 452 453 454 455 def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Parameters: human_readable: return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\" verified_length_string ( self , human_readable = True ) \u00b6 Return the verified length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The verified length string. Source code in aria2p/downloads.py 653 654 655 656 657 658 659 660 661 662 663 664 665 def verified_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the verified length as string. Parameters: human_readable: return in human readable format or not. Returns: The verified length string. \"\"\" if human_readable : return human_readable_bytes ( self . verified_length , delim = \" \" ) return str ( self . verified_length ) + \" B\" File \u00b6 Information about a download's file. completed_length property readonly \u00b6 Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. index property readonly \u00b6 Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. is_metadata property readonly \u00b6 Return True if this file is aria2 metadata and not an actual file. length property readonly \u00b6 File size in bytes. path property readonly \u00b6 File path. selected property readonly \u00b6 True if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris property readonly \u00b6 Return a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method. __init__ ( self , struct ) special \u00b6 Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 82 83 84 85 86 87 88 89 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Parameters: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} completed_length_string ( self , human_readable = True ) \u00b6 Return the completed length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py 142 143 144 145 146 147 148 149 150 151 152 153 154 def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Parameters: human_readable: return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\" length_string ( self , human_readable = True ) \u00b6 Return the length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The length string. Source code in aria2p/downloads.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the length as string. Parameters: human_readable: return in human readable format or not. Returns: The length string. \"\"\" if human_readable : return human_readable_bytes ( self . length , delim = \" \" ) return str ( self . length ) + \" B\"","title":"downloads.py"},{"location":"reference/downloads/#aria2p.downloads","text":"This module defines the BitTorrent, File and Download classes, which respectively hold structured information about torrent files, files and downloads in aria2c.","title":"aria2p.downloads"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent","text":"Information retrieved from a torrent file.","title":"BitTorrent"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.announce_list","text":"List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format.","title":"announce_list"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.comment","text":"The comment of the torrent. comment.utf-8 is used if available.","title":"comment"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.creation_date","text":"The creation time of the torrent. The value is an integer since the epoch, measured in seconds.","title":"creation_date"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.info","text":"Struct which contains data from Info dictionary. It contains following keys: name name in info dictionary. name.utf-8 is used if available.","title":"info"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.mode","text":"File mode of the torrent. The value is either single or multi.","title":"mode"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.__init__","text":"Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 20 21 22 23 24 25 26 27 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Args: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.Download","text":"Class containing all information about a download, as retrieved with the client.","title":"Download"},{"location":"reference/downloads/#aria2p.downloads.Download.belongs_to","text":"Parent download. Returns an instance of [ Download ][aria2p.downloads.Download].","title":"belongs_to"},{"location":"reference/downloads/#aria2p.downloads.Download.belongs_to_id","text":"GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response.","title":"belongs_to_id"},{"location":"reference/downloads/#aria2p.downloads.Download.bitfield","text":"Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response.","title":"bitfield"},{"location":"reference/downloads/#aria2p.downloads.Download.bittorrent","text":"Struct which contains information retrieved from the .torrent (file). BitTorrent only.","title":"bittorrent"},{"location":"reference/downloads/#aria2p.downloads.Download.completed_length","text":"Completed length of the download in bytes.","title":"completed_length"},{"location":"reference/downloads/#aria2p.downloads.Download.connections","text":"The number of peers/servers aria2 has connected to.","title":"connections"},{"location":"reference/downloads/#aria2p.downloads.Download.control_file_path","text":"Return the path to the aria2 control file for this download.","title":"control_file_path"},{"location":"reference/downloads/#aria2p.downloads.Download.dir","text":"Directory to save files.","title":"dir"},{"location":"reference/downloads/#aria2p.downloads.Download.download_speed","text":"Download speed of this download measured in bytes/sec.","title":"download_speed"},{"location":"reference/downloads/#aria2p.downloads.Download.error_code","text":"The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads.","title":"error_code"},{"location":"reference/downloads/#aria2p.downloads.Download.error_message","text":"The (hopefully) human readable error message associated to errorCode.","title":"error_message"},{"location":"reference/downloads/#aria2p.downloads.Download.eta","text":"Return the Estimated Time of Arrival (a timedelta). Return timedelta.max if unknown.","title":"eta"},{"location":"reference/downloads/#aria2p.downloads.Download.files","text":"Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method.","title":"files"},{"location":"reference/downloads/#aria2p.downloads.Download.followed_by","text":"List of downloads generated as the result of this download. Returns a list of instances of [ Download ][aria2p.downloads.Download].","title":"followed_by"},{"location":"reference/downloads/#aria2p.downloads.Download.followed_by_ids","text":"List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response.","title":"followed_by_ids"},{"location":"reference/downloads/#aria2p.downloads.Download.following","text":"The download this download is following. Returns an instance of [ Download ][aria2p.downloads.Download].","title":"following"},{"location":"reference/downloads/#aria2p.downloads.Download.following_id","text":"The reverse link for followedBy. A download included in followedBy has this object's GID in its following value.","title":"following_id"},{"location":"reference/downloads/#aria2p.downloads.Download.gid","text":"GID of the download.","title":"gid"},{"location":"reference/downloads/#aria2p.downloads.Download.has_failed","text":"Return True if download has errored.","title":"has_failed"},{"location":"reference/downloads/#aria2p.downloads.Download.info_hash","text":"InfoHash. BitTorrent only.","title":"info_hash"},{"location":"reference/downloads/#aria2p.downloads.Download.is_active","text":"Return True if download is active.","title":"is_active"},{"location":"reference/downloads/#aria2p.downloads.Download.is_complete","text":"Return True if download is complete.","title":"is_complete"},{"location":"reference/downloads/#aria2p.downloads.Download.is_metadata","text":"Return True if this download is only composed of metadata, and no actual files.","title":"is_metadata"},{"location":"reference/downloads/#aria2p.downloads.Download.is_paused","text":"Return True if download is paused.","title":"is_paused"},{"location":"reference/downloads/#aria2p.downloads.Download.is_removed","text":"Return True if download was removed.","title":"is_removed"},{"location":"reference/downloads/#aria2p.downloads.Download.is_waiting","text":"Return True if download is waiting.","title":"is_waiting"},{"location":"reference/downloads/#aria2p.downloads.Download.live","text":"Returns the same object with updated data.","title":"live"},{"location":"reference/downloads/#aria2p.downloads.Download.name","text":"The name of the download. Name is the name of the file if single-file, first file's directory name if multi-file.","title":"name"},{"location":"reference/downloads/#aria2p.downloads.Download.num_pieces","text":"The number of pieces.","title":"num_pieces"},{"location":"reference/downloads/#aria2p.downloads.Download.num_seeders","text":"The number of seeders aria2 has connected to. BitTorrent only.","title":"num_seeders"},{"location":"reference/downloads/#aria2p.downloads.Download.options","text":"Options specific to this download. The returned object is an instance of [ Options ][aria2p.options.Options].","title":"options"},{"location":"reference/downloads/#aria2p.downloads.Download.piece_length","text":"Piece length in bytes.","title":"piece_length"},{"location":"reference/downloads/#aria2p.downloads.Download.progress","text":"Return the progress of the download as float.","title":"progress"},{"location":"reference/downloads/#aria2p.downloads.Download.root_files_paths","text":"Return the unique set of directories/files for this download. Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files. This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible. Examples: # download dir is /a/b. >>> self.files [\"/a/b/c/1.txt\", \"/a/b/c/2.txt\", \"/a/b/3.txt\"] >>> self.root_files_paths [\"/a/b/c\", \"/a/b/3.txt\"]","title":"root_files_paths"},{"location":"reference/downloads/#aria2p.downloads.Download.seeder","text":"True if the local endpoint is a seeder, otherwise false. BitTorrent only.","title":"seeder"},{"location":"reference/downloads/#aria2p.downloads.Download.status","text":"Status of the download: active, waiting, paused, error, complete or removed.","title":"status"},{"location":"reference/downloads/#aria2p.downloads.Download.total_length","text":"Total length of the download in bytes.","title":"total_length"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_length","text":"Uploaded length of the download in bytes.","title":"upload_length"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_speed","text":"Upload speed of this download measured in bytes/sec.","title":"upload_speed"},{"location":"reference/downloads/#aria2p.downloads.Download.verified_length","text":"The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked.","title":"verified_length"},{"location":"reference/downloads/#aria2p.downloads.Download.verify_integrity_pending","text":"True if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue.","title":"verify_integrity_pending"},{"location":"reference/downloads/#aria2p.downloads.Download.__init__","text":"Initialization method. Parameters: Name Type Description Default api aria2p.api.API the reference to an [ API ][aria2p.api.API] instance. required struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def __init__ ( self , api : \"aria2p.api.API\" , struct : dict ) -> None : \"\"\" Initialization method. Parameters: api: the reference to an [`API`][aria2p.api.API] instance. struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . api = api self . _struct = struct or {} self . _files = [] self . _root_files_paths = [] self . _bittorrent = None self . _name = \"\" self . _options = None self . _followed_by = None self . _following = None self . _belongs_to = None","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.Download.completed_length_string","text":"Return the completed length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py 375 376 377 378 379 380 381 382 383 384 385 386 387 def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Parameters: human_readable: return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\"","title":"completed_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.copy_files","text":"Copy downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[str, pathlib.Path] the target directory to copy files into. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/downloads.py 844 845 846 847 848 849 850 851 852 853 854 855 def copy_files ( self , to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Parameters: to_directory: the target directory to copy files into. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" return self . api . copy_files ([ self ], to_directory , force )[ 0 ]","title":"copy_files()"},{"location":"reference/downloads/#aria2p.downloads.Download.download_speed_string","text":"Return the download speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/downloads.py 424 425 426 427 428 429 430 431 432 433 434 435 436 def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Parameters: human_readable: return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\"","title":"download_speed_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.eta_string","text":"Return the Estimated Time of Arrival as a string. Source code in aria2p/downloads.py 707 708 709 710 711 712 713 714 def eta_string ( self , precision : int = 0 ) -> str : \"\"\"Return the Estimated Time of Arrival as a string.\"\"\" eta = self . eta if eta == timedelta . max : return \"-\" return human_readable_timedelta ( eta , precision = precision )","title":"eta_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.move","text":"Move the download in the queue, relatively. Parameters: Name Type Description Default pos int number of times to move. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 716 717 718 719 720 721 722 723 724 725 726 def move ( self , pos : int ) -> int : \"\"\" Move the download in the queue, relatively. Parameters: pos: number of times to move. Returns: The new position of the download. \"\"\" return self . api . move ( self , pos )","title":"move()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_down","text":"Move the download down in the queue. Parameters: Name Type Description Default pos int number of times to move down. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 752 753 754 755 756 757 758 759 760 761 762 def move_down ( self , pos : int = 1 ) -> int : \"\"\" Move the download down in the queue. Parameters: pos: number of times to move down. Returns: The new position of the download. \"\"\" return self . api . move_down ( self , pos )","title":"move_down()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_files","text":"Move downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[str, pathlib.Path] the target directory to move files to. required force bool whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/downloads.py 831 832 833 834 835 836 837 838 839 840 841 842 def move_files ( self , to_directory : Union [ str , Path ], force : bool = False ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Parameters: to_directory: the target directory to move files to. force: whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" return self . api . move_files ([ self ], to_directory , force )[ 0 ]","title":"move_files()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to","text":"Move the download in the queue, absolutely. Parameters: Name Type Description Default pos int the absolute position in the queue to take. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 728 729 730 731 732 733 734 735 736 737 738 def move_to ( self , pos : int ) -> int : \"\"\" Move the download in the queue, absolutely. Parameters: pos: the absolute position in the queue to take. Returns: The new position of the download. \"\"\" return self . api . move_to ( self , pos )","title":"move_to()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to_bottom","text":"Move the download to the bottom of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 773 774 775 776 777 778 779 780 def move_to_bottom ( self ) -> int : \"\"\" Move the download to the bottom of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_bottom ( self )","title":"move_to_bottom()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to_top","text":"Move the download to the top of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 764 765 766 767 768 769 770 771 def move_to_top ( self ) -> int : \"\"\" Move the download to the top of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_top ( self )","title":"move_to_top()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_up","text":"Move the download up in the queue. Parameters: Name Type Description Default pos int number of times to move up. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py 740 741 742 743 744 745 746 747 748 749 750 def move_up ( self , pos : int = 1 ) -> int : \"\"\" Move the download up in the queue. Parameters: pos: number of times to move up. Returns: The new position of the download. \"\"\" return self . api . move_up ( self , pos )","title":"move_up()"},{"location":"reference/downloads/#aria2p.downloads.Download.pause","text":"Pause the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when pausing failed. Source code in aria2p/downloads.py 797 798 799 800 801 802 803 804 805 806 807 808 809 810 def pause ( self , force : bool = False ) -> bool : \"\"\" Pause the download. Returns: Always True (raises exception otherwise). Raises: ClientException: when pausing failed. \"\"\" result = self . api . pause ([ self ], force = force )[ 0 ] if not result : raise result return result","title":"pause()"},{"location":"reference/downloads/#aria2p.downloads.Download.piece_length_string","text":"Return the piece length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The piece length string. Source code in aria2p/downloads.py 489 490 491 492 493 494 495 496 497 498 499 500 501 def piece_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the piece length as string. Parameters: human_readable: return in human readable format or not. Returns: The piece length string. \"\"\" if human_readable : return human_readable_bytes ( self . piece_length , delim = \" \" ) return str ( self . piece_length ) + \" B\"","title":"piece_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.progress_string","text":"Return the progress percentage as string. Parameters: Name Type Description Default digits int number of decimal digits to use. 2 Returns: Type Description str The progress percentage. Source code in aria2p/downloads.py 684 685 686 687 688 689 690 691 692 693 694 def progress_string ( self , digits : int = 2 ) -> str : \"\"\" Return the progress percentage as string. Parameters: digits: number of decimal digits to use. Returns: The progress percentage. \"\"\" return f \" { self . progress : . { digits } f } %\"","title":"progress_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.purge","text":"Purge itself from the results. Source code in aria2p/downloads.py 827 828 829 def purge ( self ) -> bool : \"\"\"Purge itself from the results.\"\"\" return self . api . purge ([ self ])[ 0 ]","title":"purge()"},{"location":"reference/downloads/#aria2p.downloads.Download.remove","text":"Remove the download from the queue (even if active). Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when removal failed. Source code in aria2p/downloads.py 782 783 784 785 786 787 788 789 790 791 792 793 794 795 def remove ( self , force : bool = False , files : bool = False ) -> bool : \"\"\" Remove the download from the queue (even if active). Returns: Always True (raises exception otherwise). Raises: ClientException: when removal failed. \"\"\" result = self . api . remove ([ self ], force = force , files = files )[ 0 ] if not result : raise result return result","title":"remove()"},{"location":"reference/downloads/#aria2p.downloads.Download.resume","text":"Resume the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException when resuming failed. Source code in aria2p/downloads.py 812 813 814 815 816 817 818 819 820 821 822 823 824 825 def resume ( self ) -> bool : \"\"\" Resume the download. Returns: Always True (raises exception otherwise). Raises: ClientException: when resuming failed. \"\"\" result = self . api . resume ([ self ])[ 0 ] if not result : raise result return result","title":"resume()"},{"location":"reference/downloads/#aria2p.downloads.Download.total_length_string","text":"Return the total length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The total length string. Source code in aria2p/downloads.py 356 357 358 359 360 361 362 363 364 365 366 367 368 def total_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the total length as string. Parameters: human_readable: return in human readable format or not. Returns: The total length string. \"\"\" if human_readable : return human_readable_bytes ( self . total_length , delim = \" \" ) return str ( self . total_length ) + \" B\"","title":"total_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.update","text":"Method to update the internal values of the download with more recent values. Source code in aria2p/downloads.py 204 205 206 207 208 209 210 211 212 213 def update ( self ) -> None : \"\"\"Method to update the internal values of the download with more recent values.\"\"\" self . _struct = self . api . client . tell_status ( self . gid ) self . _files = [] self . _name = None self . _bittorrent = None self . _followed_by = [] self . _following = None self . _belongs_to = None","title":"update()"},{"location":"reference/downloads/#aria2p.downloads.Download.update_options","text":"Re-fetch the options from the remote. Source code in aria2p/downloads.py 302 303 304 def update_options ( self ): \"\"\"Re-fetch the options from the remote.\"\"\" self . _options = self . api . get_options ( downloads = [ self ])[ 0 ]","title":"update_options()"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_length_string","text":"Return the upload length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload length string. Source code in aria2p/downloads.py 394 395 396 397 398 399 400 401 402 403 404 405 406 def upload_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload length as string. Parameters: human_readable: return in human readable format or not. Returns: The upload length string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_length , delim = \" \" ) return str ( self . upload_length ) + \" B\"","title":"upload_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_speed_string","text":"Return the upload speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/downloads.py 443 444 445 446 447 448 449 450 451 452 453 454 455 def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Parameters: human_readable: return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"upload_speed_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.verified_length_string","text":"Return the verified length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The verified length string. Source code in aria2p/downloads.py 653 654 655 656 657 658 659 660 661 662 663 664 665 def verified_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the verified length as string. Parameters: human_readable: return in human readable format or not. Returns: The verified length string. \"\"\" if human_readable : return human_readable_bytes ( self . verified_length , delim = \" \" ) return str ( self . verified_length ) + \" B\"","title":"verified_length_string()"},{"location":"reference/downloads/#aria2p.downloads.File","text":"Information about a download's file.","title":"File"},{"location":"reference/downloads/#aria2p.downloads.File.completed_length","text":"Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces.","title":"completed_length"},{"location":"reference/downloads/#aria2p.downloads.File.index","text":"Index of the file, starting at 1, in the same order as files appear in the multi-file torrent.","title":"index"},{"location":"reference/downloads/#aria2p.downloads.File.is_metadata","text":"Return True if this file is aria2 metadata and not an actual file.","title":"is_metadata"},{"location":"reference/downloads/#aria2p.downloads.File.length","text":"File size in bytes.","title":"length"},{"location":"reference/downloads/#aria2p.downloads.File.path","text":"File path.","title":"path"},{"location":"reference/downloads/#aria2p.downloads.File.selected","text":"True if this file is selected by --select-file option. If --select-file is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false.","title":"selected"},{"location":"reference/downloads/#aria2p.downloads.File.uris","text":"Return a list of URIs for this file. The element type is the same struct used in the aria2.getUris() method.","title":"uris"},{"location":"reference/downloads/#aria2p.downloads.File.__init__","text":"Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py 82 83 84 85 86 87 88 89 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Parameters: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.File.completed_length_string","text":"Return the completed length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py 142 143 144 145 146 147 148 149 150 151 152 153 154 def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Parameters: human_readable: return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\"","title":"completed_length_string()"},{"location":"reference/downloads/#aria2p.downloads.File.length_string","text":"Return the length as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The length string. Source code in aria2p/downloads.py 117 118 119 120 121 122 123 124 125 126 127 128 129 def length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the length as string. Parameters: human_readable: return in human readable format or not. Returns: The length string. \"\"\" if human_readable : return human_readable_bytes ( self . length , delim = \" \" ) return str ( self . length ) + \" B\"","title":"length_string()"},{"location":"reference/options/","text":"\u00b6 This module defines the Options class, which holds information retrieved with the get_option or get_global_option methods of the client. Options \u00b6 This class holds information retrieved with the get_option or get_global_option methods of the client. Instances are given a reference to an [ API ][aria2p.api.API] instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options. The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like options.max_concurrent_downloads = 5 . all_proxy: str property writable \u00b6 Use a proxy server for all protocols. To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is [http://][ USER:PASSWORD@]HOST[:PORT]. See also ENVIRONMENT section. Note If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd} options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\"http://proxy\" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass. Another example: if you specified on the command-line --http-proxy=\"http://user:pass@proxy\" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass. One more example: if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\"http://user:pass@proxy\", then you'd get HTTP proxy http://proxy with user user and password pass. Returns: Type Description str str all_proxy_passwd: str property writable \u00b6 Set password for --all-proxy option. Returns: Type Description str str all_proxy_user: str property writable \u00b6 Set user for --all-proxy option. Returns: Type Description str str allow_overwrite: bool property writable \u00b6 Restart download from scratch if the corresponding control file doesn't exist. See also --auto-file-renaming option. Default: false. Returns: Type Description bool bool allow_piece_length_change: bool property writable \u00b6 If false is given, aria2 aborts download when a piece length is different from one in a control file. If true is given, you can proceed but some download progress will be lost. Default: false. Returns: Type Description bool bool always_resume: bool property writable \u00b6 Always resume download. If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true. Returns: Type Description bool bool are_global property readonly \u00b6 Property to tell if options are global, or tied to a Download object. async_dns: bool property writable \u00b6 Enable asynchronous DNS. Default: true. Returns: Type Description bool bool async_dns_server: List [ str ] property writable \u00b6 Comma separated list of DNS server address used in asynchronous DNS resolver. Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it. Returns: Type Description List[str] list of str auto_file_renaming: bool property writable \u00b6 Rename file name if the same file already exists. This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true. Returns: Type Description bool bool auto_save_interval: int property writable \u00b6 Save a control file (*.aria2) every SEC seconds. If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60. Returns: Type Description int int bt_detach_seed_only: bool property writable \u00b6 Exclude seed only downloads when counting concurrent active downloads (See -j option). This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false. Returns: Type Description bool bool bt_enable_hook_after_hash_check: bool property writable \u00b6 Allow hook command invocation after hash check (see -V option) in BitTorrent download. By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true. Returns: Type Description bool bool bt_enable_lpd: bool property writable \u00b6 Enable Local Peer Discovery. If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false. Returns: Type Description bool bool bt_exclude_tracker: List [ str ] property writable \u00b6 Comma separated list of BitTorrent tracker's announce URI to remove. You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option. Returns: Type Description List[str] list of str bt_external_ip: str property writable \u00b6 Specify the external IP address to use in BitTorrent download and DHT. It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses. Returns: Type Description str str bt_force_encryption: bool property writable \u00b6 Requires BitTorrent message payload encryption with arc4. This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false. Returns: Type Description bool bool bt_hash_check_seed: bool property writable \u00b6 If true is given, after hash check using --check-integrity option and file is complete, continue to seed file. If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true Returns: Type Description bool bool bt_lpd_interface: str property writable \u00b6 Use given interface for Local Peer Discovery. If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address. Returns: Type Description str str bt_max_open_files: int property writable \u00b6 Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally. Default: 100. Returns: Type Description int int bt_max_peers: int property writable \u00b6 Specify the maximum number of peers per torrent. 0 means unlimited. See also --bt-request-peer-speed-limit option. Default: 55. Returns: Type Description int int bt_metadata_only: bool property writable \u00b6 Download meta data only. The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false. Returns: Type Description bool bool bt_min_crypto_level: str property writable \u00b6 Set minimum level of encryption method (plain/arc4). If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain. Returns: Type Description str str bt_prioritize_piece: str property writable \u00b6 Try to download first and last pieces of each file first (head[= <SIZE> ],tail[= <SIZE> ]). This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head= <SIZE> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail= <SIZE> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used. Returns: Type Description str str bt_remove_unselected_file: bool property writable \u00b6 Removes the unselected files when download is completed in BitTorrent. To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false. Returns: Type Description bool bool bt_request_peer_speed_limit: int property writable \u00b6 If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed. Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K. Returns: Type Description int int bt_require_crypto: bool property writable \u00b6 If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol). Thus aria2 always uses Obfuscation handshake. Default: false. Returns: Type Description bool bool bt_save_metadata: bool property writable \u00b6 Save meta data as \".torrent\" file. This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false. Returns: Type Description bool bool bt_seed_unverified: bool property writable \u00b6 Seed previously downloaded files without verifying piece hashes. Default: false. Returns: Type Description bool bool bt_stop_timeout: int property writable \u00b6 Stop BitTorrent download if download speed is 0 in consecutive SEC seconds. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int bt_tracker: List [ str ] property writable \u00b6 Comma separated list of additional BitTorrent tracker's announce URI. These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed. Returns: Type Description List[str] list of str bt_tracker_connect_timeout: int property writable \u00b6 Set the connect timeout in seconds to establish connection to tracker. After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60. Returns: Type Description int int bt_tracker_interval: int property writable \u00b6 Set the interval in seconds between tracker requests. This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0. Returns: Type Description int int bt_tracker_timeout: int property writable \u00b6 Set timeout in seconds. Default: 60. Returns: Type Description int int ca_certificate: str property writable \u00b6 Use the certificate authorities in FILE to verify the peers. The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification. Note If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificate_set_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup. Note WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store. Returns: Type Description str str certificate: str property writable \u00b6 Use the client certificate in FILE. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --private-key as well. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str check_certificate: bool property writable \u00b6 Verify the peer using certificates specified in --ca-certificate option. Default: true. Returns: Type Description bool bool check_integrity: bool property writable \u00b6 Check file integrity by validating piece hashes or a hash of entire file. This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false. Returns: Type Description bool bool checksum: str property writable \u00b6 Set checksum ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads. Returns: Type Description str str conditional_get: bool property writable \u00b6 Download file only when the local file is older than remote file. This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false. Returns: Type Description bool bool conf_path: str property writable \u00b6 Change the configuration file path to PATH. Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf. Returns: Type Description str str connect_timeout: int property writable \u00b6 Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server. After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60. Returns: Type Description int int console_log_level: str property writable \u00b6 Set log level to output to console. LEVEL is either debug, info, notice, warn or error. Default: notice. Returns: Type Description str str continue_downloads: bool property writable \u00b6 Continue downloading a partially downloaded file. Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads. Returns: Type Description bool bool daemon: bool property writable \u00b6 Run as daemon. The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false. Returns: Type Description bool bool deferred_input: bool property writable \u00b6 If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later. This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false. Warning --deferred-input option will be disabled when --save-session is used together. Returns: Type Description bool bool dht_entry_point: str property writable \u00b6 Set host and port as an entry point to IPv4 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str dht_entry_point6: str property writable \u00b6 Set host and port as an entry point to IPv6 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str dht_file_path: str property writable \u00b6 Change the IPv4 DHT routing table file to PATH. Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat. Returns: Type Description str str dht_file_path6: str property writable \u00b6 Change the IPv6 DHT routing table file to PATH. Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat. Returns: Type Description str str dht_listen_addr6: str property writable \u00b6 Specify address to bind socket for IPv6 DHT. It should be a global unicast IPv6 address of the host. Returns: Type Description str str dht_listen_port: str property writable \u00b6 Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999. Note Make sure that the specified ports are open for incoming UDP traffic. Returns: Type Description str str dht_message_timeout: int property writable \u00b6 Set timeout in seconds. Default: 10. Returns: Type Description int int dir: str property writable \u00b6 The directory to store the downloaded file. Returns: Type Description str str disable_ipv6: bool property writable \u00b6 Disable IPv6. This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false. Returns: Type Description bool bool disk_cache: int property writable \u00b6 Enable disk cache. If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M. Returns: Type Description int int download_result: str property writable \u00b6 This option changes the way Download Results is formatted. If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default. Returns: Type Description str str dry_run: bool property writable \u00b6 If true is given, aria2 just checks whether the remote file is available and doesn't download data. This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false. Returns: Type Description bool bool dscp: str property writable \u00b6 Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS. This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are. Returns: Type Description str str enable_color: bool property writable \u00b6 Enable color output for a terminal. Default: true. Returns: Type Description bool bool enable_dht: bool property writable \u00b6 Enable IPv4 DHT functionality. It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true. Returns: Type Description bool bool enable_dht6: bool property writable \u00b6 Enable IPv6 DHT functionality. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option. Returns: Type Description bool bool enable_http_keep_alive: bool property writable \u00b6 Enable HTTP/1.1 persistent connection. Default: true. Returns: Type Description bool bool enable_http_pipelining: bool property writable \u00b6 Enable HTTP/1.1 pipelining. Default: false. Note In performance perspective, there is usually no advantage to enable this option. Returns: Type Description bool bool enable_mmap: bool property writable \u00b6 Map files into memory. This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false. Returns: Type Description bool bool enable_peer_exchange: bool property writable \u00b6 Enable Peer Exchange extension. If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: true. Returns: Type Description bool bool enable_rpc: bool property writable \u00b6 Enable JSON-RPC/XML-RPC server. It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false Returns: Type Description bool bool event_poll: str property writable \u00b6 Specify the method for polling events. The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use. Returns: Type Description str str file_allocation: str property writable \u00b6 Specify file allocation method. Possible Values: none, prealloc, trunc, falloc. none: doesn't pre-allocate file space. prealloc: pre-allocates file space before download begins. This may take some time depending on the size of the file. falloc: If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have posix_fallocate(3) function. trunc: uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length. Default: prealloc. Warning Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation. Note In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece. Returns: Type Description str str follow_metalink: str property writable \u00b6 If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it. If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true. Returns: Type Description str str follow_torrent: str property writable \u00b6 If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it. If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true. Returns: Type Description str str force_save: bool property writable \u00b6 Save download with --save-session option even if the download is completed or removed. This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false. Returns: Type Description bool bool force_sequential: bool property writable \u00b6 Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities. Default: false. Returns: Type Description bool bool ftp_passwd: str property writable \u00b6 Set FTP password. This affects all URIs. If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@. Returns: Type Description str str ftp_pasv: bool property writable \u00b6 Use the passive mode in FTP. If false is given, the active mode will be used. Default: true. Note This option is ignored for SFTP transfer. Returns: Type Description bool bool ftp_proxy: str property writable \u00b6 Use a proxy server for FTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] Returns: Type Description str str ftp_proxy_passwd: str property writable \u00b6 Set password for --ftp-proxy option. Returns: Type Description str str ftp_proxy_user: str property writable \u00b6 Set user for --ftp-proxy option. Returns: Type Description str str ftp_reuse_connection: bool property writable \u00b6 Reuse connection in FTP. Default: true. Returns: Type Description bool bool ftp_type: str property writable \u00b6 Set FTP transfer type. TYPE is either binary or ascii. Default: binary. Note This option is ignored for SFTP transfer. Returns: Type Description str str ftp_user: str property writable \u00b6 Set FTP user. This affects all URIs. Default: anonymous. Returns: Type Description str str gid: str property writable \u00b6 Set GID manually. aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2. Returns: Type Description str str hash_check_only: bool property writable \u00b6 If true is given, after hash check using --check-integrity option, abort download whether or not download is complete. Default: false. Returns: Type Description bool bool header: str property writable \u00b6 Append HEADER to HTTP request header. You can use this option repeatedly to specify more than one header: $ aria2c --header = \"X-A: b78\" --header = \"X-B: 9J1\" \"http://host/file\" Returns: Type Description str str http_accept_gzip: bool property writable \u00b6 Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding: gzip or Content-Encoding: deflate. Default: false. Note Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header. Returns: Type Description bool bool http_auth_challenge: bool property writable \u00b6 Send HTTP authorization header only when it is requested by the server. If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false. Returns: Type Description bool bool http_no_cache: bool property writable \u00b6 Send Cache-Control: no-cache and Pragma: no-cache header to avoid cached content. If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false. Returns: Type Description bool bool http_passwd: str property writable \u00b6 Set HTTP password. This affects all URIs. Returns: Type Description str str http_proxy: str property writable \u00b6 Use a proxy server for HTTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] Returns: Type Description str str http_proxy_passwd: str property writable \u00b6 Set password for --http-proxy. Returns: Type Description str str http_proxy_user: str property writable \u00b6 Set user for --http-proxy. Returns: Type Description str str http_user: str property writable \u00b6 Set HTTP user. This affects all URIs. Returns: Type Description str str https_proxy: str property writable \u00b6 Use a proxy server for HTTPS. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]. Returns: Type Description str str https_proxy_passwd: str property writable \u00b6 Set password for --https-proxy. Returns: Type Description str str https_proxy_user: str property writable \u00b6 Set user for --https-proxy. Returns: Type Description str str human_readable: bool property writable \u00b6 Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout. Default: true. Returns: Type Description bool bool index_out: str property writable \u00b6 Set file path for file with index=INDEX ( <INDEX>=<PATH> ). You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads. Returns: Type Description str str input_file: str property writable \u00b6 Downloads the URIs listed in FILE. You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option. Returns: Type Description str str interface: str property writable \u00b6 Bind sockets to given interface. You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name. Note If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name. Returns: Type Description str str keep_unfinished_download_result: bool property writable \u00b6 Keep unfinished download results even if doing so exceeds --max-download-result. This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true. Returns: Type Description bool bool listen_port: str property writable \u00b6 Set TCP port number for BitTorrent downloads. Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999 Note Make sure that the specified ports are open for incoming TCP traffic. Returns: Type Description str str load_cookies: str property writable \u00b6 Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format. Note If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format. Returns: Type Description str str log: str property writable \u00b6 The file name of the log file. If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all. Returns: Type Description str str log_level: str property writable \u00b6 Set log level to output. LEVEL is either debug, info, notice, warn or error. Default: debug. Returns: Type Description str str lowest_speed_limit: int property writable \u00b6 Close connection if download speed is lower than or equal to this value(bytes per sec). 0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0. Returns: Type Description int int max_concurrent_downloads: int property writable \u00b6 Set the maximum number of parallel downloads for every queue item. See also the --split option. Default: 5. Returns: Type Description int int max_connection_per_server: int property writable \u00b6 The maximum number of connections to one server for each download. Default: 1. Returns: Type Description int int max_download_limit: int property writable \u00b6 Set max download speed per each download in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0. Returns: Type Description int int max_download_result: int property writable \u00b6 Set maximum number of download result kept in memory. The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000. Returns: Type Description int int max_file_not_found: int property writable \u00b6 If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail. Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too. Default: 0. Returns: Type Description int int max_mmap_limit: int property writable \u00b6 Set the maximum file size to enable mmap (see --enable-mmap option). The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807. Returns: Type Description int int max_overall_download_limit: int property writable \u00b6 Set max overall download speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0. Returns: Type Description int int max_overall_upload_limit: int property writable \u00b6 Set max overall upload speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0. Returns: Type Description int int max_resume_failure_tries: int property writable \u00b6 When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume. If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0. Returns: Type Description int int max_tries: int property writable \u00b6 Set number of tries. 0 means unlimited. See also --retry-wait. Default: 5. Returns: Type Description int int max_upload_limit: int property writable \u00b6 Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0. Returns: Type Description int int metalink_base_uri: str property writable \u00b6 Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk. If URI points to a directory, URI must end with /. Returns: Type Description str str metalink_enable_unique_protocol: bool property writable \u00b6 If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them. Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true. Returns: Type Description bool bool metalink_file: str property writable \u00b6 The file path to \".meta4\" and \".metalink\" file. Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file. Returns: Type Description str str metalink_language: str property writable \u00b6 The language of the file to download. Returns: Type Description str str metalink_location: List [ str ] property writable \u00b6 The location of the preferred server. A comma-delimited list of locations is acceptable, for example, jp,us. Returns: Type Description List[str] list of str metalink_os: str property writable \u00b6 The operating system of the file to download. Returns: Type Description str str metalink_preferred_protocol: str property writable \u00b6 Specify preferred protocol. The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none. Returns: Type Description str str metalink_version: str property writable \u00b6 The version of the file to download. Returns: Type Description str str min_split_size: int property writable \u00b6 aria2 does not split less than 2*SIZE byte range. For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB) and [10MiB-20MiB) and download it using 2 sources(if --split > = 2, of course). If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M Returns: Type Description int int min_tls_version: str property writable \u00b6 Specify minimum SSL/TLS version to enable. Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1. Returns: Type Description str str multiple_interface: List [ str ] property writable \u00b6 Comma separated list of interfaces to bind sockets to. Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname. Returns: Type Description List[str] list of str netrc_path: str property writable \u00b6 Specify the path to the netrc file. Default: $(HOME)/.netrc. Note Permission of the .netrc file must be 600. Otherwise, the file will be ignored. Returns: Type Description str str no_conf: bool property writable \u00b6 Disable loading aria2.conf file. Returns: Type Description bool bool no_file_allocation_limit: int property writable \u00b6 No file allocation is made for files whose size is smaller than SIZE. You can append K or M (1K = 1024, 1M = 1024K). Default: 5M. Returns: Type Description int int no_netrc: bool property writable \u00b6 Disable netrc support. netrc support is enabled by default. Note netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption(). Returns: Type Description bool bool no_proxy: str property writable \u00b6 Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used. Note For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses. Returns: Type Description str str on_bt_download_complete: str property writable \u00b6 For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over. On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_complete: str property writable \u00b6 Set the command to be executed after download completed. See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str on_download_error: str property writable \u00b6 Set the command to be executed after download aborted due to error. See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str on_download_pause: str property writable \u00b6 Set the command to be executed after download was paused. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_start: str property writable \u00b6 Set the command to be executed after download got started. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_stop: str property writable \u00b6 Set the command to be executed after download stopped. You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str optimize_concurrent_downloads: str property writable \u00b6 Optimizes the number of concurrent downloads according to the bandwidth available ( true|false|<A>:<B> ). aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false. Returns: Type Description str str out: str property writable \u00b6 The file name of the downloaded file. It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored. Note You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option. Example: $ aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\" Returns: Type Description str str parameterized_uri: bool property writable \u00b6 Enable parameterized URI support. You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter: http://host/image[000-100:2].img. A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false. Returns: Type Description bool bool pause: bool property writable \u00b6 Pause download after added. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool pause_metadata: bool property writable \u00b6 Pause downloads created as a result of metadata download. There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool peer_id_prefix: str property writable \u00b6 Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes. Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-. Returns: Type Description str str piece_length: str property writable \u00b6 Set a piece length for HTTP/FTP downloads. This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M. Note The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining. Returns: Type Description str str private_key: str property writable \u00b6 Use the private key in FILE. The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option. Returns: Type Description str str proxy_method: str property writable \u00b6 Set the method to use in proxy request. METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get Returns: Type Description str str quiet: bool property writable \u00b6 Make aria2 quiet (no console output). Default: false. Returns: Type Description bool bool realtime_chunk_checksum: bool property writable \u00b6 Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided. Default: true. Returns: Type Description bool bool referer: str property writable \u00b6 Set an http referrer (Referer). This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option. Returns: Type Description str str remote_time: bool property writable \u00b6 Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file. Default: false. Returns: Type Description bool bool remove_control_file: bool property writable \u00b6 Remove control file before download. Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume. Returns: Type Description bool bool retry_wait: int property writable \u00b6 Set the seconds to wait between retries. When SEC >` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0. Returns: Type Description int int reuse_uri: bool property writable \u00b6 Reuse already used URIs if no unused URIs are left. Default: true. Returns: Type Description bool bool rlimit_nofile: int property writable \u00b6 Set the soft limit of open file descriptors. This open will only have effect when: a. The system supports it (posix) b. The limit does not exceed the hard limit. c. The specified limit is larger than the current soft limit. This is equivalent to setting nofile via ulimit, except that it will never decrease the limit. This option is only available on systems supporting the rlimit API. Returns: Type Description int int rpc_allow_origin_all: bool property writable \u00b6 Add Access-Control-Allow-Origin header field with value * to the RPC response. Default: false. Returns: Type Description bool bool rpc_certificate: str property writable \u00b6 Use the certificate in FILE for RPC server. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str rpc_listen_all: bool property writable \u00b6 Listen incoming JSON-RPC/XML-RPC requests on all network interfaces. If false is given, listen only on local loopback interface. Default: false. Returns: Type Description bool bool rpc_listen_port: int property writable \u00b6 Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024-65535. Default: 6800. Returns: Type Description int int rpc_max_request_size: str property writable \u00b6 Set max size of JSON-RPC/XML-RPC request in bytes. If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M. Returns: Type Description str str rpc_passwd: str property writable \u00b6 Set JSON-RPC/XML-RPC password. Warning --rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str rpc_private_key: str property writable \u00b6 Use the private key in FILE for RPC server. The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option. Returns: Type Description str str rpc_save_upload_metadata: bool property writable \u00b6 Save the uploaded torrent or metalink meta data in the directory specified by --dir option. The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true. Returns: Type Description bool bool rpc_secret: str property writable \u00b6 Set RPC secret authorization token. Read RPC authorization secret token to know how this option value is used. Returns: Type Description str str rpc_secure: bool property writable \u00b6 RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key. Returns: Type Description bool bool rpc_user: str property writable \u00b6 Set JSON-RPC/XML-RPC user. Warning --rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str save_cookies: str property writable \u00b6 Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format. If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file. Returns: Type Description str str save_not_found: bool property writable \u00b6 Save download with --save-session option even if the file was not found on the server. This option also saves control file in that situations. Default: true. Returns: Type Description bool bool save_session: str property writable \u00b6 Save error/unfinished downloads to FILE on exit. You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below. Note Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions. magnet URI, and followed by torrent download: GID of BitTorrent meta data download is saved. URI to torrent file, and followed by torrent download: GID of torrent file download is saved. URI to metalink file, and followed by file downloads described in metalink file: GID of metalink file download is saved. local torrent file: GID of torrent download is saved. local metalink file: Any meaningful GID is not saved. Returns: Type Description str str save_session_interval: int property writable \u00b6 Save error/unfinished downloads to a file specified by --save-session option every SEC seconds. If 0 is given, file will be saved only when aria2 exits. Default: 0. Returns: Type Description int int seed_ratio: float property writable \u00b6 Specify share ratio. Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0. Returns: Type Description float float seed_time: float property writable \u00b6 Specify seeding time in (fractional) minutes. Also see the --seed-ratio option. Note Specifying --seed-time=0 disables seeding after download completed. Returns: Type Description float float select_file: str property writable \u00b6 Set file to download by specifying its index. You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options). Note In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files. Returns: Type Description str str server_stat_if: str property writable \u00b6 Specify the file name to load performance profile of the servers. The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format. Returns: Type Description str str server_stat_of: str property writable \u00b6 Specify the file name to which performance profile of the servers is saved. You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format. Returns: Type Description str str server_stat_timeout: int property writable \u00b6 Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them. Default: 86400 (24hours). Returns: Type Description int int show_console_readout: bool property writable \u00b6 Show console readout. Default: true. Returns: Type Description bool bool show_files: bool property writable \u00b6 Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit. In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed. Returns: Type Description bool bool socket_recv_buffer_size: int property writable \u00b6 Set the maximum socket receive buffer in bytes. Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0. Returns: Type Description int int split: int property writable \u00b6 Download a file using N connections. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5 Note Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N. Returns: Type Description int int ssh_host_key_md: str property writable \u00b6 Set checksum for SSH host public key ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place. Returns: Type Description str str stderr: bool property writable \u00b6 Redirect all console output that would be otherwise printed in stdout to stderr. Default: false. Returns: Type Description bool bool stop: int property writable \u00b6 Stop application after SEC seconds has passed. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int stop_with_process: int property writable \u00b6 Stop application when process PID is not running. This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself. Returns: Type Description int int stream_piece_selector: str property writable \u00b6 Specify piece selection algorithm used in HTTP/FTP download. Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default. Returns: Type Description str str summary_interval: int property writable \u00b6 Set interval in seconds to output download progress summary. Setting 0 suppresses the output. Default: 60. Returns: Type Description int int timeout: int property writable \u00b6 Set timeout in seconds. Default: 60. Returns: Type Description int int torrent_file: str property writable \u00b6 The path to the \".torrent\" file. You are not required to use this option because you can specify \".torrent\" files without --torrent-file. Returns: Type Description str str truncate_console_readout: bool property writable \u00b6 Truncate console readout to fit in a single line. Default: true. Returns: Type Description bool bool uri_selector: str property writable \u00b6 Specify URI selection algorithm. The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback. Returns: Type Description str str use_head: bool property writable \u00b6 Use HEAD method for the first request to the HTTP server. Default: false. Returns: Type Description bool bool user_agent: str property writable \u00b6 Set user agent for HTTP(S) downloads. Default: aria2/$VERSION, $VERSION is replaced by package version. Returns: Type Description str str __init__ ( self , api , struct , download = None ) special \u00b6 Initialization method. Parameters: Name Type Description Default api aria2p.api.API the reference to an [ API ][aria2p.api.API] instance. required struct dict a dictionary Python object returned by the JSON-RPC client. required download aria2p.downloads.Download an optional [ Download ][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. None Source code in aria2p/options.py 32 33 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , api : \"aria2p.api.API\" , struct : dict , download : \"aria2p.downloads.Download\" = None ): \"\"\" Initialization method. Parameters: api: the reference to an [`API`][aria2p.api.API] instance. struct: a dictionary Python object returned by the JSON-RPC client. download: an optional [`Download`][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. \"\"\" self . api = api self . download = download self . _struct = struct or {} get ( self , item , cls = None ) \u00b6 Get the value of an option given its name. Parameters: Name Type Description Default item str the name of the option (example: \"input-file\"). required cls Union[aria2p.options.GenericMeta, Callable] pass the value through this class/function to change its type. None Returns: Type Description Optional[Union[str, int, bool, float]] The option value. Source code in aria2p/options.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def get ( self , item : str , cls : Union [ GenericMeta , Callable ] = None ) -> Union [ str , int , bool , float , None ]: \"\"\" Get the value of an option given its name. Parameters: item: the name of the option (example: \"input-file\"). cls: pass the value through this class/function to change its type. Returns: The option value. \"\"\" value = self . _struct . get ( item ) if cls is not None and value is not None : return cls ( value ) return value get_struct ( self ) \u00b6 Return a copy of the struct dictionary of this Options object. Source code in aria2p/options.py 51 52 53 def get_struct ( self ): \"\"\"Return a copy of the struct dictionary of this Options object.\"\"\" return deepcopy ( self . _struct ) set ( self , key , value ) \u00b6 Set the value of an option given its name. Parameters: Name Type Description Default key str the name of the option (example: \"input-file\"). required value Union[str, int, float, bool] the value to set. required Returns: Type Description bool True if the value was successfully set, False otherwise. Source code in aria2p/options.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def set ( self , key : str , value : Union [ str , int , float , bool ]) -> bool : \"\"\" Set the value of an option given its name. Parameters: key: the name of the option (example: \"input-file\"). value: the value to set. Returns: True if the value was successfully set, False otherwise. \"\"\" if not isinstance ( value , str ): value = str ( value ) if self . download : success = self . api . set_options ({ key : value }, [ self . download ])[ 0 ] else : success = self . api . set_global_options ({ key : value }) if success : self . _struct [ key ] = value return success","title":"options.py"},{"location":"reference/options/#aria2p.options","text":"This module defines the Options class, which holds information retrieved with the get_option or get_global_option methods of the client.","title":"aria2p.options"},{"location":"reference/options/#aria2p.options.Options","text":"This class holds information retrieved with the get_option or get_global_option methods of the client. Instances are given a reference to an [ API ][aria2p.api.API] instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options. The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like options.max_concurrent_downloads = 5 .","title":"Options"},{"location":"reference/options/#aria2p.options.Options.all_proxy","text":"Use a proxy server for all protocols. To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is [http://][ USER:PASSWORD@]HOST[:PORT]. See also ENVIRONMENT section. Note If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd} options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\"http://proxy\" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass. Another example: if you specified on the command-line --http-proxy=\"http://user:pass@proxy\" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass. One more example: if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\"http://user:pass@proxy\", then you'd get HTTP proxy http://proxy with user user and password pass. Returns: Type Description str str","title":"all_proxy"},{"location":"reference/options/#aria2p.options.Options.all_proxy_passwd","text":"Set password for --all-proxy option. Returns: Type Description str str","title":"all_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.all_proxy_user","text":"Set user for --all-proxy option. Returns: Type Description str str","title":"all_proxy_user"},{"location":"reference/options/#aria2p.options.Options.allow_overwrite","text":"Restart download from scratch if the corresponding control file doesn't exist. See also --auto-file-renaming option. Default: false. Returns: Type Description bool bool","title":"allow_overwrite"},{"location":"reference/options/#aria2p.options.Options.allow_piece_length_change","text":"If false is given, aria2 aborts download when a piece length is different from one in a control file. If true is given, you can proceed but some download progress will be lost. Default: false. Returns: Type Description bool bool","title":"allow_piece_length_change"},{"location":"reference/options/#aria2p.options.Options.always_resume","text":"Always resume download. If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true. Returns: Type Description bool bool","title":"always_resume"},{"location":"reference/options/#aria2p.options.Options.are_global","text":"Property to tell if options are global, or tied to a Download object.","title":"are_global"},{"location":"reference/options/#aria2p.options.Options.async_dns","text":"Enable asynchronous DNS. Default: true. Returns: Type Description bool bool","title":"async_dns"},{"location":"reference/options/#aria2p.options.Options.async_dns_server","text":"Comma separated list of DNS server address used in asynchronous DNS resolver. Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it. Returns: Type Description List[str] list of str","title":"async_dns_server"},{"location":"reference/options/#aria2p.options.Options.auto_file_renaming","text":"Rename file name if the same file already exists. This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true. Returns: Type Description bool bool","title":"auto_file_renaming"},{"location":"reference/options/#aria2p.options.Options.auto_save_interval","text":"Save a control file (*.aria2) every SEC seconds. If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60. Returns: Type Description int int","title":"auto_save_interval"},{"location":"reference/options/#aria2p.options.Options.bt_detach_seed_only","text":"Exclude seed only downloads when counting concurrent active downloads (See -j option). This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false. Returns: Type Description bool bool","title":"bt_detach_seed_only"},{"location":"reference/options/#aria2p.options.Options.bt_enable_hook_after_hash_check","text":"Allow hook command invocation after hash check (see -V option) in BitTorrent download. By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true. Returns: Type Description bool bool","title":"bt_enable_hook_after_hash_check"},{"location":"reference/options/#aria2p.options.Options.bt_enable_lpd","text":"Enable Local Peer Discovery. If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false. Returns: Type Description bool bool","title":"bt_enable_lpd"},{"location":"reference/options/#aria2p.options.Options.bt_exclude_tracker","text":"Comma separated list of BitTorrent tracker's announce URI to remove. You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option. Returns: Type Description List[str] list of str","title":"bt_exclude_tracker"},{"location":"reference/options/#aria2p.options.Options.bt_external_ip","text":"Specify the external IP address to use in BitTorrent download and DHT. It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses. Returns: Type Description str str","title":"bt_external_ip"},{"location":"reference/options/#aria2p.options.Options.bt_force_encryption","text":"Requires BitTorrent message payload encryption with arc4. This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false. Returns: Type Description bool bool","title":"bt_force_encryption"},{"location":"reference/options/#aria2p.options.Options.bt_hash_check_seed","text":"If true is given, after hash check using --check-integrity option and file is complete, continue to seed file. If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true Returns: Type Description bool bool","title":"bt_hash_check_seed"},{"location":"reference/options/#aria2p.options.Options.bt_lpd_interface","text":"Use given interface for Local Peer Discovery. If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address. Returns: Type Description str str","title":"bt_lpd_interface"},{"location":"reference/options/#aria2p.options.Options.bt_max_open_files","text":"Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally. Default: 100. Returns: Type Description int int","title":"bt_max_open_files"},{"location":"reference/options/#aria2p.options.Options.bt_max_peers","text":"Specify the maximum number of peers per torrent. 0 means unlimited. See also --bt-request-peer-speed-limit option. Default: 55. Returns: Type Description int int","title":"bt_max_peers"},{"location":"reference/options/#aria2p.options.Options.bt_metadata_only","text":"Download meta data only. The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false. Returns: Type Description bool bool","title":"bt_metadata_only"},{"location":"reference/options/#aria2p.options.Options.bt_min_crypto_level","text":"Set minimum level of encryption method (plain/arc4). If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain. Returns: Type Description str str","title":"bt_min_crypto_level"},{"location":"reference/options/#aria2p.options.Options.bt_prioritize_piece","text":"Try to download first and last pieces of each file first (head[= <SIZE> ],tail[= <SIZE> ]). This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head= <SIZE> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail= <SIZE> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used. Returns: Type Description str str","title":"bt_prioritize_piece"},{"location":"reference/options/#aria2p.options.Options.bt_remove_unselected_file","text":"Removes the unselected files when download is completed in BitTorrent. To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false. Returns: Type Description bool bool","title":"bt_remove_unselected_file"},{"location":"reference/options/#aria2p.options.Options.bt_request_peer_speed_limit","text":"If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed. Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K. Returns: Type Description int int","title":"bt_request_peer_speed_limit"},{"location":"reference/options/#aria2p.options.Options.bt_require_crypto","text":"If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol). Thus aria2 always uses Obfuscation handshake. Default: false. Returns: Type Description bool bool","title":"bt_require_crypto"},{"location":"reference/options/#aria2p.options.Options.bt_save_metadata","text":"Save meta data as \".torrent\" file. This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false. Returns: Type Description bool bool","title":"bt_save_metadata"},{"location":"reference/options/#aria2p.options.Options.bt_seed_unverified","text":"Seed previously downloaded files without verifying piece hashes. Default: false. Returns: Type Description bool bool","title":"bt_seed_unverified"},{"location":"reference/options/#aria2p.options.Options.bt_stop_timeout","text":"Stop BitTorrent download if download speed is 0 in consecutive SEC seconds. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int","title":"bt_stop_timeout"},{"location":"reference/options/#aria2p.options.Options.bt_tracker","text":"Comma separated list of additional BitTorrent tracker's announce URI. These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed. Returns: Type Description List[str] list of str","title":"bt_tracker"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_connect_timeout","text":"Set the connect timeout in seconds to establish connection to tracker. After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60. Returns: Type Description int int","title":"bt_tracker_connect_timeout"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_interval","text":"Set the interval in seconds between tracker requests. This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0. Returns: Type Description int int","title":"bt_tracker_interval"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_timeout","text":"Set timeout in seconds. Default: 60. Returns: Type Description int int","title":"bt_tracker_timeout"},{"location":"reference/options/#aria2p.options.Options.ca_certificate","text":"Use the certificate authorities in FILE to verify the peers. The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification. Note If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificate_set_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup. Note WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store. Returns: Type Description str str","title":"ca_certificate"},{"location":"reference/options/#aria2p.options.Options.certificate","text":"Use the client certificate in FILE. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --private-key as well. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str","title":"certificate"},{"location":"reference/options/#aria2p.options.Options.check_certificate","text":"Verify the peer using certificates specified in --ca-certificate option. Default: true. Returns: Type Description bool bool","title":"check_certificate"},{"location":"reference/options/#aria2p.options.Options.check_integrity","text":"Check file integrity by validating piece hashes or a hash of entire file. This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false. Returns: Type Description bool bool","title":"check_integrity"},{"location":"reference/options/#aria2p.options.Options.checksum","text":"Set checksum ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads. Returns: Type Description str str","title":"checksum"},{"location":"reference/options/#aria2p.options.Options.conditional_get","text":"Download file only when the local file is older than remote file. This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false. Returns: Type Description bool bool","title":"conditional_get"},{"location":"reference/options/#aria2p.options.Options.conf_path","text":"Change the configuration file path to PATH. Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf. Returns: Type Description str str","title":"conf_path"},{"location":"reference/options/#aria2p.options.Options.connect_timeout","text":"Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server. After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60. Returns: Type Description int int","title":"connect_timeout"},{"location":"reference/options/#aria2p.options.Options.console_log_level","text":"Set log level to output to console. LEVEL is either debug, info, notice, warn or error. Default: notice. Returns: Type Description str str","title":"console_log_level"},{"location":"reference/options/#aria2p.options.Options.continue_downloads","text":"Continue downloading a partially downloaded file. Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads. Returns: Type Description bool bool","title":"continue_downloads"},{"location":"reference/options/#aria2p.options.Options.daemon","text":"Run as daemon. The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false. Returns: Type Description bool bool","title":"daemon"},{"location":"reference/options/#aria2p.options.Options.deferred_input","text":"If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later. This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false. Warning --deferred-input option will be disabled when --save-session is used together. Returns: Type Description bool bool","title":"deferred_input"},{"location":"reference/options/#aria2p.options.Options.dht_entry_point","text":"Set host and port as an entry point to IPv4 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str","title":"dht_entry_point"},{"location":"reference/options/#aria2p.options.Options.dht_entry_point6","text":"Set host and port as an entry point to IPv6 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str","title":"dht_entry_point6"},{"location":"reference/options/#aria2p.options.Options.dht_file_path","text":"Change the IPv4 DHT routing table file to PATH. Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat. Returns: Type Description str str","title":"dht_file_path"},{"location":"reference/options/#aria2p.options.Options.dht_file_path6","text":"Change the IPv6 DHT routing table file to PATH. Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat. Returns: Type Description str str","title":"dht_file_path6"},{"location":"reference/options/#aria2p.options.Options.dht_listen_addr6","text":"Specify address to bind socket for IPv6 DHT. It should be a global unicast IPv6 address of the host. Returns: Type Description str str","title":"dht_listen_addr6"},{"location":"reference/options/#aria2p.options.Options.dht_listen_port","text":"Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999. Note Make sure that the specified ports are open for incoming UDP traffic. Returns: Type Description str str","title":"dht_listen_port"},{"location":"reference/options/#aria2p.options.Options.dht_message_timeout","text":"Set timeout in seconds. Default: 10. Returns: Type Description int int","title":"dht_message_timeout"},{"location":"reference/options/#aria2p.options.Options.dir","text":"The directory to store the downloaded file. Returns: Type Description str str","title":"dir"},{"location":"reference/options/#aria2p.options.Options.disable_ipv6","text":"Disable IPv6. This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false. Returns: Type Description bool bool","title":"disable_ipv6"},{"location":"reference/options/#aria2p.options.Options.disk_cache","text":"Enable disk cache. If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M. Returns: Type Description int int","title":"disk_cache"},{"location":"reference/options/#aria2p.options.Options.download_result","text":"This option changes the way Download Results is formatted. If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default. Returns: Type Description str str","title":"download_result"},{"location":"reference/options/#aria2p.options.Options.dry_run","text":"If true is given, aria2 just checks whether the remote file is available and doesn't download data. This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false. Returns: Type Description bool bool","title":"dry_run"},{"location":"reference/options/#aria2p.options.Options.dscp","text":"Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS. This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are. Returns: Type Description str str","title":"dscp"},{"location":"reference/options/#aria2p.options.Options.enable_color","text":"Enable color output for a terminal. Default: true. Returns: Type Description bool bool","title":"enable_color"},{"location":"reference/options/#aria2p.options.Options.enable_dht","text":"Enable IPv4 DHT functionality. It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true. Returns: Type Description bool bool","title":"enable_dht"},{"location":"reference/options/#aria2p.options.Options.enable_dht6","text":"Enable IPv6 DHT functionality. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option. Returns: Type Description bool bool","title":"enable_dht6"},{"location":"reference/options/#aria2p.options.Options.enable_http_keep_alive","text":"Enable HTTP/1.1 persistent connection. Default: true. Returns: Type Description bool bool","title":"enable_http_keep_alive"},{"location":"reference/options/#aria2p.options.Options.enable_http_pipelining","text":"Enable HTTP/1.1 pipelining. Default: false. Note In performance perspective, there is usually no advantage to enable this option. Returns: Type Description bool bool","title":"enable_http_pipelining"},{"location":"reference/options/#aria2p.options.Options.enable_mmap","text":"Map files into memory. This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false. Returns: Type Description bool bool","title":"enable_mmap"},{"location":"reference/options/#aria2p.options.Options.enable_peer_exchange","text":"Enable Peer Exchange extension. If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: true. Returns: Type Description bool bool","title":"enable_peer_exchange"},{"location":"reference/options/#aria2p.options.Options.enable_rpc","text":"Enable JSON-RPC/XML-RPC server. It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false Returns: Type Description bool bool","title":"enable_rpc"},{"location":"reference/options/#aria2p.options.Options.event_poll","text":"Specify the method for polling events. The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use. Returns: Type Description str str","title":"event_poll"},{"location":"reference/options/#aria2p.options.Options.file_allocation","text":"Specify file allocation method. Possible Values: none, prealloc, trunc, falloc. none: doesn't pre-allocate file space. prealloc: pre-allocates file space before download begins. This may take some time depending on the size of the file. falloc: If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have posix_fallocate(3) function. trunc: uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length. Default: prealloc. Warning Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation. Note In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece. Returns: Type Description str str","title":"file_allocation"},{"location":"reference/options/#aria2p.options.Options.follow_metalink","text":"If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it. If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true. Returns: Type Description str str","title":"follow_metalink"},{"location":"reference/options/#aria2p.options.Options.follow_torrent","text":"If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it. If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true. Returns: Type Description str str","title":"follow_torrent"},{"location":"reference/options/#aria2p.options.Options.force_save","text":"Save download with --save-session option even if the download is completed or removed. This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false. Returns: Type Description bool bool","title":"force_save"},{"location":"reference/options/#aria2p.options.Options.force_sequential","text":"Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities. Default: false. Returns: Type Description bool bool","title":"force_sequential"},{"location":"reference/options/#aria2p.options.Options.ftp_passwd","text":"Set FTP password. This affects all URIs. If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@. Returns: Type Description str str","title":"ftp_passwd"},{"location":"reference/options/#aria2p.options.Options.ftp_pasv","text":"Use the passive mode in FTP. If false is given, the active mode will be used. Default: true. Note This option is ignored for SFTP transfer. Returns: Type Description bool bool","title":"ftp_pasv"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy","text":"Use a proxy server for FTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] Returns: Type Description str str","title":"ftp_proxy"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy_passwd","text":"Set password for --ftp-proxy option. Returns: Type Description str str","title":"ftp_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy_user","text":"Set user for --ftp-proxy option. Returns: Type Description str str","title":"ftp_proxy_user"},{"location":"reference/options/#aria2p.options.Options.ftp_reuse_connection","text":"Reuse connection in FTP. Default: true. Returns: Type Description bool bool","title":"ftp_reuse_connection"},{"location":"reference/options/#aria2p.options.Options.ftp_type","text":"Set FTP transfer type. TYPE is either binary or ascii. Default: binary. Note This option is ignored for SFTP transfer. Returns: Type Description str str","title":"ftp_type"},{"location":"reference/options/#aria2p.options.Options.ftp_user","text":"Set FTP user. This affects all URIs. Default: anonymous. Returns: Type Description str str","title":"ftp_user"},{"location":"reference/options/#aria2p.options.Options.gid","text":"Set GID manually. aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2. Returns: Type Description str str","title":"gid"},{"location":"reference/options/#aria2p.options.Options.hash_check_only","text":"If true is given, after hash check using --check-integrity option, abort download whether or not download is complete. Default: false. Returns: Type Description bool bool","title":"hash_check_only"},{"location":"reference/options/#aria2p.options.Options.header","text":"Append HEADER to HTTP request header. You can use this option repeatedly to specify more than one header: $ aria2c --header = \"X-A: b78\" --header = \"X-B: 9J1\" \"http://host/file\" Returns: Type Description str str","title":"header"},{"location":"reference/options/#aria2p.options.Options.http_accept_gzip","text":"Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding: gzip or Content-Encoding: deflate. Default: false. Note Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header. Returns: Type Description bool bool","title":"http_accept_gzip"},{"location":"reference/options/#aria2p.options.Options.http_auth_challenge","text":"Send HTTP authorization header only when it is requested by the server. If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false. Returns: Type Description bool bool","title":"http_auth_challenge"},{"location":"reference/options/#aria2p.options.Options.http_no_cache","text":"Send Cache-Control: no-cache and Pragma: no-cache header to avoid cached content. If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false. Returns: Type Description bool bool","title":"http_no_cache"},{"location":"reference/options/#aria2p.options.Options.http_passwd","text":"Set HTTP password. This affects all URIs. Returns: Type Description str str","title":"http_passwd"},{"location":"reference/options/#aria2p.options.Options.http_proxy","text":"Use a proxy server for HTTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] Returns: Type Description str str","title":"http_proxy"},{"location":"reference/options/#aria2p.options.Options.http_proxy_passwd","text":"Set password for --http-proxy. Returns: Type Description str str","title":"http_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.http_proxy_user","text":"Set user for --http-proxy. Returns: Type Description str str","title":"http_proxy_user"},{"location":"reference/options/#aria2p.options.Options.http_user","text":"Set HTTP user. This affects all URIs. Returns: Type Description str str","title":"http_user"},{"location":"reference/options/#aria2p.options.Options.https_proxy","text":"Use a proxy server for HTTPS. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT]. Returns: Type Description str str","title":"https_proxy"},{"location":"reference/options/#aria2p.options.Options.https_proxy_passwd","text":"Set password for --https-proxy. Returns: Type Description str str","title":"https_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.https_proxy_user","text":"Set user for --https-proxy. Returns: Type Description str str","title":"https_proxy_user"},{"location":"reference/options/#aria2p.options.Options.human_readable","text":"Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout. Default: true. Returns: Type Description bool bool","title":"human_readable"},{"location":"reference/options/#aria2p.options.Options.index_out","text":"Set file path for file with index=INDEX ( <INDEX>=<PATH> ). You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads. Returns: Type Description str str","title":"index_out"},{"location":"reference/options/#aria2p.options.Options.input_file","text":"Downloads the URIs listed in FILE. You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option. Returns: Type Description str str","title":"input_file"},{"location":"reference/options/#aria2p.options.Options.interface","text":"Bind sockets to given interface. You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name. Note If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name. Returns: Type Description str str","title":"interface"},{"location":"reference/options/#aria2p.options.Options.keep_unfinished_download_result","text":"Keep unfinished download results even if doing so exceeds --max-download-result. This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true. Returns: Type Description bool bool","title":"keep_unfinished_download_result"},{"location":"reference/options/#aria2p.options.Options.listen_port","text":"Set TCP port number for BitTorrent downloads. Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999 Note Make sure that the specified ports are open for incoming TCP traffic. Returns: Type Description str str","title":"listen_port"},{"location":"reference/options/#aria2p.options.Options.load_cookies","text":"Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format. Note If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format. Returns: Type Description str str","title":"load_cookies"},{"location":"reference/options/#aria2p.options.Options.log","text":"The file name of the log file. If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all. Returns: Type Description str str","title":"log"},{"location":"reference/options/#aria2p.options.Options.log_level","text":"Set log level to output. LEVEL is either debug, info, notice, warn or error. Default: debug. Returns: Type Description str str","title":"log_level"},{"location":"reference/options/#aria2p.options.Options.lowest_speed_limit","text":"Close connection if download speed is lower than or equal to this value(bytes per sec). 0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0. Returns: Type Description int int","title":"lowest_speed_limit"},{"location":"reference/options/#aria2p.options.Options.max_concurrent_downloads","text":"Set the maximum number of parallel downloads for every queue item. See also the --split option. Default: 5. Returns: Type Description int int","title":"max_concurrent_downloads"},{"location":"reference/options/#aria2p.options.Options.max_connection_per_server","text":"The maximum number of connections to one server for each download. Default: 1. Returns: Type Description int int","title":"max_connection_per_server"},{"location":"reference/options/#aria2p.options.Options.max_download_limit","text":"Set max download speed per each download in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0. Returns: Type Description int int","title":"max_download_limit"},{"location":"reference/options/#aria2p.options.Options.max_download_result","text":"Set maximum number of download result kept in memory. The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000. Returns: Type Description int int","title":"max_download_result"},{"location":"reference/options/#aria2p.options.Options.max_file_not_found","text":"If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail. Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too. Default: 0. Returns: Type Description int int","title":"max_file_not_found"},{"location":"reference/options/#aria2p.options.Options.max_mmap_limit","text":"Set the maximum file size to enable mmap (see --enable-mmap option). The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807. Returns: Type Description int int","title":"max_mmap_limit"},{"location":"reference/options/#aria2p.options.Options.max_overall_download_limit","text":"Set max overall download speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0. Returns: Type Description int int","title":"max_overall_download_limit"},{"location":"reference/options/#aria2p.options.Options.max_overall_upload_limit","text":"Set max overall upload speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0. Returns: Type Description int int","title":"max_overall_upload_limit"},{"location":"reference/options/#aria2p.options.Options.max_resume_failure_tries","text":"When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume. If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0. Returns: Type Description int int","title":"max_resume_failure_tries"},{"location":"reference/options/#aria2p.options.Options.max_tries","text":"Set number of tries. 0 means unlimited. See also --retry-wait. Default: 5. Returns: Type Description int int","title":"max_tries"},{"location":"reference/options/#aria2p.options.Options.max_upload_limit","text":"Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0. Returns: Type Description int int","title":"max_upload_limit"},{"location":"reference/options/#aria2p.options.Options.metalink_base_uri","text":"Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk. If URI points to a directory, URI must end with /. Returns: Type Description str str","title":"metalink_base_uri"},{"location":"reference/options/#aria2p.options.Options.metalink_enable_unique_protocol","text":"If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them. Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true. Returns: Type Description bool bool","title":"metalink_enable_unique_protocol"},{"location":"reference/options/#aria2p.options.Options.metalink_file","text":"The file path to \".meta4\" and \".metalink\" file. Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file. Returns: Type Description str str","title":"metalink_file"},{"location":"reference/options/#aria2p.options.Options.metalink_language","text":"The language of the file to download. Returns: Type Description str str","title":"metalink_language"},{"location":"reference/options/#aria2p.options.Options.metalink_location","text":"The location of the preferred server. A comma-delimited list of locations is acceptable, for example, jp,us. Returns: Type Description List[str] list of str","title":"metalink_location"},{"location":"reference/options/#aria2p.options.Options.metalink_os","text":"The operating system of the file to download. Returns: Type Description str str","title":"metalink_os"},{"location":"reference/options/#aria2p.options.Options.metalink_preferred_protocol","text":"Specify preferred protocol. The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none. Returns: Type Description str str","title":"metalink_preferred_protocol"},{"location":"reference/options/#aria2p.options.Options.metalink_version","text":"The version of the file to download. Returns: Type Description str str","title":"metalink_version"},{"location":"reference/options/#aria2p.options.Options.min_split_size","text":"aria2 does not split less than 2*SIZE byte range. For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB) and [10MiB-20MiB) and download it using 2 sources(if --split > = 2, of course). If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M Returns: Type Description int int","title":"min_split_size"},{"location":"reference/options/#aria2p.options.Options.min_tls_version","text":"Specify minimum SSL/TLS version to enable. Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1. Returns: Type Description str str","title":"min_tls_version"},{"location":"reference/options/#aria2p.options.Options.multiple_interface","text":"Comma separated list of interfaces to bind sockets to. Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname. Returns: Type Description List[str] list of str","title":"multiple_interface"},{"location":"reference/options/#aria2p.options.Options.netrc_path","text":"Specify the path to the netrc file. Default: $(HOME)/.netrc. Note Permission of the .netrc file must be 600. Otherwise, the file will be ignored. Returns: Type Description str str","title":"netrc_path"},{"location":"reference/options/#aria2p.options.Options.no_conf","text":"Disable loading aria2.conf file. Returns: Type Description bool bool","title":"no_conf"},{"location":"reference/options/#aria2p.options.Options.no_file_allocation_limit","text":"No file allocation is made for files whose size is smaller than SIZE. You can append K or M (1K = 1024, 1M = 1024K). Default: 5M. Returns: Type Description int int","title":"no_file_allocation_limit"},{"location":"reference/options/#aria2p.options.Options.no_netrc","text":"Disable netrc support. netrc support is enabled by default. Note netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption(). Returns: Type Description bool bool","title":"no_netrc"},{"location":"reference/options/#aria2p.options.Options.no_proxy","text":"Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used. Note For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses. Returns: Type Description str str","title":"no_proxy"},{"location":"reference/options/#aria2p.options.Options.on_bt_download_complete","text":"For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over. On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_bt_download_complete"},{"location":"reference/options/#aria2p.options.Options.on_download_complete","text":"Set the command to be executed after download completed. See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_complete"},{"location":"reference/options/#aria2p.options.Options.on_download_error","text":"Set the command to be executed after download aborted due to error. See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_error"},{"location":"reference/options/#aria2p.options.Options.on_download_pause","text":"Set the command to be executed after download was paused. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_pause"},{"location":"reference/options/#aria2p.options.Options.on_download_start","text":"Set the command to be executed after download got started. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_start"},{"location":"reference/options/#aria2p.options.Options.on_download_stop","text":"Set the command to be executed after download stopped. You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_stop"},{"location":"reference/options/#aria2p.options.Options.optimize_concurrent_downloads","text":"Optimizes the number of concurrent downloads according to the bandwidth available ( true|false|<A>:<B> ). aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false. Returns: Type Description str str","title":"optimize_concurrent_downloads"},{"location":"reference/options/#aria2p.options.Options.out","text":"The file name of the downloaded file. It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored. Note You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option. Example: $ aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\" Returns: Type Description str str","title":"out"},{"location":"reference/options/#aria2p.options.Options.parameterized_uri","text":"Enable parameterized URI support. You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter: http://host/image[000-100:2].img. A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false. Returns: Type Description bool bool","title":"parameterized_uri"},{"location":"reference/options/#aria2p.options.Options.pause","text":"Pause download after added. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool","title":"pause"},{"location":"reference/options/#aria2p.options.Options.pause_metadata","text":"Pause downloads created as a result of metadata download. There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool","title":"pause_metadata"},{"location":"reference/options/#aria2p.options.Options.peer_id_prefix","text":"Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes. Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-. Returns: Type Description str str","title":"peer_id_prefix"},{"location":"reference/options/#aria2p.options.Options.piece_length","text":"Set a piece length for HTTP/FTP downloads. This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M. Note The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining. Returns: Type Description str str","title":"piece_length"},{"location":"reference/options/#aria2p.options.Options.private_key","text":"Use the private key in FILE. The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option. Returns: Type Description str str","title":"private_key"},{"location":"reference/options/#aria2p.options.Options.proxy_method","text":"Set the method to use in proxy request. METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get Returns: Type Description str str","title":"proxy_method"},{"location":"reference/options/#aria2p.options.Options.quiet","text":"Make aria2 quiet (no console output). Default: false. Returns: Type Description bool bool","title":"quiet"},{"location":"reference/options/#aria2p.options.Options.realtime_chunk_checksum","text":"Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided. Default: true. Returns: Type Description bool bool","title":"realtime_chunk_checksum"},{"location":"reference/options/#aria2p.options.Options.referer","text":"Set an http referrer (Referer). This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option. Returns: Type Description str str","title":"referer"},{"location":"reference/options/#aria2p.options.Options.remote_time","text":"Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file. Default: false. Returns: Type Description bool bool","title":"remote_time"},{"location":"reference/options/#aria2p.options.Options.remove_control_file","text":"Remove control file before download. Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume. Returns: Type Description bool bool","title":"remove_control_file"},{"location":"reference/options/#aria2p.options.Options.retry_wait","text":"Set the seconds to wait between retries. When SEC >` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0. Returns: Type Description int int","title":"retry_wait"},{"location":"reference/options/#aria2p.options.Options.reuse_uri","text":"Reuse already used URIs if no unused URIs are left. Default: true. Returns: Type Description bool bool","title":"reuse_uri"},{"location":"reference/options/#aria2p.options.Options.rlimit_nofile","text":"Set the soft limit of open file descriptors. This open will only have effect when: a. The system supports it (posix) b. The limit does not exceed the hard limit. c. The specified limit is larger than the current soft limit. This is equivalent to setting nofile via ulimit, except that it will never decrease the limit. This option is only available on systems supporting the rlimit API. Returns: Type Description int int","title":"rlimit_nofile"},{"location":"reference/options/#aria2p.options.Options.rpc_allow_origin_all","text":"Add Access-Control-Allow-Origin header field with value * to the RPC response. Default: false. Returns: Type Description bool bool","title":"rpc_allow_origin_all"},{"location":"reference/options/#aria2p.options.Options.rpc_certificate","text":"Use the certificate in FILE for RPC server. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str","title":"rpc_certificate"},{"location":"reference/options/#aria2p.options.Options.rpc_listen_all","text":"Listen incoming JSON-RPC/XML-RPC requests on all network interfaces. If false is given, listen only on local loopback interface. Default: false. Returns: Type Description bool bool","title":"rpc_listen_all"},{"location":"reference/options/#aria2p.options.Options.rpc_listen_port","text":"Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024-65535. Default: 6800. Returns: Type Description int int","title":"rpc_listen_port"},{"location":"reference/options/#aria2p.options.Options.rpc_max_request_size","text":"Set max size of JSON-RPC/XML-RPC request in bytes. If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M. Returns: Type Description str str","title":"rpc_max_request_size"},{"location":"reference/options/#aria2p.options.Options.rpc_passwd","text":"Set JSON-RPC/XML-RPC password. Warning --rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str","title":"rpc_passwd"},{"location":"reference/options/#aria2p.options.Options.rpc_private_key","text":"Use the private key in FILE for RPC server. The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option. Returns: Type Description str str","title":"rpc_private_key"},{"location":"reference/options/#aria2p.options.Options.rpc_save_upload_metadata","text":"Save the uploaded torrent or metalink meta data in the directory specified by --dir option. The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true. Returns: Type Description bool bool","title":"rpc_save_upload_metadata"},{"location":"reference/options/#aria2p.options.Options.rpc_secret","text":"Set RPC secret authorization token. Read RPC authorization secret token to know how this option value is used. Returns: Type Description str str","title":"rpc_secret"},{"location":"reference/options/#aria2p.options.Options.rpc_secure","text":"RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key. Returns: Type Description bool bool","title":"rpc_secure"},{"location":"reference/options/#aria2p.options.Options.rpc_user","text":"Set JSON-RPC/XML-RPC user. Warning --rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str","title":"rpc_user"},{"location":"reference/options/#aria2p.options.Options.save_cookies","text":"Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format. If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file. Returns: Type Description str str","title":"save_cookies"},{"location":"reference/options/#aria2p.options.Options.save_not_found","text":"Save download with --save-session option even if the file was not found on the server. This option also saves control file in that situations. Default: true. Returns: Type Description bool bool","title":"save_not_found"},{"location":"reference/options/#aria2p.options.Options.save_session","text":"Save error/unfinished downloads to FILE on exit. You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below. Note Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions. magnet URI, and followed by torrent download: GID of BitTorrent meta data download is saved. URI to torrent file, and followed by torrent download: GID of torrent file download is saved. URI to metalink file, and followed by file downloads described in metalink file: GID of metalink file download is saved. local torrent file: GID of torrent download is saved. local metalink file: Any meaningful GID is not saved. Returns: Type Description str str","title":"save_session"},{"location":"reference/options/#aria2p.options.Options.save_session_interval","text":"Save error/unfinished downloads to a file specified by --save-session option every SEC seconds. If 0 is given, file will be saved only when aria2 exits. Default: 0. Returns: Type Description int int","title":"save_session_interval"},{"location":"reference/options/#aria2p.options.Options.seed_ratio","text":"Specify share ratio. Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0. Returns: Type Description float float","title":"seed_ratio"},{"location":"reference/options/#aria2p.options.Options.seed_time","text":"Specify seeding time in (fractional) minutes. Also see the --seed-ratio option. Note Specifying --seed-time=0 disables seeding after download completed. Returns: Type Description float float","title":"seed_time"},{"location":"reference/options/#aria2p.options.Options.select_file","text":"Set file to download by specifying its index. You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options). Note In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files. Returns: Type Description str str","title":"select_file"},{"location":"reference/options/#aria2p.options.Options.server_stat_if","text":"Specify the file name to load performance profile of the servers. The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format. Returns: Type Description str str","title":"server_stat_if"},{"location":"reference/options/#aria2p.options.Options.server_stat_of","text":"Specify the file name to which performance profile of the servers is saved. You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format. Returns: Type Description str str","title":"server_stat_of"},{"location":"reference/options/#aria2p.options.Options.server_stat_timeout","text":"Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them. Default: 86400 (24hours). Returns: Type Description int int","title":"server_stat_timeout"},{"location":"reference/options/#aria2p.options.Options.show_console_readout","text":"Show console readout. Default: true. Returns: Type Description bool bool","title":"show_console_readout"},{"location":"reference/options/#aria2p.options.Options.show_files","text":"Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit. In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed. Returns: Type Description bool bool","title":"show_files"},{"location":"reference/options/#aria2p.options.Options.socket_recv_buffer_size","text":"Set the maximum socket receive buffer in bytes. Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0. Returns: Type Description int int","title":"socket_recv_buffer_size"},{"location":"reference/options/#aria2p.options.Options.split","text":"Download a file using N connections. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5 Note Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N. Returns: Type Description int int","title":"split"},{"location":"reference/options/#aria2p.options.Options.ssh_host_key_md","text":"Set checksum for SSH host public key ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place. Returns: Type Description str str","title":"ssh_host_key_md"},{"location":"reference/options/#aria2p.options.Options.stderr","text":"Redirect all console output that would be otherwise printed in stdout to stderr. Default: false. Returns: Type Description bool bool","title":"stderr"},{"location":"reference/options/#aria2p.options.Options.stop","text":"Stop application after SEC seconds has passed. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int","title":"stop"},{"location":"reference/options/#aria2p.options.Options.stop_with_process","text":"Stop application when process PID is not running. This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself. Returns: Type Description int int","title":"stop_with_process"},{"location":"reference/options/#aria2p.options.Options.stream_piece_selector","text":"Specify piece selection algorithm used in HTTP/FTP download. Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default. Returns: Type Description str str","title":"stream_piece_selector"},{"location":"reference/options/#aria2p.options.Options.summary_interval","text":"Set interval in seconds to output download progress summary. Setting 0 suppresses the output. Default: 60. Returns: Type Description int int","title":"summary_interval"},{"location":"reference/options/#aria2p.options.Options.timeout","text":"Set timeout in seconds. Default: 60. Returns: Type Description int int","title":"timeout"},{"location":"reference/options/#aria2p.options.Options.torrent_file","text":"The path to the \".torrent\" file. You are not required to use this option because you can specify \".torrent\" files without --torrent-file. Returns: Type Description str str","title":"torrent_file"},{"location":"reference/options/#aria2p.options.Options.truncate_console_readout","text":"Truncate console readout to fit in a single line. Default: true. Returns: Type Description bool bool","title":"truncate_console_readout"},{"location":"reference/options/#aria2p.options.Options.uri_selector","text":"Specify URI selection algorithm. The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback. Returns: Type Description str str","title":"uri_selector"},{"location":"reference/options/#aria2p.options.Options.use_head","text":"Use HEAD method for the first request to the HTTP server. Default: false. Returns: Type Description bool bool","title":"use_head"},{"location":"reference/options/#aria2p.options.Options.user_agent","text":"Set user agent for HTTP(S) downloads. Default: aria2/$VERSION, $VERSION is replaced by package version. Returns: Type Description str str","title":"user_agent"},{"location":"reference/options/#aria2p.options.Options.__init__","text":"Initialization method. Parameters: Name Type Description Default api aria2p.api.API the reference to an [ API ][aria2p.api.API] instance. required struct dict a dictionary Python object returned by the JSON-RPC client. required download aria2p.downloads.Download an optional [ Download ][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. None Source code in aria2p/options.py 32 33 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , api : \"aria2p.api.API\" , struct : dict , download : \"aria2p.downloads.Download\" = None ): \"\"\" Initialization method. Parameters: api: the reference to an [`API`][aria2p.api.API] instance. struct: a dictionary Python object returned by the JSON-RPC client. download: an optional [`Download`][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. \"\"\" self . api = api self . download = download self . _struct = struct or {}","title":"__init__()"},{"location":"reference/options/#aria2p.options.Options.get","text":"Get the value of an option given its name. Parameters: Name Type Description Default item str the name of the option (example: \"input-file\"). required cls Union[aria2p.options.GenericMeta, Callable] pass the value through this class/function to change its type. None Returns: Type Description Optional[Union[str, int, bool, float]] The option value. Source code in aria2p/options.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def get ( self , item : str , cls : Union [ GenericMeta , Callable ] = None ) -> Union [ str , int , bool , float , None ]: \"\"\" Get the value of an option given its name. Parameters: item: the name of the option (example: \"input-file\"). cls: pass the value through this class/function to change its type. Returns: The option value. \"\"\" value = self . _struct . get ( item ) if cls is not None and value is not None : return cls ( value ) return value","title":"get()"},{"location":"reference/options/#aria2p.options.Options.get_struct","text":"Return a copy of the struct dictionary of this Options object. Source code in aria2p/options.py 51 52 53 def get_struct ( self ): \"\"\"Return a copy of the struct dictionary of this Options object.\"\"\" return deepcopy ( self . _struct )","title":"get_struct()"},{"location":"reference/options/#aria2p.options.Options.set","text":"Set the value of an option given its name. Parameters: Name Type Description Default key str the name of the option (example: \"input-file\"). required value Union[str, int, float, bool] the value to set. required Returns: Type Description bool True if the value was successfully set, False otherwise. Source code in aria2p/options.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def set ( self , key : str , value : Union [ str , int , float , bool ]) -> bool : \"\"\" Set the value of an option given its name. Parameters: key: the name of the option (example: \"input-file\"). value: the value to set. Returns: True if the value was successfully set, False otherwise. \"\"\" if not isinstance ( value , str ): value = str ( value ) if self . download : success = self . api . set_options ({ key : value }, [ self . download ])[ 0 ] else : success = self . api . set_global_options ({ key : value }) if success : self . _struct [ key ] = value return success","title":"set()"},{"location":"reference/stats/","text":"\u00b6 This module defines the Stats class, which holds information retrieved with the get_global_stat method of the client. Stats \u00b6 This class holds information retrieved with the get_global_stat method of the client. download_speed: int property readonly \u00b6 Overall download speed (byte/sec). num_active: int property readonly \u00b6 The number of active downloads. num_stopped: int property readonly \u00b6 The number of stopped downloads in the current session. This value is capped by the --max-download-result option. num_stopped_total: int property readonly \u00b6 The number of stopped downloads in the current session and not capped by the --max-download-result option. num_waiting: int property readonly \u00b6 The number of waiting downloads. upload_speed: int property readonly \u00b6 Overall upload speed(byte/sec). __init__ ( self , struct ) special \u00b6 Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/stats.py 11 12 13 14 15 16 17 18 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Parameters: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} download_speed_string ( self , human_readable = True ) \u00b6 Return the download speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/stats.py 25 26 27 28 29 30 31 32 33 34 35 36 37 def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Parameters: human_readable: return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\" upload_speed_string ( self , human_readable = True ) \u00b6 Return the upload speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/stats.py 44 45 46 47 48 49 50 51 52 53 54 55 56 def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Parameters: human_readable: return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"stats.py"},{"location":"reference/stats/#aria2p.stats","text":"This module defines the Stats class, which holds information retrieved with the get_global_stat method of the client.","title":"aria2p.stats"},{"location":"reference/stats/#aria2p.stats.Stats","text":"This class holds information retrieved with the get_global_stat method of the client.","title":"Stats"},{"location":"reference/stats/#aria2p.stats.Stats.download_speed","text":"Overall download speed (byte/sec).","title":"download_speed"},{"location":"reference/stats/#aria2p.stats.Stats.num_active","text":"The number of active downloads.","title":"num_active"},{"location":"reference/stats/#aria2p.stats.Stats.num_stopped","text":"The number of stopped downloads in the current session. This value is capped by the --max-download-result option.","title":"num_stopped"},{"location":"reference/stats/#aria2p.stats.Stats.num_stopped_total","text":"The number of stopped downloads in the current session and not capped by the --max-download-result option.","title":"num_stopped_total"},{"location":"reference/stats/#aria2p.stats.Stats.num_waiting","text":"The number of waiting downloads.","title":"num_waiting"},{"location":"reference/stats/#aria2p.stats.Stats.upload_speed","text":"Overall upload speed(byte/sec).","title":"upload_speed"},{"location":"reference/stats/#aria2p.stats.Stats.__init__","text":"Initialization method. Parameters: Name Type Description Default struct dict a dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/stats.py 11 12 13 14 15 16 17 18 def __init__ ( self , struct : dict ) -> None : \"\"\" Initialization method. Parameters: struct: a dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/stats/#aria2p.stats.Stats.download_speed_string","text":"Return the download speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/stats.py 25 26 27 28 29 30 31 32 33 34 35 36 37 def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Parameters: human_readable: return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\"","title":"download_speed_string()"},{"location":"reference/stats/#aria2p.stats.Stats.upload_speed_string","text":"Return the upload speed as string. Parameters: Name Type Description Default human_readable bool return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/stats.py 44 45 46 47 48 49 50 51 52 53 54 55 56 def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Parameters: human_readable: return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"upload_speed_string()"},{"location":"reference/utils/","text":"\u00b6 Utils module. This module contains simple utility classes and functions. SignalHandler \u00b6 A helper class to handle signals. __bool__ ( self ) special \u00b6 Return True when one of the given signal was received, False otherwise. Source code in aria2p/utils.py 32 33 34 def __bool__ ( self ): \"\"\"Return True when one of the given signal was received, False otherwise.\"\"\" return self . triggered __init__ ( self , signals ) special \u00b6 Initialization method. Parameters: Name Type Description Default signals List[str] List of signals names as found in the signal module (example: SIGTERM). required Source code in aria2p/utils.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def __init__ ( self , signals : List [ str ]) -> None : \"\"\" Initialization method. Args: signals: List of signals names as found in the ``signal`` module (example: SIGTERM). \"\"\" logger . debug ( \"Signal handler: handling signals \" + \", \" . join ( signals )) self . triggered = False for sig in signals : try : signal . signal ( signal . Signals [ sig ], self . trigger ) except ValueError as error : logger . error ( f \"Failed to setup signal handler for { sig } : { error } \" ) trigger ( self , signum , frame ) \u00b6 Mark this instance as 'triggered' (a specified signal was received). Source code in aria2p/utils.py 37 38 39 40 def trigger ( self , signum , frame ) -> None : \"\"\"Mark this instance as 'triggered' (a specified signal was received).\"\"\" logger . debug ( f \"Signal handler: caught signal { signal . Signals ( signum ) . name } ( { signum } )\" ) self . triggered = True Version \u00b6 Helper class to manipulate version numbers. bool_or_value ( value ) \u00b6 Return True for 'true', False for 'false', original value otherwise. Source code in aria2p/utils.py 105 106 107 108 109 110 111 def bool_or_value ( value ): \"\"\"Return True for 'true', False for 'false', original value otherwise.\"\"\" if value == \"true\" : return True if value == \"false\" : return False return value bool_to_str ( value ) \u00b6 Return 'true' for True, 'false' for False, original value otherwise. Source code in aria2p/utils.py 114 115 116 117 118 119 120 def bool_to_str ( value ): \"\"\"Return 'true' for True, 'false' for False, original value otherwise.\"\"\" if value is True : return \"true\" if value is False : return \"false\" return value human_readable_bytes ( value , digits = 2 , delim = '' , postfix = '' ) \u00b6 Return a human-readable bytes value as a string. Parameters: Name Type Description Default value int the bytes value. required digits int how many decimal digits to use. 2 delim str string to add between value and unit. '' postfix str string to add at the end. '' Returns: Type Description str The human-readable version of the bytes. Source code in aria2p/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def human_readable_bytes ( value : int , digits : int = 2 , delim : str = \"\" , postfix : str = \"\" ) -> str : \"\"\" Return a human-readable bytes value as a string. Parameters: value: the bytes value. digits: how many decimal digits to use. delim: string to add between value and unit. postfix: string to add at the end. Returns: The human-readable version of the bytes. \"\"\" chosen_unit = \"B\" for unit in ( \"KiB\" , \"MiB\" , \"GiB\" , \"TiB\" ): if value > 1000 : value /= 1024 chosen_unit = unit else : break return f \" { value : . { digits } f } \" + delim + chosen_unit + postfix human_readable_timedelta ( value , precision = 0 ) \u00b6 Return a human-readable time delta as a string. Source code in aria2p/utils.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def human_readable_timedelta ( value : timedelta , precision : int = 0 ) -> str : \"\"\"Return a human-readable time delta as a string.\"\"\" pieces = [] if value . days : pieces . append ( f \" { value . days } d\" ) seconds = value . seconds if seconds >= 3600 : hours = int ( seconds / 3600 ) pieces . append ( f \" { hours } h\" ) seconds -= hours * 3600 if seconds >= 60 : minutes = int ( seconds / 60 ) pieces . append ( f \" { minutes } m\" ) seconds -= minutes * 60 if seconds > 0 or not pieces : pieces . append ( f \" { seconds } s\" ) if not precision : return \"\" . join ( pieces ) return \"\" . join ( pieces [: precision ])","title":"utils.py"},{"location":"reference/utils/#aria2p.utils","text":"Utils module. This module contains simple utility classes and functions.","title":"aria2p.utils"},{"location":"reference/utils/#aria2p.utils.SignalHandler","text":"A helper class to handle signals.","title":"SignalHandler"},{"location":"reference/utils/#aria2p.utils.SignalHandler.__bool__","text":"Return True when one of the given signal was received, False otherwise. Source code in aria2p/utils.py 32 33 34 def __bool__ ( self ): \"\"\"Return True when one of the given signal was received, False otherwise.\"\"\" return self . triggered","title":"__bool__()"},{"location":"reference/utils/#aria2p.utils.SignalHandler.__init__","text":"Initialization method. Parameters: Name Type Description Default signals List[str] List of signals names as found in the signal module (example: SIGTERM). required Source code in aria2p/utils.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def __init__ ( self , signals : List [ str ]) -> None : \"\"\" Initialization method. Args: signals: List of signals names as found in the ``signal`` module (example: SIGTERM). \"\"\" logger . debug ( \"Signal handler: handling signals \" + \", \" . join ( signals )) self . triggered = False for sig in signals : try : signal . signal ( signal . Signals [ sig ], self . trigger ) except ValueError as error : logger . error ( f \"Failed to setup signal handler for { sig } : { error } \" )","title":"__init__()"},{"location":"reference/utils/#aria2p.utils.SignalHandler.trigger","text":"Mark this instance as 'triggered' (a specified signal was received). Source code in aria2p/utils.py 37 38 39 40 def trigger ( self , signum , frame ) -> None : \"\"\"Mark this instance as 'triggered' (a specified signal was received).\"\"\" logger . debug ( f \"Signal handler: caught signal { signal . Signals ( signum ) . name } ( { signum } )\" ) self . triggered = True","title":"trigger()"},{"location":"reference/utils/#aria2p.utils.Version","text":"Helper class to manipulate version numbers.","title":"Version"},{"location":"reference/utils/#aria2p.utils.bool_or_value","text":"Return True for 'true', False for 'false', original value otherwise. Source code in aria2p/utils.py 105 106 107 108 109 110 111 def bool_or_value ( value ): \"\"\"Return True for 'true', False for 'false', original value otherwise.\"\"\" if value == \"true\" : return True if value == \"false\" : return False return value","title":"bool_or_value()"},{"location":"reference/utils/#aria2p.utils.bool_to_str","text":"Return 'true' for True, 'false' for False, original value otherwise. Source code in aria2p/utils.py 114 115 116 117 118 119 120 def bool_to_str ( value ): \"\"\"Return 'true' for True, 'false' for False, original value otherwise.\"\"\" if value is True : return \"true\" if value is False : return \"false\" return value","title":"bool_to_str()"},{"location":"reference/utils/#aria2p.utils.human_readable_bytes","text":"Return a human-readable bytes value as a string. Parameters: Name Type Description Default value int the bytes value. required digits int how many decimal digits to use. 2 delim str string to add between value and unit. '' postfix str string to add at the end. '' Returns: Type Description str The human-readable version of the bytes. Source code in aria2p/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def human_readable_bytes ( value : int , digits : int = 2 , delim : str = \"\" , postfix : str = \"\" ) -> str : \"\"\" Return a human-readable bytes value as a string. Parameters: value: the bytes value. digits: how many decimal digits to use. delim: string to add between value and unit. postfix: string to add at the end. Returns: The human-readable version of the bytes. \"\"\" chosen_unit = \"B\" for unit in ( \"KiB\" , \"MiB\" , \"GiB\" , \"TiB\" ): if value > 1000 : value /= 1024 chosen_unit = unit else : break return f \" { value : . { digits } f } \" + delim + chosen_unit + postfix","title":"human_readable_bytes()"},{"location":"reference/utils/#aria2p.utils.human_readable_timedelta","text":"Return a human-readable time delta as a string. Source code in aria2p/utils.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def human_readable_timedelta ( value : timedelta , precision : int = 0 ) -> str : \"\"\"Return a human-readable time delta as a string.\"\"\" pieces = [] if value . days : pieces . append ( f \" { value . days } d\" ) seconds = value . seconds if seconds >= 3600 : hours = int ( seconds / 3600 ) pieces . append ( f \" { hours } h\" ) seconds -= hours * 3600 if seconds >= 60 : minutes = int ( seconds / 60 ) pieces . append ( f \" { minutes } m\" ) seconds -= minutes * 60 if seconds > 0 or not pieces : pieces . append ( f \" { seconds } s\" ) if not precision : return \"\" . join ( pieces ) return \"\" . join ( pieces [: precision ])","title":"human_readable_timedelta()"}]}