{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aria2p \u00a4 Command-line tool and Python library to interact with an aria2c daemon process through JSON-RPC. To avoid confusion: aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2c is the name of the command-line executable provided by aria2 . It can act as a daemon. aria2p ( p for Python) is a command-line client that can interact with an aria2c daemon. It is not an official client. There are other Python packages allowing you to interact with an aria2c daemon. These other packages do not offer enough usability (in my opinion), this is why I'm developing aria2p . Purpose : aria2c can run in the foreground, for one-time downloads, or in the background, as a daemon. This is where aria2p intervenes: when an instance of aria2c is running in the background, aria2p will be able to communicate with it to add downloads to the queue, remove, pause or resume them, etc. In order for aria2p to be able to communicate with the aria2c process, RPC mode must be enabled with the --enable-rpc option of aria2c . RPC stands for Remote Procedure Call . Although aria2c supports both JSON-RPC and XML-RPC protocols, aria2p works with JSON only (not XML). More information about how to configure aria2c to run as a daemon with RPC mode enabled can be found in the Configuration section of the documentation. Table of contents Requirements Installation Usage as a library Usage on the command line Troubleshoot Support Requirements \u00a4 aria2p requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 You must also install aria2 . On systems with apt-get : sudo apt-get install aria2 Installation \u00a4 With pip : python3.6 -m pip install aria2p [ tui ] With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 aria2p [ tui ] The tui extra is needed for the interactive interface. If you don't need the interface (for example when you are writing a Python package with a dependency to aria2p), simply install aria2p without any extra. Usage (as a library) \u00a4 This library is still a work in progress. More examples will be added later. In the meantime, you can read the Reference section on the official documentation. import aria2p # initialization, these are the default values aria2 = aria2p . API ( aria2p . Client ( host = \"http://localhost\" , port = 6800 , secret = \"\" ) ) # list downloads downloads = aria2 . get_downloads () for download in downloads : print ( download . name , download . download_speed ) # add downloads magnet_uri = \"magnet:?xt=urn:...\" download = aria2 . add_magnet ( magnet_uri ) Usage (command-line) \u00a4 usage: aria2p [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...] Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC. Global options: -h, --help Show this help message and exit. Commands also accept the -h/--help option. -p PORT, --port PORT Port to use to connect to the remote server. -H HOST, --host HOST Host address for the remote server. -s SECRET, --secret SECRET Secret token to use to connect to the remote server. -L {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}, --log-level {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL} Log level to use -P LOG_PATH, --log-path LOG_PATH Log path to use. Can be a directory or a file. -T CLIENT_TIMEOUT, --client-timeout CLIENT_TIMEOUT Timeout in seconds for requests to the remote server. Floats supported. Default: 60.0. Commands: add Add downloads with URIs/Magnets/torrents/Metalinks. add-magnets (add-magnet) Add downloads with Magnet URIs. add-metalinks (add-metalink) Add downloads with Metalink files. add-torrents (add-torrent) Add downloads with torrent files. autopurge (autoclear) Automatically purge completed/removed/failed downloads. call Call a remote method through the JSON-RPC client. pause (stop) Pause downloads. remove (rm, del, delete) Remove downloads. resume (start) Resume downloads. show Show the download progression. top Launch the top-like interactive interface. listen Listen to notifications. Calling aria2p without any arguments will by default call the top command, which is a console interactive interface. Commands: add add-magnets add-metalinks add-torrents autopurge call listen pause remove resume show top add \u00a4 usage: aria2p add [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with URIs/Magnets/torrents/Metalinks. positional arguments: uris The URIs/file-paths to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file. add-magnets \u00a4 usage: aria2p add-magnets [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with Magnet URIs. positional arguments: uris The magnet URIs to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file. add-metalinks \u00a4 usage: aria2p add-metalinks [-h] [-f FROM_FILE] [metalink_files [metalink_files ...]] Add downloads with Metalink files. positional arguments: metalink_files The paths to the metalink files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file. add-torrents \u00a4 usage: aria2p add-torrents [-h] [-f FROM_FILE] [torrent_files [torrent_files ...]] Add downloads with torrent files. positional arguments: torrent_files The paths to the torrent files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file. autopurge \u00a4 usage: aria2p autopurge [-h] Automatically purge completed/removed/failed downloads. optional arguments: -h, --help Show this help message and exit. call \u00a4 usage: aria2p call [-h] [-P PARAMS [PARAMS ...] | -J PARAMS] method Call a remote method through the JSON-RPC client. positional arguments: method The method to call (case insensitive). Dashes and underscores will be removed so you can use as many as you want, or none. Prefixes like 'aria2.' or 'system.' are also optional. optional arguments: -h, --help Show this help message and exit. -P PARAMS [PARAMS ...], --params-list PARAMS [PARAMS ...] Parameters as a list of strings. -J PARAMS, --json-params PARAMS Parameters as a JSON string. You should always wrap it at least once in an array '[]'. As explained in the help text, the method can be the exact method name, or just the name without the prefix. It is case-insensitive, and dashes and underscores will be removed. The following are all equivalent: - aria2.addUri - aria2.adduri - addUri - ADDURI - aria2.ADD-URI - add_uri - A-d_D-u_R-i (yes it's valid) - A---R---I---A---2.a__d__d__u__r__i (I think you got it) - and even more ugly forms... Examples \u00a4 List all available methods. This example uses jq . $ aria2p call listmethods | jq [ \"aria2.addUri\", \"aria2.addTorrent\", \"aria2.getPeers\", \"aria2.addMetalink\", \"aria2.remove\", \"aria2.pause\", \"aria2.forcePause\", \"aria2.pauseAll\", \"aria2.forcePauseAll\", \"aria2.unpause\", \"aria2.unpauseAll\", \"aria2.forceRemove\", \"aria2.changePosition\", \"aria2.tellStatus\", \"aria2.getUris\", \"aria2.getFiles\", \"aria2.getServers\", \"aria2.tellActive\", \"aria2.tellWaiting\", \"aria2.tellStopped\", \"aria2.getOption\", \"aria2.changeUri\", \"aria2.changeOption\", \"aria2.getGlobalOption\", \"aria2.changeGlobalOption\", \"aria2.purgeDownloadResult\", \"aria2.removeDownloadResult\", \"aria2.getVersion\", \"aria2.getSessionInfo\", \"aria2.shutdown\", \"aria2.forceShutdown\", \"aria2.getGlobalStat\", \"aria2.saveSession\", \"system.multicall\", \"system.listMethods\", \"system.listNotifications\" ] List the GIDs (identifiers) of all active downloads. Note that we must give the parameters as a JSON string. $ aria2p call tellactive -J '[[\"gid\"]]' [{\"gid\": \"b686cad55029d4df\"}, {\"gid\": \"4b39a1ad8fd94e26\"}, {\"gid\": \"9d331cc4b287e5df\"}, {\"gid\": \"8c9de0df753a5195\"}] Pause a download using its GID. Note that when a single string argument is required, it can be passed directly with -P . $ aria2p call pause -P b686cad55029d4df \"b686cad55029d4df\" Add a download using magnet URIs. This example uses jq -r to remove the quotation marks around the result. $ aria2p call adduri -J '[[\"magnet:?xt=urn:...\"]]' | jq -r 4b39a1ad8fd94e26f Purge download results (remove completed downloads from the list). $ aria2p call purge_download_result \"OK\" listen \u00a4 usage: aria2p listen [-h] [-c CALLBACKS_MODULE] [-t TIMEOUT] [event_types [event_types ...]] Listen to notifications. positional arguments: event_types The types of notifications to process: start, pause, stop, error, complete or btcomplete. Example: aria2p listen error btcomplete. Useful if you want to spawn multiple specialized aria2p listener, for example one for each type of notification, but still want to use only one callback file. optional arguments: -h, --help Show this help message and exit. -c CALLBACKS_MODULE, --callbacks-module CALLBACKS_MODULE Path to the Python module defining your notifications callbacks. -t TIMEOUT, --timeout TIMEOUT Timeout in seconds to use when waiting for data over the WebSocket at each iteration. Use small values for faster reactivity when stopping to listen. pause \u00a4 usage: aria2p pause [-h] [-a] [-f] [gids [gids ...]] Pause downloads. positional arguments: gids The GIDs of the downloads to pause. optional arguments: -h, --help Show this help message and exit. -a, --all Pause all the downloads. -f, --force Pause without contacting servers first. remove \u00a4 usage: aria2p remove [-h] [-a] [-f] [gids [gids ...]] Remove downloads. positional arguments: gids The GIDs of the downloads to remove. optional arguments: -h, --help Show this help message and exit. -a, --all Remove all the downloads. -f, --force Remove without contacting servers first. resume \u00a4 usage: aria2p resume [-h] [-a] [gids [gids ...]] Resume downloads. positional arguments: gids The GIDs of the downloads to resume. optional arguments: -h, --help Show this help message and exit. -a, --all Resume all the downloads. show \u00a4 usage: aria2p show [-h] Show the download progression. optional arguments: -h, --help Show this help message and exit. top \u00a4 usage: aria2p top [-h] Launch the top-like interactive interface. optional arguments: -h, --help Show this help message and exit. Troubleshooting \u00a4 Error outputs like below when using aria2p as a Python library: requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=6800): Max retries exceeded with url: /jsonrpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1115b1908>: Failed to establish a new connection: [Errno 61] Connection refused',)) Solution: aria2c needs to be up and running first. Support \u00a4 To support me as an open-source software author, consider donating or be a supporter through one of the following platforms GitHub Ko-fi Liberapay Patreon Paypal Thank you!","title":"Overview"},{"location":"#aria2p","text":"Command-line tool and Python library to interact with an aria2c daemon process through JSON-RPC. To avoid confusion: aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2c is the name of the command-line executable provided by aria2 . It can act as a daemon. aria2p ( p for Python) is a command-line client that can interact with an aria2c daemon. It is not an official client. There are other Python packages allowing you to interact with an aria2c daemon. These other packages do not offer enough usability (in my opinion), this is why I'm developing aria2p . Purpose : aria2c can run in the foreground, for one-time downloads, or in the background, as a daemon. This is where aria2p intervenes: when an instance of aria2c is running in the background, aria2p will be able to communicate with it to add downloads to the queue, remove, pause or resume them, etc. In order for aria2p to be able to communicate with the aria2c process, RPC mode must be enabled with the --enable-rpc option of aria2c . RPC stands for Remote Procedure Call . Although aria2c supports both JSON-RPC and XML-RPC protocols, aria2p works with JSON only (not XML). More information about how to configure aria2c to run as a daemon with RPC mode enabled can be found in the Configuration section of the documentation. Table of contents Requirements Installation Usage as a library Usage on the command line Troubleshoot Support","title":"aria2p"},{"location":"#requirements","text":"aria2p requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 You must also install aria2 . On systems with apt-get : sudo apt-get install aria2","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install aria2p [ tui ] With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 aria2p [ tui ] The tui extra is needed for the interactive interface. If you don't need the interface (for example when you are writing a Python package with a dependency to aria2p), simply install aria2p without any extra.","title":"Installation"},{"location":"#usage-as-a-library","text":"This library is still a work in progress. More examples will be added later. In the meantime, you can read the Reference section on the official documentation. import aria2p # initialization, these are the default values aria2 = aria2p . API ( aria2p . Client ( host = \"http://localhost\" , port = 6800 , secret = \"\" ) ) # list downloads downloads = aria2 . get_downloads () for download in downloads : print ( download . name , download . download_speed ) # add downloads magnet_uri = \"magnet:?xt=urn:...\" download = aria2 . add_magnet ( magnet_uri )","title":"Usage (as a library)"},{"location":"#usage-command-line","text":"usage: aria2p [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...] Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC. Global options: -h, --help Show this help message and exit. Commands also accept the -h/--help option. -p PORT, --port PORT Port to use to connect to the remote server. -H HOST, --host HOST Host address for the remote server. -s SECRET, --secret SECRET Secret token to use to connect to the remote server. -L {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL}, --log-level {TRACE,DEBUG,INFO,SUCCESS,WARNING,ERROR,CRITICAL} Log level to use -P LOG_PATH, --log-path LOG_PATH Log path to use. Can be a directory or a file. -T CLIENT_TIMEOUT, --client-timeout CLIENT_TIMEOUT Timeout in seconds for requests to the remote server. Floats supported. Default: 60.0. Commands: add Add downloads with URIs/Magnets/torrents/Metalinks. add-magnets (add-magnet) Add downloads with Magnet URIs. add-metalinks (add-metalink) Add downloads with Metalink files. add-torrents (add-torrent) Add downloads with torrent files. autopurge (autoclear) Automatically purge completed/removed/failed downloads. call Call a remote method through the JSON-RPC client. pause (stop) Pause downloads. remove (rm, del, delete) Remove downloads. resume (start) Resume downloads. show Show the download progression. top Launch the top-like interactive interface. listen Listen to notifications. Calling aria2p without any arguments will by default call the top command, which is a console interactive interface. Commands: add add-magnets add-metalinks add-torrents autopurge call listen pause remove resume show top","title":"Usage (command-line)"},{"location":"#add","text":"usage: aria2p add [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with URIs/Magnets/torrents/Metalinks. positional arguments: uris The URIs/file-paths to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file.","title":"add"},{"location":"#add-magnets","text":"usage: aria2p add-magnets [-h] [-f FROM_FILE] [uris [uris ...]] Add downloads with Magnet URIs. positional arguments: uris The magnet URIs to add. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load URIs from a file.","title":"add-magnets"},{"location":"#add-metalinks","text":"usage: aria2p add-metalinks [-h] [-f FROM_FILE] [metalink_files [metalink_files ...]] Add downloads with Metalink files. positional arguments: metalink_files The paths to the metalink files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file.","title":"add-metalinks"},{"location":"#add-torrents","text":"usage: aria2p add-torrents [-h] [-f FROM_FILE] [torrent_files [torrent_files ...]] Add downloads with torrent files. positional arguments: torrent_files The paths to the torrent files. optional arguments: -h, --help Show this help message and exit. -f FROM_FILE, --from-file FROM_FILE Load file paths from a file.","title":"add-torrents"},{"location":"#autopurge","text":"usage: aria2p autopurge [-h] Automatically purge completed/removed/failed downloads. optional arguments: -h, --help Show this help message and exit.","title":"autopurge"},{"location":"#call","text":"usage: aria2p call [-h] [-P PARAMS [PARAMS ...] | -J PARAMS] method Call a remote method through the JSON-RPC client. positional arguments: method The method to call (case insensitive). Dashes and underscores will be removed so you can use as many as you want, or none. Prefixes like 'aria2.' or 'system.' are also optional. optional arguments: -h, --help Show this help message and exit. -P PARAMS [PARAMS ...], --params-list PARAMS [PARAMS ...] Parameters as a list of strings. -J PARAMS, --json-params PARAMS Parameters as a JSON string. You should always wrap it at least once in an array '[]'. As explained in the help text, the method can be the exact method name, or just the name without the prefix. It is case-insensitive, and dashes and underscores will be removed. The following are all equivalent: - aria2.addUri - aria2.adduri - addUri - ADDURI - aria2.ADD-URI - add_uri - A-d_D-u_R-i (yes it's valid) - A---R---I---A---2.a__d__d__u__r__i (I think you got it) - and even more ugly forms...","title":"call"},{"location":"#examples","text":"List all available methods. This example uses jq . $ aria2p call listmethods | jq [ \"aria2.addUri\", \"aria2.addTorrent\", \"aria2.getPeers\", \"aria2.addMetalink\", \"aria2.remove\", \"aria2.pause\", \"aria2.forcePause\", \"aria2.pauseAll\", \"aria2.forcePauseAll\", \"aria2.unpause\", \"aria2.unpauseAll\", \"aria2.forceRemove\", \"aria2.changePosition\", \"aria2.tellStatus\", \"aria2.getUris\", \"aria2.getFiles\", \"aria2.getServers\", \"aria2.tellActive\", \"aria2.tellWaiting\", \"aria2.tellStopped\", \"aria2.getOption\", \"aria2.changeUri\", \"aria2.changeOption\", \"aria2.getGlobalOption\", \"aria2.changeGlobalOption\", \"aria2.purgeDownloadResult\", \"aria2.removeDownloadResult\", \"aria2.getVersion\", \"aria2.getSessionInfo\", \"aria2.shutdown\", \"aria2.forceShutdown\", \"aria2.getGlobalStat\", \"aria2.saveSession\", \"system.multicall\", \"system.listMethods\", \"system.listNotifications\" ] List the GIDs (identifiers) of all active downloads. Note that we must give the parameters as a JSON string. $ aria2p call tellactive -J '[[\"gid\"]]' [{\"gid\": \"b686cad55029d4df\"}, {\"gid\": \"4b39a1ad8fd94e26\"}, {\"gid\": \"9d331cc4b287e5df\"}, {\"gid\": \"8c9de0df753a5195\"}] Pause a download using its GID. Note that when a single string argument is required, it can be passed directly with -P . $ aria2p call pause -P b686cad55029d4df \"b686cad55029d4df\" Add a download using magnet URIs. This example uses jq -r to remove the quotation marks around the result. $ aria2p call adduri -J '[[\"magnet:?xt=urn:...\"]]' | jq -r 4b39a1ad8fd94e26f Purge download results (remove completed downloads from the list). $ aria2p call purge_download_result \"OK\"","title":"Examples"},{"location":"#listen","text":"usage: aria2p listen [-h] [-c CALLBACKS_MODULE] [-t TIMEOUT] [event_types [event_types ...]] Listen to notifications. positional arguments: event_types The types of notifications to process: start, pause, stop, error, complete or btcomplete. Example: aria2p listen error btcomplete. Useful if you want to spawn multiple specialized aria2p listener, for example one for each type of notification, but still want to use only one callback file. optional arguments: -h, --help Show this help message and exit. -c CALLBACKS_MODULE, --callbacks-module CALLBACKS_MODULE Path to the Python module defining your notifications callbacks. -t TIMEOUT, --timeout TIMEOUT Timeout in seconds to use when waiting for data over the WebSocket at each iteration. Use small values for faster reactivity when stopping to listen.","title":"listen"},{"location":"#pause","text":"usage: aria2p pause [-h] [-a] [-f] [gids [gids ...]] Pause downloads. positional arguments: gids The GIDs of the downloads to pause. optional arguments: -h, --help Show this help message and exit. -a, --all Pause all the downloads. -f, --force Pause without contacting servers first.","title":"pause"},{"location":"#remove","text":"usage: aria2p remove [-h] [-a] [-f] [gids [gids ...]] Remove downloads. positional arguments: gids The GIDs of the downloads to remove. optional arguments: -h, --help Show this help message and exit. -a, --all Remove all the downloads. -f, --force Remove without contacting servers first.","title":"remove"},{"location":"#resume","text":"usage: aria2p resume [-h] [-a] [gids [gids ...]] Resume downloads. positional arguments: gids The GIDs of the downloads to resume. optional arguments: -h, --help Show this help message and exit. -a, --all Resume all the downloads.","title":"resume"},{"location":"#show","text":"usage: aria2p show [-h] Show the download progression. optional arguments: -h, --help Show this help message and exit.","title":"show"},{"location":"#top","text":"usage: aria2p top [-h] Launch the top-like interactive interface. optional arguments: -h, --help Show this help message and exit.","title":"top"},{"location":"#troubleshooting","text":"Error outputs like below when using aria2p as a Python library: requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=6800): Max retries exceeded with url: /jsonrpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1115b1908>: Failed to establish a new connection: [Errno 61] Connection refused',)) Solution: aria2c needs to be up and running first.","title":"Troubleshooting"},{"location":"#support","text":"To support me as an open-source software author, consider donating or be a supporter through one of the following platforms GitHub Ko-fi Liberapay Patreon Paypal Thank you!","title":"Support"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.10.4 - 2021-01-06 \u00a4 Compare with 0.10.3 Bug Fixes \u00a4 Always depend on appdirs (not only in tui extra) ( 7f36a04 by Timoth\u00e9e Mazzucotelli). 0.10.3 - 2020-12-30 \u00a4 Compare with 0.10.2 Bug Fixes \u00a4 Add missing extra dependencies for tui group ( 60f9e69 by Timoth\u00e9e Mazzucotelli). 0.10.2 - 2020-12-30 \u00a4 Compare with 0.10.1 Bug Fixes \u00a4 Add back missing commands aliases ( cd25e78 by Timoth\u00e9e Mazzucotelli). 0.10.1 - 2020-11-28 \u00a4 Compare with 0.10.0 Bug Fixes \u00a4 Fix missing toml dependency ( 4d385f1 by Timoth\u00e9e Mazzucotelli). 0.10.0 - 2020-11-28 \u00a4 Compare with 0.9.1 Bug Fixes \u00a4 Security fix (requests vulnerability) ( 17777c0 by Timoth\u00e9e Mazzucotelli). Fix TUI crashes when removing files for downloads without ( c066971 by jonnieey). Fix TUI crash when URI is longer than screen width ( dc1f11b by Jonnieey). Code Refactoring \u00a4 Use purge instead of autopurge in interface ( 045b4d3 by Timoth\u00e9e Mazzucotelli). Various quality improvements ( e8aca77 by Timoth\u00e9e Mazzucotelli). Remove deprecated subcommands ( da9664c by Timoth\u00e9e Mazzucotelli). Move add command logic into API ( 6f36116 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Add new downloads from TUI (with the a key by default) ( 052a0ae by Jonnieey). Add user configuration ( f3512b7 by Jonnieey). References: #60 , #62 Add retry_downloads API method ( 77678f5 by Jonnieey). 0.9.1 - 2020-05-14 \u00a4 Compare with 0.9.0 Bug Fixes \u00a4 Forbid version of asciimatics below 1.11.0 ( c305b9b by Timoth\u00e9e Mazzucotelli). References: #57 0.9.0 - 2020-04-08 \u00a4 Compare with 0.8.1 Features \u00a4 Add a timeout to client's requests ( 26bb0b6 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #52 Add the is_torrent property to download objects. ( 0c7760e by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53 download.bittorrent returns none if no \"bittorrent\" key present ( 74106fe by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53 BREAKING CHANGE: this could be a breaking change if your code does not check if download.bittorrent is an instance of BitTorrent before accessing its attributes. 0.8.1 - 2020-03-29 \u00a4 Compare with 0.8.0 Fixed \u00a4 Fix download followed_by not being reset properly when updating ( 19510a7 ). See issue #51 . 0.8.0 - 2020-03-27 \u00a4 Compare with 0.7.1 Added \u00a4 Add a live property to Download ( 98a8504 ). See issue #44 . Fixed \u00a4 Re-apply pywal color theme if any when screen is resized ( 3e19deb ). 0.7.1 - 2020-01-18 \u00a4 Compare with 0.7.0 Fixed \u00a4 Fix Windows OSError when checking if path exists ( 2a17c75 ). See issue #41 . 0.7.0 - 2019-12-14 \u00a4 Compare with 0.6.0 BREAKING CHANGES \u00a4 Set asciimatics dependency as optional ( aria2p[tui] ) ( 95a404c ). Starting at version 0.7.0, you need to install aria2p with the tui extra if you want to use the interactive interface. Example: pip install aria2p[tui] . Removed \u00a4 Remove deprecated purge and purge_all methods from API ( 6baf63c ). Remove deprecated purge CLI command ( 8668c8d ). Misc \u00a4 Add makefile rule to bundle app with pyinstaller ( 7eabbb4 ). 0.6.0 - 2019-10-20 \u00a4 Compare with 0.5.2 BREAKING CHANGES \u00a4 Default command when calling aria2p without arguments is now top instead of show . Added \u00a4 Add command \"add\", and allow multiple parameters for \"add-\" commands ( 12f8667 ). Add -f, --from-file FILE option to add commands ( 63a137d ). Add a clean parameter to API.remove to delete aria2 control file ( d4b9a51 ). Changed \u00a4 Commands add-magnet, add-torrent and add-metalink are now called add-magnets, add-torrents and add-metalinks. Previous names are added as aliases to maintain backward compatibility. Deprecated \u00a4 Functions cli.subcommand_add_magnet , cli.subcommand_add_torrent or cli.subcommand_add_metalink are deprecated in favor of their pluralized names, cli.subcommand_add_magnets , cli.subcommand_add_torrents or cli.subcommand_add_metalinks , and will be removed in version 0.9.0. Fixed \u00a4 Always force remove files when removing download ( 7283a15 ). Don't try to fetch download when GID is None ( 8970385 ). 0.5.2 - 2019-10-15 \u00a4 Compare with 0.5.1 Fixed \u00a4 Don't crash when trying to remove a single file ( 14114c1 ). 0.5.1 - 2019-10-15 \u00a4 Compare with 0.5.0 Fixed \u00a4 Fix interface exit (oops) ( ca4adc5 ). 0.5.0 - 2019-10-15 \u00a4 Compare with 0.4.0 BREAKING CHANGES \u00a4 Commands finishing with -all were removed. Use their equivalent with the -a or --all option. Example: aria2p pause-all becomes aria2p pause --all . Added \u00a4 Add log path global option ( 7103e0b ). Fixed \u00a4 Interface does not crash anymore when trying to remove a completed/failed download ( 157e137 ). See issue GH-31 . Run extra arguments-checks for aliases as well ( cb70dae ). See issue GH-15 . 0.4.0 - 2019-10-13 \u00a4 Compare with 0.3.0 Added \u00a4 Add interactive interface (top command) (last commit: d8a2db2 ). Run the interactive interface with aria2p top . Hit \"h\" to show help. The interface is not finished, but I'm releasing it now to get early feedback. API: add option to remove files as well when removing downloads ( 981dcc0 ). Fixed \u00a4 Fix Download.move_up method (it was doing the inverse) ( 96a287a ). 0.3.0 - 2019-10-11 \u00a4 Compare with 0.2.5 Added \u00a4 Add listen subcommand ( 09195ae ). Implement notifications listener ( 33ee9ae ). Provide function to enable/configure logger ( 8620a09 ). Fixed \u00a4 Fix API pause_all and resume_all methods ( 0bf2209 ). See issue GH-24 . 0.2.5 - 2019-08-09 \u00a4 Compare with 0.2.4 Fixed \u00a4 Use path for name when download is metadata ( d18af50 ). 0.2.4 - 2019-08-09 \u00a4 Compare with 0.2.3 Fixed \u00a4 Don't cause exception when download name is not ready ( 604a0ab ). 0.2.3 - 2019-08-08 \u00a4 Compare with 0.2.2 Added \u00a4 Add some aliases ( 14ef63a ). Add file moving and purge ability to Download class ( 08d129a ). Add move/copy files methods to API ( e1d3994 ). Combine -all commands to normal ones, with -a, --all option, keep old ones as deprecated ( e5d287c and 939402f ). Improve exceptions handling with loguru ( e0ded18 ). Fixed \u00a4 Cast return value in get method with argument ( 5ee651a ). Fix Download.name and always initialize struct arguments to empty dictionaries ( 874deb9 ). Pass exceptions when download result cannot be removed ( 9a7659e ). 0.2.2 - 2019-02-21 \u00a4 Compare with 0.2.1 Documented \u00a4 Add configuration documentation ( 9525743 ). Add information in README ( 840c4b5 ). Add credits ( 6900eb2 ). Fixed \u00a4 Fix format of secret in params ( e01fd9c ). Print warning when connection to remote fails ( 57287fb ). 0.2.1 - 2019-01-23 \u00a4 Compare with 0.2.0 Fixed \u00a4 Fix commands not being mapped properly ( f9a0b29 ). 0.2.0 - 2019-01-23 \u00a4 Compare with 0.1.7 Version 0.2.0 adds subcommands to the CLI tool. The package now also provides documentation and tests. Various improvements and fixes. Status is still alpha, things might break! Added \u00a4 Add subcommands to CLI ( 93821cc ). Fixed \u00a4 Fix Download following API refactor ( 37f3b71 ). Fix encoding torrent content to base64/utf-8 ( a17eb92 ). 0.1.7 - 2018-12-29 \u00a4 Compare with 0.1.6 Fixed \u00a4 Fix specifier for Python version (allow 3.6+) ( f451df9 ). See issue GH-1 . 0.1.6 - 2018-12-26 \u00a4 Compare with 0.1.5 Added \u00a4 Add methods to Download to improve usability ( 5fe4649 ). Add refetch method for download objects ( c87e752 ). Add upload speed to display ( 5c8be6c ). Misc \u00a4 Handle return code and exceptions better ( 14f47f8 ). Improve JSONRPC errors messages, use defaults ( a3692dc ). Write documentation ( f5c9ffd ). 0.1.5 - 2018-12-20 \u00a4 Compare with 0.1.4 Misc \u00a4 Improve basic display ( 84ae386 ). 0.1.4 - 2018-12-20 \u00a4 Compare with 0.1.3 Added \u00a4 Add download speed and eta to display ( 1dd23bc ). Fixed \u00a4 Fix error handling in client.post ( 7f9e8aa ). Misc \u00a4 Use dynamic get/set attr for options ( fa0b962 ). Use properties ( 6efe3a6 ). 0.1.3 - 2018-12-17 \u00a4 Compare with 0.1.0 Misc \u00a4 Various tweaks and improvements for packaging the application. 0.1.0 - 2018-12-17 \u00a4 Compare with first commit Added \u00a4 Add pyproject.toml for black configuration ( dacb85e ). Add README ( 683086c ). Misc \u00a4 Package with Poetry! ( 648d0a5 ). Hello Git(Hub|Lab) ( 878497b ).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#0104-2021-01-06","text":"Compare with 0.10.3","title":"0.10.4 - 2021-01-06"},{"location":"changelog/#bug-fixes","text":"Always depend on appdirs (not only in tui extra) ( 7f36a04 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#0103-2020-12-30","text":"Compare with 0.10.2","title":"0.10.3 - 2020-12-30"},{"location":"changelog/#bug-fixes_1","text":"Add missing extra dependencies for tui group ( 60f9e69 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#0102-2020-12-30","text":"Compare with 0.10.1","title":"0.10.2 - 2020-12-30"},{"location":"changelog/#bug-fixes_2","text":"Add back missing commands aliases ( cd25e78 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#0101-2020-11-28","text":"Compare with 0.10.0","title":"0.10.1 - 2020-11-28"},{"location":"changelog/#bug-fixes_3","text":"Fix missing toml dependency ( 4d385f1 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#0100-2020-11-28","text":"Compare with 0.9.1","title":"0.10.0 - 2020-11-28"},{"location":"changelog/#bug-fixes_4","text":"Security fix (requests vulnerability) ( 17777c0 by Timoth\u00e9e Mazzucotelli). Fix TUI crashes when removing files for downloads without ( c066971 by jonnieey). Fix TUI crash when URI is longer than screen width ( dc1f11b by Jonnieey).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Use purge instead of autopurge in interface ( 045b4d3 by Timoth\u00e9e Mazzucotelli). Various quality improvements ( e8aca77 by Timoth\u00e9e Mazzucotelli). Remove deprecated subcommands ( da9664c by Timoth\u00e9e Mazzucotelli). Move add command logic into API ( 6f36116 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features","text":"Add new downloads from TUI (with the a key by default) ( 052a0ae by Jonnieey). Add user configuration ( f3512b7 by Jonnieey). References: #60 , #62 Add retry_downloads API method ( 77678f5 by Jonnieey).","title":"Features"},{"location":"changelog/#091-2020-05-14","text":"Compare with 0.9.0","title":"0.9.1 - 2020-05-14"},{"location":"changelog/#bug-fixes_5","text":"Forbid version of asciimatics below 1.11.0 ( c305b9b by Timoth\u00e9e Mazzucotelli). References: #57","title":"Bug Fixes"},{"location":"changelog/#090-2020-04-08","text":"Compare with 0.8.1","title":"0.9.0 - 2020-04-08"},{"location":"changelog/#features_1","text":"Add a timeout to client's requests ( 26bb0b6 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #52 Add the is_torrent property to download objects. ( 0c7760e by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53 download.bittorrent returns none if no \"bittorrent\" key present ( 74106fe by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #53 BREAKING CHANGE: this could be a breaking change if your code does not check if download.bittorrent is an instance of BitTorrent before accessing its attributes.","title":"Features"},{"location":"changelog/#081-2020-03-29","text":"Compare with 0.8.0","title":"0.8.1 - 2020-03-29"},{"location":"changelog/#fixed","text":"Fix download followed_by not being reset properly when updating ( 19510a7 ). See issue #51 .","title":"Fixed"},{"location":"changelog/#080-2020-03-27","text":"Compare with 0.7.1","title":"0.8.0 - 2020-03-27"},{"location":"changelog/#added","text":"Add a live property to Download ( 98a8504 ). See issue #44 .","title":"Added"},{"location":"changelog/#fixed_1","text":"Re-apply pywal color theme if any when screen is resized ( 3e19deb ).","title":"Fixed"},{"location":"changelog/#071-2020-01-18","text":"Compare with 0.7.0","title":"0.7.1 - 2020-01-18"},{"location":"changelog/#fixed_2","text":"Fix Windows OSError when checking if path exists ( 2a17c75 ). See issue #41 .","title":"Fixed"},{"location":"changelog/#070-2019-12-14","text":"Compare with 0.6.0","title":"0.7.0 - 2019-12-14"},{"location":"changelog/#breaking-changes","text":"Set asciimatics dependency as optional ( aria2p[tui] ) ( 95a404c ). Starting at version 0.7.0, you need to install aria2p with the tui extra if you want to use the interactive interface. Example: pip install aria2p[tui] .","title":"BREAKING CHANGES"},{"location":"changelog/#removed","text":"Remove deprecated purge and purge_all methods from API ( 6baf63c ). Remove deprecated purge CLI command ( 8668c8d ).","title":"Removed"},{"location":"changelog/#misc","text":"Add makefile rule to bundle app with pyinstaller ( 7eabbb4 ).","title":"Misc"},{"location":"changelog/#060-2019-10-20","text":"Compare with 0.5.2","title":"0.6.0 - 2019-10-20"},{"location":"changelog/#breaking-changes_1","text":"Default command when calling aria2p without arguments is now top instead of show .","title":"BREAKING CHANGES"},{"location":"changelog/#added_1","text":"Add command \"add\", and allow multiple parameters for \"add-\" commands ( 12f8667 ). Add -f, --from-file FILE option to add commands ( 63a137d ). Add a clean parameter to API.remove to delete aria2 control file ( d4b9a51 ).","title":"Added"},{"location":"changelog/#changed","text":"Commands add-magnet, add-torrent and add-metalink are now called add-magnets, add-torrents and add-metalinks. Previous names are added as aliases to maintain backward compatibility.","title":"Changed"},{"location":"changelog/#deprecated","text":"Functions cli.subcommand_add_magnet , cli.subcommand_add_torrent or cli.subcommand_add_metalink are deprecated in favor of their pluralized names, cli.subcommand_add_magnets , cli.subcommand_add_torrents or cli.subcommand_add_metalinks , and will be removed in version 0.9.0.","title":"Deprecated"},{"location":"changelog/#fixed_3","text":"Always force remove files when removing download ( 7283a15 ). Don't try to fetch download when GID is None ( 8970385 ).","title":"Fixed"},{"location":"changelog/#052-2019-10-15","text":"Compare with 0.5.1","title":"0.5.2 - 2019-10-15"},{"location":"changelog/#fixed_4","text":"Don't crash when trying to remove a single file ( 14114c1 ).","title":"Fixed"},{"location":"changelog/#051-2019-10-15","text":"Compare with 0.5.0","title":"0.5.1 - 2019-10-15"},{"location":"changelog/#fixed_5","text":"Fix interface exit (oops) ( ca4adc5 ).","title":"Fixed"},{"location":"changelog/#050-2019-10-15","text":"Compare with 0.4.0","title":"0.5.0 - 2019-10-15"},{"location":"changelog/#breaking-changes_2","text":"Commands finishing with -all were removed. Use their equivalent with the -a or --all option. Example: aria2p pause-all becomes aria2p pause --all .","title":"BREAKING CHANGES"},{"location":"changelog/#added_2","text":"Add log path global option ( 7103e0b ).","title":"Added"},{"location":"changelog/#fixed_6","text":"Interface does not crash anymore when trying to remove a completed/failed download ( 157e137 ). See issue GH-31 . Run extra arguments-checks for aliases as well ( cb70dae ). See issue GH-15 .","title":"Fixed"},{"location":"changelog/#040-2019-10-13","text":"Compare with 0.3.0","title":"0.4.0 - 2019-10-13"},{"location":"changelog/#added_3","text":"Add interactive interface (top command) (last commit: d8a2db2 ). Run the interactive interface with aria2p top . Hit \"h\" to show help. The interface is not finished, but I'm releasing it now to get early feedback. API: add option to remove files as well when removing downloads ( 981dcc0 ).","title":"Added"},{"location":"changelog/#fixed_7","text":"Fix Download.move_up method (it was doing the inverse) ( 96a287a ).","title":"Fixed"},{"location":"changelog/#030-2019-10-11","text":"Compare with 0.2.5","title":"0.3.0 - 2019-10-11"},{"location":"changelog/#added_4","text":"Add listen subcommand ( 09195ae ). Implement notifications listener ( 33ee9ae ). Provide function to enable/configure logger ( 8620a09 ).","title":"Added"},{"location":"changelog/#fixed_8","text":"Fix API pause_all and resume_all methods ( 0bf2209 ). See issue GH-24 .","title":"Fixed"},{"location":"changelog/#025-2019-08-09","text":"Compare with 0.2.4","title":"0.2.5 - 2019-08-09"},{"location":"changelog/#fixed_9","text":"Use path for name when download is metadata ( d18af50 ).","title":"Fixed"},{"location":"changelog/#024-2019-08-09","text":"Compare with 0.2.3","title":"0.2.4 - 2019-08-09"},{"location":"changelog/#fixed_10","text":"Don't cause exception when download name is not ready ( 604a0ab ).","title":"Fixed"},{"location":"changelog/#023-2019-08-08","text":"Compare with 0.2.2","title":"0.2.3 - 2019-08-08"},{"location":"changelog/#added_5","text":"Add some aliases ( 14ef63a ). Add file moving and purge ability to Download class ( 08d129a ). Add move/copy files methods to API ( e1d3994 ). Combine -all commands to normal ones, with -a, --all option, keep old ones as deprecated ( e5d287c and 939402f ). Improve exceptions handling with loguru ( e0ded18 ).","title":"Added"},{"location":"changelog/#fixed_11","text":"Cast return value in get method with argument ( 5ee651a ). Fix Download.name and always initialize struct arguments to empty dictionaries ( 874deb9 ). Pass exceptions when download result cannot be removed ( 9a7659e ).","title":"Fixed"},{"location":"changelog/#022-2019-02-21","text":"Compare with 0.2.1","title":"0.2.2 - 2019-02-21"},{"location":"changelog/#documented","text":"Add configuration documentation ( 9525743 ). Add information in README ( 840c4b5 ). Add credits ( 6900eb2 ).","title":"Documented"},{"location":"changelog/#fixed_12","text":"Fix format of secret in params ( e01fd9c ). Print warning when connection to remote fails ( 57287fb ).","title":"Fixed"},{"location":"changelog/#021-2019-01-23","text":"Compare with 0.2.0","title":"0.2.1 - 2019-01-23"},{"location":"changelog/#fixed_13","text":"Fix commands not being mapped properly ( f9a0b29 ).","title":"Fixed"},{"location":"changelog/#020-2019-01-23","text":"Compare with 0.1.7 Version 0.2.0 adds subcommands to the CLI tool. The package now also provides documentation and tests. Various improvements and fixes. Status is still alpha, things might break!","title":"0.2.0 - 2019-01-23"},{"location":"changelog/#added_6","text":"Add subcommands to CLI ( 93821cc ).","title":"Added"},{"location":"changelog/#fixed_14","text":"Fix Download following API refactor ( 37f3b71 ). Fix encoding torrent content to base64/utf-8 ( a17eb92 ).","title":"Fixed"},{"location":"changelog/#017-2018-12-29","text":"Compare with 0.1.6","title":"0.1.7 - 2018-12-29"},{"location":"changelog/#fixed_15","text":"Fix specifier for Python version (allow 3.6+) ( f451df9 ). See issue GH-1 .","title":"Fixed"},{"location":"changelog/#016-2018-12-26","text":"Compare with 0.1.5","title":"0.1.6 - 2018-12-26"},{"location":"changelog/#added_7","text":"Add methods to Download to improve usability ( 5fe4649 ). Add refetch method for download objects ( c87e752 ). Add upload speed to display ( 5c8be6c ).","title":"Added"},{"location":"changelog/#misc_1","text":"Handle return code and exceptions better ( 14f47f8 ). Improve JSONRPC errors messages, use defaults ( a3692dc ). Write documentation ( f5c9ffd ).","title":"Misc"},{"location":"changelog/#015-2018-12-20","text":"Compare with 0.1.4","title":"0.1.5 - 2018-12-20"},{"location":"changelog/#misc_2","text":"Improve basic display ( 84ae386 ).","title":"Misc"},{"location":"changelog/#014-2018-12-20","text":"Compare with 0.1.3","title":"0.1.4 - 2018-12-20"},{"location":"changelog/#added_8","text":"Add download speed and eta to display ( 1dd23bc ).","title":"Added"},{"location":"changelog/#fixed_16","text":"Fix error handling in client.post ( 7f9e8aa ).","title":"Fixed"},{"location":"changelog/#misc_3","text":"Use dynamic get/set attr for options ( fa0b962 ). Use properties ( 6efe3a6 ).","title":"Misc"},{"location":"changelog/#013-2018-12-17","text":"Compare with 0.1.0","title":"0.1.3 - 2018-12-17"},{"location":"changelog/#misc_4","text":"Various tweaks and improvements for packaging the application.","title":"Misc"},{"location":"changelog/#010-2018-12-17","text":"Compare with first commit","title":"0.1.0 - 2018-12-17"},{"location":"changelog/#added_9","text":"Add pyproject.toml for black configuration ( dacb85e ). Add README ( 683086c ).","title":"Added"},{"location":"changelog/#misc_5","text":"Package with Poetry! ( 648d0a5 ). Hello Git(Hub|Lab) ( 878497b ).","title":"Misc"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"configuration/","text":"Configuration \u00a4 Since version 0.10, aria2p reads configuration from $XDG_CONFIG_HOME/aria2p/config.toml . Things that can be configured are: key bindings colors Upon running aria2p version 0.10 or above, the configuration will be created with default values if it doesn't already exist. The format of the configuration file is TOML . You can bind several key to a single action if you want: FOLLOW_ROW = \"F\" # only one key HELP = [ \"F1\" , \"?\" ] # multiple keys","title":"Configuration"},{"location":"configuration/#configuration","text":"Since version 0.10, aria2p reads configuration from $XDG_CONFIG_HOME/aria2p/config.toml . Things that can be configured are: key bindings colors Upon running aria2p version 0.10 or above, the configuration will be created with default values if it doesn't already exist. The format of the configuration file is TOML . You can bind several key to a single action if you want: FOLLOW_ROW = \"F\" # only one key HELP = [ \"F1\" , \"?\" ] # multiple keys","title":"Configuration"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd aria2p make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run aria2p [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd aria2p make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run aria2p [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build aria2p . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 appdirs | asciimatics | autoflake | black | duty | fastapi | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | jinja2-cli | loguru | markdown-include | mkdocs | mkdocs-material | mkdocstrings | mypy | PyInstaller | pyperclip | pytest | pytest-cov | pytest-randomly | pytest-rerunfailures | pytest-sugar | pytest-xdist | requests | responses | toml | uvicorn | websocket_client | wemake-python-styleguide Indirect dependencies \u00a4 aiocontextvars | altgraph | ansimarkup | apipkg | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | dis3 | docutils | entrypoints | eradicate | execnet | failprint | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | Pillow | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydantic | pydocstyle | pyfiglet | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | pywin32 | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | starlette | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | websocket-client | win32-setctime | wrapt | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build aria2p . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"appdirs | asciimatics | autoflake | black | duty | fastapi | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | jinja2-cli | loguru | markdown-include | mkdocs | mkdocs-material | mkdocstrings | mypy | PyInstaller | pyperclip | pytest | pytest-cov | pytest-randomly | pytest-rerunfailures | pytest-sugar | pytest-xdist | requests | responses | toml | uvicorn | websocket_client | wemake-python-styleguide","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"aiocontextvars | altgraph | ansimarkup | apipkg | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | dis3 | docutils | entrypoints | eradicate | execnet | failprint | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | Pillow | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydantic | pydocstyle | pyfiglet | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | pywin32 | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | starlette | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | websocket-client | win32-setctime | wrapt | zipp More credits from the author","title":"Indirect dependencies"},{"location":"usage/","text":"Usage \u00a4 Extensive usage instructions will be added later, when the application is more stable. You can also refer to the README / Overview. Listening to notifications \u00a4 Since version 0.3 , it is possible to listen to the server notifications thanks to the websocket-client Python package. The server sends a notification to the client through a WebSocket for each of these events: - a download is started, - a download is paused, - a download is stopped, - a download fails, - a download is complete, - a bittorrent download is complete (received 100%, still seeding). Through the command line \u00a4 The command line interface offers a listen subcommand: aria2p listen -c /path/to/callbacks.py In the future, a default path will be used for the callbacks module. The callbacks.py file is a Python module defining one or more of these callback functions: - on_download_start , - on_download_pause , - on_download_stop , - on_download_error , - on_download_complete , - on_bt_download_complete . Each one of these callbacks must accept two parameters: the API instance and the GID of the download. You can use the names you want. Example: # ~/callbacks.py import subprocess from pathlib import Path def on_download_error ( api , gid ): # pop a desktop notification using notify-send download = api . get_download ( gid ) summary = f \"A download failed\" body = f \" { download . name } \\n { download . error_message } (code: { download . error_code } ).\" subprocess . call ([ \"notify-send\" , \"-t\" , \"10000\" , summary , body ]) def on_download_complete ( api , gid ): download = api . get_download ( gid ) # purge if it was a magnet metadata download if download . is_metadata : download . purge () return # move files to another folder destination = Path . home () / \"library\" if download . move_files ( destination ): download . control_file_path . unlink () download . purge () You can now use this callbacks module with aria2p listen -c ~/callbacks.py . Process specific types of notifications \u00a4 If you want to listen to only a particular type of notification, even though your callbacks module defines all the possible callbacks, you can pass additional arguments: # let say you want to run multiple listeners: # one for errors, one for completions, and one for the rest aria2p listen -c ~/callbacks.py error & aria2p listen -c ~/callbacks.py complete btcomplete & aria2p listen -c ~/callbacks.py start pause stop & This is possible because the server sends the notifications to every client that is listening. Interruption \u00a4 To stop listening, send a SIGTERM or SIGINT signal to the process, for example by hitting Control-C if aria2p is running in the foreground. If a notification is currently being handled, it will finish before the listener is stopped. Timeout \u00a4 If you find the default five seconds to be too long when interrupting the process, you can decrease this timeout value by passing the -t or --timeout option: aria2p listen -c ~/callbacks.py -t 1 Programmatically \u00a4 Both the API and Client classes provide a method called listen_to_notifications , and another one called stop_listening . Please check their respective documentation.","title":"Usage"},{"location":"usage/#usage","text":"Extensive usage instructions will be added later, when the application is more stable. You can also refer to the README / Overview.","title":"Usage"},{"location":"usage/#listening-to-notifications","text":"Since version 0.3 , it is possible to listen to the server notifications thanks to the websocket-client Python package. The server sends a notification to the client through a WebSocket for each of these events: - a download is started, - a download is paused, - a download is stopped, - a download fails, - a download is complete, - a bittorrent download is complete (received 100%, still seeding).","title":"Listening to notifications"},{"location":"usage/#through-the-command-line","text":"The command line interface offers a listen subcommand: aria2p listen -c /path/to/callbacks.py In the future, a default path will be used for the callbacks module. The callbacks.py file is a Python module defining one or more of these callback functions: - on_download_start , - on_download_pause , - on_download_stop , - on_download_error , - on_download_complete , - on_bt_download_complete . Each one of these callbacks must accept two parameters: the API instance and the GID of the download. You can use the names you want. Example: # ~/callbacks.py import subprocess from pathlib import Path def on_download_error ( api , gid ): # pop a desktop notification using notify-send download = api . get_download ( gid ) summary = f \"A download failed\" body = f \" { download . name } \\n { download . error_message } (code: { download . error_code } ).\" subprocess . call ([ \"notify-send\" , \"-t\" , \"10000\" , summary , body ]) def on_download_complete ( api , gid ): download = api . get_download ( gid ) # purge if it was a magnet metadata download if download . is_metadata : download . purge () return # move files to another folder destination = Path . home () / \"library\" if download . move_files ( destination ): download . control_file_path . unlink () download . purge () You can now use this callbacks module with aria2p listen -c ~/callbacks.py .","title":"Through the command line"},{"location":"usage/#process-specific-types-of-notifications","text":"If you want to listen to only a particular type of notification, even though your callbacks module defines all the possible callbacks, you can pass additional arguments: # let say you want to run multiple listeners: # one for errors, one for completions, and one for the rest aria2p listen -c ~/callbacks.py error & aria2p listen -c ~/callbacks.py complete btcomplete & aria2p listen -c ~/callbacks.py start pause stop & This is possible because the server sends the notifications to every client that is listening.","title":"Process specific types of notifications"},{"location":"usage/#interruption","text":"To stop listening, send a SIGTERM or SIGINT signal to the process, for example by hitting Control-C if aria2p is running in the foreground. If a notification is currently being handled, it will finish before the listener is stopped.","title":"Interruption"},{"location":"usage/#timeout","text":"If you find the default five seconds to be too long when interrupting the process, you can decrease this timeout value by passing the -t or --timeout option: aria2p listen -c ~/callbacks.py -t 1","title":"Timeout"},{"location":"usage/#programmatically","text":"Both the API and Client classes provide a method called listen_to_notifications , and another one called stop_listening . Please check their respective documentation.","title":"Programmatically"},{"location":"reference/api/","text":"\u00a4 Aria2 API. This module defines the API class, which makes use of a JSON-RPC client to provide higher-level methods to interact easily with a remote aria2c process. API \u00a4 A class providing high-level methods to interact with a remote aria2c process. This class is instantiated with a reference to a [ Client ][aria2p.client.Client] instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like [ Download ][aria2p.downloads.Download], allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc.. __init__ ( self , client = None ) special \u00a4 Initialize the object. Parameters: Name Type Description Default client Optional[aria2p.client.Client] An instance of the [aria2p.client.Client][] class. None Source code in aria2p/api.py def __init__ ( self , client : Optional [ Client ] = None ) -> None : \"\"\" Initialize the object. Arguments: client: An instance of the [aria2p.client.Client][] class. \"\"\" self . client = client or Client () self . listener : Optional [ threading . Thread ] = None add ( self , uri ) \u00a4 Add a download (guess its type). If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively. Parameters: Name Type Description Default uri str The URI or file-path to add. required Returns: Type Description List[aria2p.downloads.Download] The created downloads. Source code in aria2p/api.py def add ( self , uri : str ) -> List [ Download ]: # noqa: WPS231 (not that complex) \"\"\" Add a download (guess its type). If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively. Arguments: uri: The URI or file-path to add. Returns: The created downloads. \"\"\" new_downloads = [] path = Path ( uri ) # On Windows, path.exists() generates an OSError when path is an URI # See https://github.com/pawamoy/aria2p/issues/41 try : path_exists = path . exists () except OSError : path_exists = False if path_exists : if path . suffix == \".torrent\" : new_downloads . append ( self . add_torrent ( path )) elif path . suffix == \".metalink\" : new_downloads . extend ( self . add_metalink ( path )) else : for line in read_lines ( path ): if line : new_downloads . extend ( self . add ( line )) elif uri . startswith ( \"magnet:?\" ): new_downloads . append ( self . add_magnet ( uri )) else : new_downloads . append ( self . add_uris ([ uri ])) return new_downloads add_magnet ( self , magnet_uri , options = None , position = None ) \u00a4 Add a download with a Magnet URI. Parameters: Name Type Description Default magnet_uri str The Magnet URI. required options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_magnet ( self , magnet_uri : str , options : OptionsType = None , position : int = None ) -> Download : \"\"\" Add a download with a Magnet URI. Arguments: magnet_uri: The Magnet URI. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ([ magnet_uri ], client_options , position ) return self . get_download ( gid ) add_metalink ( self , metalink_file_path , options = None , position = None ) \u00a4 Add a download with a Metalink file. Parameters: Name Type Description Default metalink_file_path Union[pathlib.Path, str] The path to the Metalink file. required options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description List[aria2p.downloads.Download] The newly created download objects. Source code in aria2p/api.py def add_metalink ( self , metalink_file_path : PathOrStr , options : OptionsType = None , position : int = None , ) -> List [ Download ]: \"\"\" Add a download with a Metalink file. Arguments: metalink_file_path: The path to the Metalink file. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download objects. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( metalink_file_path , \"rb\" ) as stream : metalink_contents = stream . read () encoded_contents = b64encode ( metalink_contents ) . decode ( \"utf8\" ) gids = self . client . add_metalink ( encoded_contents , client_options , position ) return self . get_downloads ( gids ) add_torrent ( self , torrent_file_path , uris = None , options = None , position = None ) \u00a4 Add a download with a torrent file (usually .torrent extension). Parameters: Name Type Description Default torrent_file_path Union[pathlib.Path, str] The path to the torrent file. required uris List[str] A list of URIs used for Web-seeding. None options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_torrent ( self , torrent_file_path : PathOrStr , uris : List [ str ] = None , options : OptionsType = None , position : int = None , ) -> Download : \"\"\" Add a download with a torrent file (usually .torrent extension). Arguments: torrent_file_path: The path to the torrent file. uris: A list of URIs used for Web-seeding. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if uris is None : uris = [] if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( torrent_file_path , \"rb\" ) as stream : torrent_contents = stream . read () encoded_contents = b64encode ( torrent_contents ) . decode ( \"utf8\" ) gid = self . client . add_torrent ( encoded_contents , uris , client_options , position ) return self . get_download ( gid ) add_uris ( self , uris , options = None , position = None ) \u00a4 Add a download with a URL (or more). Parameters: Name Type Description Default uris List[str] A list of URIs that point to the same resource. required options Union[aria2p.options.Options, dict] An instance of the Options class or a dictionary containing aria2c options to create the download with. None position Optional[int] The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_uris ( self , uris : List [ str ], options : Optional [ OptionsType ] = None , position : Optional [ int ] = None , ) -> Download : \"\"\" Add a download with a URL (or more). Arguments: uris: A list of URIs that point to the same resource. options: An instance of the `Options` class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ( uris , client_options , position ) return self . get_download ( gid ) autopurge ( self ) \u00a4 Purge completed, removed or failed downloads from the queue. Deprecated. Use [ purge ][aria2p.api.API.purge] instead. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py def autopurge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Deprecated. Use [`purge`][aria2p.api.API.purge] instead. Returns: Success or failure of the operation. \"\"\" logger . warning ( \"Deprecation warning: API method 'autopurge' is deprecated, use 'purge' instead.\" ) return self . purge () copy_files ( downloads , to_directory , force = False ) staticmethod \u00a4 Copy downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[pathlib.Path, str] The target directory to copy files into. required force bool Whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS231,WPS602 (not that complex, static method) def copy_files ( # noqa: WPS231,WPS602 (not that complex) downloads : List [ Download ], to_directory : PathOrStr , force : bool = False , ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Arguments: downloads: the list of downloads for which to move files. to_directory: The target directory to copy files into. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . copytree ( str ( path ), str ( to_directory / path . name )) elif path . is_file (): shutil . copy ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results get_download ( self , gid ) \u00a4 Get a [ Download ][aria2p.downloads.Download] object thanks to its GID. Parameters: Name Type Description Default gid str The GID of the download to get. required Returns: Type Description Download The retrieved download object. Source code in aria2p/api.py def get_download ( self , gid : str ) -> Download : \"\"\" Get a [`Download`][aria2p.downloads.Download] object thanks to its GID. Arguments: gid: The GID of the download to get. Returns: The retrieved download object. \"\"\" return Download ( self , self . client . tell_status ( gid )) get_downloads ( self , gids = None ) \u00a4 Get a list of [ Download ][aria2p.downloads.Download] object thanks to their GIDs. Parameters: Name Type Description Default gids List[str] The GIDs of the downloads to get. If None, return all the downloads. None Returns: Type Description List[aria2p.downloads.Download] The retrieved download objects. Source code in aria2p/api.py def get_downloads ( self , gids : List [ str ] = None ) -> List [ Download ]: \"\"\" Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs. Arguments: gids: The GIDs of the downloads to get. If None, return all the downloads. Returns: The retrieved download objects. \"\"\" downloads = [] if gids : for gid in gids : downloads . append ( Download ( self , self . client . tell_status ( gid ))) else : structs = [] structs . extend ( self . client . tell_active ()) structs . extend ( self . client . tell_waiting ( 0 , 1000 )) structs . extend ( self . client . tell_stopped ( 0 , 1000 )) downloads = [ Download ( self , struct ) for struct in structs ] return downloads get_global_options ( self ) \u00a4 Get the global options. Returns: Type Description Options The global aria2c options. Source code in aria2p/api.py def get_global_options ( self ) -> Options : \"\"\" Get the global options. Returns: The global aria2c options. \"\"\" return Options ( self , self . client . get_global_option ()) get_options ( self , downloads ) \u00a4 Get options for each of the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to get the options of. required Returns: Type Description List[aria2p.options.Options] Options object for each given download. Source code in aria2p/api.py def get_options ( self , downloads : List [ Download ]) -> List [ Options ]: \"\"\" Get options for each of the given downloads. Arguments: downloads: The list of downloads to get the options of. Returns: Options object for each given download. \"\"\" # Note: batch/multicall candidate options = [] for download in downloads : options . append ( Options ( self , self . client . get_option ( download . gid ), download )) return options get_stats ( self ) \u00a4 Get the stats of the remote aria2c process. Returns: Type Description Stats The global stats returned by the remote process. Source code in aria2p/api.py def get_stats ( self ) -> Stats : \"\"\" Get the stats of the remote aria2c process. Returns: The global stats returned by the remote process. \"\"\" return Stats ( self . client . get_global_stat ()) listen_to_notifications ( self , threaded = False , on_download_start = None , on_download_pause = None , on_download_stop = None , on_download_complete = None , on_download_error = None , on_bt_download_complete = None , timeout = 5 , handle_signals = True ) \u00a4 Start listening to aria2 notifications via WebSocket. This method differs from [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, api and gid , instead of only gid . Accepting api allows to use the high-level methods of the [ API ][aria2p.api.API] class. Stop listening to notifications with the [ API.stop_listening ][aria2p.api.API.stop_listening] method. Parameters: Name Type Description Default threaded bool Whether to start the listening loop in a thread or not (non-blocking or blocking). False on_download_start Callable Callback for the onDownloadStart event. None on_download_pause Callable Callback for the onDownloadPause event. None on_download_stop Callable Callback for the onDownloadStop event. None on_download_complete Callable Callback for the onDownloadComplete event. None on_download_error Callable Callback for the onDownloadError event. None on_bt_download_complete Callable Callback for the onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/api.py def listen_to_notifications ( self , threaded : bool = False , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, `api` and `gid`, instead of only `gid`. Accepting `api` allows to use the high-level methods of the [`API`][aria2p.api.API] class. Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method. Arguments: threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking). on_download_start: Callback for the `onDownloadStart` event. on_download_pause: Callback for the `onDownloadPause` event. on_download_stop: Callback for the `onDownloadStop` event. on_download_complete: Callback for the `onDownloadComplete` event. on_download_error: Callback for the `onDownloadError` event. on_bt_download_complete: Callback for the `onBtDownloadComplete` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" def closure ( callback ): # noqa: WPS430 (nested function) return functools . partial ( callback , self ) if callable ( callback ) else None kwargs = { \"on_download_start\" : closure ( on_download_start ), \"on_download_pause\" : closure ( on_download_pause ), \"on_download_stop\" : closure ( on_download_stop ), \"on_download_complete\" : closure ( on_download_complete ), \"on_download_error\" : closure ( on_download_error ), \"on_bt_download_complete\" : closure ( on_bt_download_complete ), \"timeout\" : timeout , \"handle_signals\" : handle_signals , } if threaded : kwargs [ \"handle_signals\" ] = False self . listener = threading . Thread ( target = self . client . listen_to_notifications , kwargs = kwargs ) self . listener . start () else : self . client . listen_to_notifications ( ** kwargs ) move ( self , download , pos ) \u00a4 Move a download in the queue, relatively to its current position. Parameters: Name Type Description Default download Download The download object to move. required pos int The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, relatively to its current position. Arguments: download: The download object to move. pos: The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" ) move_down ( self , download , pos = 1 ) \u00a4 Move a download down in the queue. Parameters: Name Type Description Default download Download The download object to move. required pos int Number of times to move down. With negative values, will move up (use move or move_up instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_down ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download down in the queue. Arguments: download: The download object to move. pos: Number of times to move down. With negative values, will move up (use move or move_up instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" ) move_files ( downloads , to_directory , force = False ) staticmethod \u00a4 Move downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[pathlib.Path, str] The target directory to move files to. required force bool Whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS602 (static method) def move_files ( # noqa: WPS602 downloads : List [ Download ], to_directory : PathOrStr , force : bool = False , ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Arguments: downloads: the list of downloads for which to move files. to_directory: The target directory to move files to. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : shutil . move ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results move_to ( self , download , pos ) \u00a4 Move a download in the queue, with absolute positioning. Parameters: Name Type Description Default download Download The download object to move. required pos int The absolute position in the queue where to move the download. 0 for top, -1 for bottom. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, with absolute positioning. Arguments: download: The download object to move. pos: The absolute position in the queue where to move the download. 0 for top, -1 for bottom. Returns: The new position of the download. \"\"\" if pos < 0 : how = \"POS_END\" pos = - pos else : how = \"POS_SET\" return self . client . change_position ( download . gid , pos , how ) move_to_bottom ( self , download ) \u00a4 Move a download to the bottom of the queue. Parameters: Name Type Description Default download Download The download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to_bottom ( self , download : Download ) -> int : \"\"\" Move a download to the bottom of the queue. Arguments: download: The download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_END\" ) move_to_top ( self , download ) \u00a4 Move a download to the top of the queue. Parameters: Name Type Description Default download Download The download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to_top ( self , download : Download ) -> int : \"\"\" Move a download to the top of the queue. Arguments: download: The download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_SET\" ) move_up ( self , download , pos = 1 ) \u00a4 Move a download up in the queue. Parameters: Name Type Description Default download Download The download object to move. required pos int Number of times to move up. With negative values, will move down (use move or move_down instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_up ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download up in the queue. Arguments: download: The download object to move. pos: Number of times to move up. With negative values, will move down (use move or move_down instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , - pos , \"POS_CUR\" ) pause ( self , downloads , force = False ) \u00a4 Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required force bool Whether to pause immediately without contacting servers or not. False Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def pause ( self , downloads : List [ Download ], force : bool = False ) -> List [ OperationResult ]: \"\"\" Remove the given downloads from the list. Arguments: downloads: The list of downloads to remove. force: Whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate if force : pause_func = self . client . force_pause else : pause_func = self . client . pause result : List [ OperationResult ] = [] for download in downloads : try : pause_func ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to pause download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result pause_all ( self , force = False ) \u00a4 Remove the given downloads from the list. Parameters: Name Type Description Default force bool Whether to pause immediately without contacting servers or not. False Returns: Type Description bool Success or failure of the operation to pause all downloads. Source code in aria2p/api.py def pause_all ( self , force : bool = False ) -> bool : \"\"\" Remove the given downloads from the list. Arguments: force: Whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation to pause all downloads. \"\"\" if force : pause_func = self . client . force_pause_all else : pause_func = self . client . pause_all return pause_func () == \"OK\" purge ( self ) \u00a4 Purge completed, removed or failed downloads from the queue. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py def purge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Returns: Success or failure of the operation. \"\"\" return self . client . purge_download_result () == \"OK\" remove ( self , downloads , force = False , files = False , clean = True ) \u00a4 Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required force bool Whether to force the removal or not. False files bool Whether to remove downloads files as well. False clean bool Whether to remove the aria2 control file as well. True Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def remove ( # noqa: WPS231 (complex, maybe we could split it) self , downloads : List [ Download ], force : bool = False , files : bool = False , clean : bool = True , ) -> List [ OperationResult ]: \"\"\" Remove the given downloads from the list. Arguments: downloads: The list of downloads to remove. force: Whether to force the removal or not. files: Whether to remove downloads files as well. clean: Whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate if force : remove_func = self . client . force_remove else : remove_func = self . client . remove result : List [ OperationResult ] = [] for download in downloads : if download . is_complete or download . is_removed or download . has_failed : logger . debug ( f \"Try to remove download result { download . gid } \" ) try : self . client . remove_download_result ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download result { download . gid } \" ) result . append ( True ) else : logger . debug ( f \"Try to remove download { download . gid } \" ) try : removed_gid = remove_func ( download . gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download { download . gid } \" ) result . append ( True ) try : # noqa: WPS505 (nested try) self . client . remove_download_result ( download . gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . debug ( f \"Failed to remove download result { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) if removed_gid != download . gid : logger . debug ( f \"Removed download GID# { removed_gid } is different than download GID# { download . gid } \" , ) try : # noqa: WPS505 (nested try) self . client . remove_download_result ( removed_gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . debug ( f \"Failed to remove download result { removed_gid } \" ) logger . opt ( exception = True ) . trace ( error ) if clean : # FUTURE: use missing_ok parameter on Python 3.8 try : download . control_file_path . unlink () except FileNotFoundError : logger . debug ( f \"aria2 control file { download . control_file_path } was not found\" ) else : logger . debug ( f \"Removed control file { download . control_file_path } \" ) if files and result [ - 1 ]: self . remove_files ([ download ], force = True ) return result remove_all ( self , force = False ) \u00a4 Remove all downloads from the list. Parameters: Name Type Description Default force bool Whether to force the removal or not. False Returns: Type Description bool Success or failure of the operation to remove all downloads. Source code in aria2p/api.py def remove_all ( self , force : bool = False ) -> bool : \"\"\" Remove all downloads from the list. Arguments: force: Whether to force the removal or not. Returns: Success or failure of the operation to remove all downloads. \"\"\" return all ( self . remove ( self . get_downloads (), force = force )) remove_files ( downloads , force = False ) staticmethod \u00a4 Remove downloaded files. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to remove files. required force bool Whether to remove files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS231,WPS602 (complex method, static method) def remove_files ( # noqa: WPS231,WPS602 downloads : List [ Download ], force : bool = False , ) -> List [ bool ]: \"\"\" Remove downloaded files. Arguments: downloads: the list of downloads for which to remove files. force: Whether to remove files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): try : shutil . rmtree ( str ( path )) except OSError : logger . error ( f \"Could not delete directory ' { path } '\" ) logger . opt ( exception = True ) . trace ( error ) results . append ( False ) else : results . append ( True ) else : try : path . unlink () except FileNotFoundError as error : logger . warning ( f \"File ' { path } ' did not exist when trying to delete it\" ) logger . opt ( exception = True ) . trace ( error ) results . append ( True ) else : results . append ( False ) return results resume ( self , downloads ) \u00a4 Resume (unpause) the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to resume. required Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def resume ( self , downloads : List [ Download ]) -> List [ OperationResult ]: \"\"\" Resume (unpause) the given downloads. Arguments: downloads: The list of downloads to resume. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate result : List [ OperationResult ] = [] for download in downloads : try : self . client . unpause ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to resume download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result resume_all ( self ) \u00a4 Resume (unpause) all downloads. Returns: Type Description bool Success or failure of the operation to resume all downloads. Source code in aria2p/api.py def resume_all ( self ) -> bool : \"\"\" Resume (unpause) all downloads. Returns: Success or failure of the operation to resume all downloads. \"\"\" return self . client . unpause_all () == \"OK\" retry_downloads ( self , downloads , clean = False ) \u00a4 Resume failed downloads from where they left off with new GIDs. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required clean bool Whether to remove the aria2 control file as well. False Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def retry_downloads ( # noqa: WPS231 (not that complex) self , downloads : List [ Download ], clean : bool = False , ) -> List [ OperationResult ]: \"\"\" Resume failed downloads from where they left off with new GIDs. Arguments: downloads: The list of downloads to remove. clean: Whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" result : List [ OperationResult ] = [] for download in downloads : if not download . has_failed : continue uri = download . files [ 0 ] . uris [ 0 ][ \"uri\" ] # noqa: WPS219 (deep access) try : new_download_gid = self . add_uris ([ uri ], download . options ) except ClientException as error : result . append ( error ) else : if not new_download_gid : continue self . remove ([ download ], clean ) result . append ( True ) return result search ( self , patterns ) \u00a4 Not implemented. Search and return [ Download ][aria2p.downloads.Download] objects based on multiple patterns. Parameters: Name Type Description Default patterns List[str] The patterns used to filter the download list. required Exceptions: Type Description NotImplementedError This method is not implemented yet. Source code in aria2p/api.py def search ( self , patterns : List [ str ]) -> List [ Download ]: \"\"\" Not implemented. Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns. Arguments: patterns: The patterns used to filter the download list. Raises: NotImplementedError: This method is not implemented yet. \"\"\" # gid # status # totalLength # completedLength # uploadLength # bitfield # downloadSpeed # uploadSpeed # infoHash # numSeeders # seeder # pieceLength # numPieces # connections # errorCode # errorMessage # followedBy # following # belongsTo # dir # files # bittorrent # announceList # comment # creationDate # mode # info # name # verifiedLength # verifyIntegrityPending raise NotImplementedError set_global_options ( self , options ) \u00a4 Set global options. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required Returns: Type Description bool Success or failure of the operation for changing global options. Source code in aria2p/api.py def set_global_options ( self , options : OptionsType ) -> bool : \"\"\" Set global options. Arguments: options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. Returns: Success or failure of the operation for changing global options. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options return self . client . change_global_option ( client_options ) == \"OK\" set_options ( self , options , downloads ) \u00a4 Set options for specific downloads. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required downloads List[aria2p.downloads.Download] The list of downloads to set the options for. required Returns: Type Description List[bool] Success or failure of the operation for changing options for each given download. Source code in aria2p/api.py def set_options ( self , options : OptionsType , downloads : List [ Download ]) -> List [ bool ]: \"\"\" Set options for specific downloads. Arguments: options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. downloads: The list of downloads to set the options for. Returns: Success or failure of the operation for changing options for each given download. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options # Note: batch/multicall candidate results = [] for download in downloads : results . append ( self . client . change_option ( download . gid , client_options ) == \"OK\" ) return results stop_listening ( self ) \u00a4 Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [ listen_to_notifications ][aria2p.api.API.listen_to_notifications]. Source code in aria2p/api.py def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [`listen_to_notifications`][aria2p.api.API.listen_to_notifications]. \"\"\" self . client . stop_listening () if self . listener : self . listener . join () self . listener = None","title":"api.py"},{"location":"reference/api/#aria2p.api","text":"Aria2 API. This module defines the API class, which makes use of a JSON-RPC client to provide higher-level methods to interact easily with a remote aria2c process.","title":"aria2p.api"},{"location":"reference/api/#aria2p.api.API","text":"A class providing high-level methods to interact with a remote aria2c process. This class is instantiated with a reference to a [ Client ][aria2p.client.Client] instance. It then uses this client to call remote procedures, or remote methods. While the client methods reflect exactly what aria2c is providing through JSON-RPC, this class's methods allow for easier / faster control of the remote process. It also wraps the information the client retrieves in Python object, like [ Download ][aria2p.downloads.Download], allowing for even more Pythonic interactions, without worrying about payloads, responses, JSON, etc..","title":"API"},{"location":"reference/api/#aria2p.api.API.__init__","text":"Initialize the object. Parameters: Name Type Description Default client Optional[aria2p.client.Client] An instance of the [aria2p.client.Client][] class. None Source code in aria2p/api.py def __init__ ( self , client : Optional [ Client ] = None ) -> None : \"\"\" Initialize the object. Arguments: client: An instance of the [aria2p.client.Client][] class. \"\"\" self . client = client or Client () self . listener : Optional [ threading . Thread ] = None","title":"__init__()"},{"location":"reference/api/#aria2p.api.API.add","text":"Add a download (guess its type). If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively. Parameters: Name Type Description Default uri str The URI or file-path to add. required Returns: Type Description List[aria2p.downloads.Download] The created downloads. Source code in aria2p/api.py def add ( self , uri : str ) -> List [ Download ]: # noqa: WPS231 (not that complex) \"\"\" Add a download (guess its type). If the provided URI is in fact a file-path, and is neither a torrent or a metalink, then we read its lines and try to add each line as a download, recursively. Arguments: uri: The URI or file-path to add. Returns: The created downloads. \"\"\" new_downloads = [] path = Path ( uri ) # On Windows, path.exists() generates an OSError when path is an URI # See https://github.com/pawamoy/aria2p/issues/41 try : path_exists = path . exists () except OSError : path_exists = False if path_exists : if path . suffix == \".torrent\" : new_downloads . append ( self . add_torrent ( path )) elif path . suffix == \".metalink\" : new_downloads . extend ( self . add_metalink ( path )) else : for line in read_lines ( path ): if line : new_downloads . extend ( self . add ( line )) elif uri . startswith ( \"magnet:?\" ): new_downloads . append ( self . add_magnet ( uri )) else : new_downloads . append ( self . add_uris ([ uri ])) return new_downloads","title":"add()"},{"location":"reference/api/#aria2p.api.API.add_magnet","text":"Add a download with a Magnet URI. Parameters: Name Type Description Default magnet_uri str The Magnet URI. required options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_magnet ( self , magnet_uri : str , options : OptionsType = None , position : int = None ) -> Download : \"\"\" Add a download with a Magnet URI. Arguments: magnet_uri: The Magnet URI. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ([ magnet_uri ], client_options , position ) return self . get_download ( gid )","title":"add_magnet()"},{"location":"reference/api/#aria2p.api.API.add_metalink","text":"Add a download with a Metalink file. Parameters: Name Type Description Default metalink_file_path Union[pathlib.Path, str] The path to the Metalink file. required options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description List[aria2p.downloads.Download] The newly created download objects. Source code in aria2p/api.py def add_metalink ( self , metalink_file_path : PathOrStr , options : OptionsType = None , position : int = None , ) -> List [ Download ]: \"\"\" Add a download with a Metalink file. Arguments: metalink_file_path: The path to the Metalink file. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download objects. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( metalink_file_path , \"rb\" ) as stream : metalink_contents = stream . read () encoded_contents = b64encode ( metalink_contents ) . decode ( \"utf8\" ) gids = self . client . add_metalink ( encoded_contents , client_options , position ) return self . get_downloads ( gids )","title":"add_metalink()"},{"location":"reference/api/#aria2p.api.API.add_torrent","text":"Add a download with a torrent file (usually .torrent extension). Parameters: Name Type Description Default torrent_file_path Union[pathlib.Path, str] The path to the torrent file. required uris List[str] A list of URIs used for Web-seeding. None options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. None position int The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_torrent ( self , torrent_file_path : PathOrStr , uris : List [ str ] = None , options : OptionsType = None , position : int = None , ) -> Download : \"\"\" Add a download with a torrent file (usually .torrent extension). Arguments: torrent_file_path: The path to the torrent file. uris: A list of URIs used for Web-seeding. options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if uris is None : uris = [] if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options with open ( torrent_file_path , \"rb\" ) as stream : torrent_contents = stream . read () encoded_contents = b64encode ( torrent_contents ) . decode ( \"utf8\" ) gid = self . client . add_torrent ( encoded_contents , uris , client_options , position ) return self . get_download ( gid )","title":"add_torrent()"},{"location":"reference/api/#aria2p.api.API.add_uris","text":"Add a download with a URL (or more). Parameters: Name Type Description Default uris List[str] A list of URIs that point to the same resource. required options Union[aria2p.options.Options, dict] An instance of the Options class or a dictionary containing aria2c options to create the download with. None position Optional[int] The position where to insert the new download in the queue. Start at 0 (top). None Returns: Type Description Download The newly created download object. Source code in aria2p/api.py def add_uris ( self , uris : List [ str ], options : Optional [ OptionsType ] = None , position : Optional [ int ] = None , ) -> Download : \"\"\" Add a download with a URL (or more). Arguments: uris: A list of URIs that point to the same resource. options: An instance of the `Options` class or a dictionary containing aria2c options to create the download with. position: The position where to insert the new download in the queue. Start at 0 (top). Returns: The newly created download object. \"\"\" if options is None : options = {} if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options gid = self . client . add_uri ( uris , client_options , position ) return self . get_download ( gid )","title":"add_uris()"},{"location":"reference/api/#aria2p.api.API.autopurge","text":"Purge completed, removed or failed downloads from the queue. Deprecated. Use [ purge ][aria2p.api.API.purge] instead. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py def autopurge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Deprecated. Use [`purge`][aria2p.api.API.purge] instead. Returns: Success or failure of the operation. \"\"\" logger . warning ( \"Deprecation warning: API method 'autopurge' is deprecated, use 'purge' instead.\" ) return self . purge ()","title":"autopurge()"},{"location":"reference/api/#aria2p.api.API.copy_files","text":"Copy downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[pathlib.Path, str] The target directory to copy files into. required force bool Whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS231,WPS602 (not that complex, static method) def copy_files ( # noqa: WPS231,WPS602 (not that complex) downloads : List [ Download ], to_directory : PathOrStr , force : bool = False , ) -> List [ bool ]: \"\"\" Copy downloaded files to another directory. Arguments: downloads: the list of downloads for which to move files. to_directory: The target directory to copy files into. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): shutil . copytree ( str ( path ), str ( to_directory / path . name )) elif path . is_file (): shutil . copy ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results","title":"copy_files()"},{"location":"reference/api/#aria2p.api.API.get_download","text":"Get a [ Download ][aria2p.downloads.Download] object thanks to its GID. Parameters: Name Type Description Default gid str The GID of the download to get. required Returns: Type Description Download The retrieved download object. Source code in aria2p/api.py def get_download ( self , gid : str ) -> Download : \"\"\" Get a [`Download`][aria2p.downloads.Download] object thanks to its GID. Arguments: gid: The GID of the download to get. Returns: The retrieved download object. \"\"\" return Download ( self , self . client . tell_status ( gid ))","title":"get_download()"},{"location":"reference/api/#aria2p.api.API.get_downloads","text":"Get a list of [ Download ][aria2p.downloads.Download] object thanks to their GIDs. Parameters: Name Type Description Default gids List[str] The GIDs of the downloads to get. If None, return all the downloads. None Returns: Type Description List[aria2p.downloads.Download] The retrieved download objects. Source code in aria2p/api.py def get_downloads ( self , gids : List [ str ] = None ) -> List [ Download ]: \"\"\" Get a list of [`Download`][aria2p.downloads.Download] object thanks to their GIDs. Arguments: gids: The GIDs of the downloads to get. If None, return all the downloads. Returns: The retrieved download objects. \"\"\" downloads = [] if gids : for gid in gids : downloads . append ( Download ( self , self . client . tell_status ( gid ))) else : structs = [] structs . extend ( self . client . tell_active ()) structs . extend ( self . client . tell_waiting ( 0 , 1000 )) structs . extend ( self . client . tell_stopped ( 0 , 1000 )) downloads = [ Download ( self , struct ) for struct in structs ] return downloads","title":"get_downloads()"},{"location":"reference/api/#aria2p.api.API.get_global_options","text":"Get the global options. Returns: Type Description Options The global aria2c options. Source code in aria2p/api.py def get_global_options ( self ) -> Options : \"\"\" Get the global options. Returns: The global aria2c options. \"\"\" return Options ( self , self . client . get_global_option ())","title":"get_global_options()"},{"location":"reference/api/#aria2p.api.API.get_options","text":"Get options for each of the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to get the options of. required Returns: Type Description List[aria2p.options.Options] Options object for each given download. Source code in aria2p/api.py def get_options ( self , downloads : List [ Download ]) -> List [ Options ]: \"\"\" Get options for each of the given downloads. Arguments: downloads: The list of downloads to get the options of. Returns: Options object for each given download. \"\"\" # Note: batch/multicall candidate options = [] for download in downloads : options . append ( Options ( self , self . client . get_option ( download . gid ), download )) return options","title":"get_options()"},{"location":"reference/api/#aria2p.api.API.get_stats","text":"Get the stats of the remote aria2c process. Returns: Type Description Stats The global stats returned by the remote process. Source code in aria2p/api.py def get_stats ( self ) -> Stats : \"\"\" Get the stats of the remote aria2c process. Returns: The global stats returned by the remote process. \"\"\" return Stats ( self . client . get_global_stat ())","title":"get_stats()"},{"location":"reference/api/#aria2p.api.API.listen_to_notifications","text":"Start listening to aria2 notifications via WebSocket. This method differs from [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, api and gid , instead of only gid . Accepting api allows to use the high-level methods of the [ API ][aria2p.api.API] class. Stop listening to notifications with the [ API.stop_listening ][aria2p.api.API.stop_listening] method. Parameters: Name Type Description Default threaded bool Whether to start the listening loop in a thread or not (non-blocking or blocking). False on_download_start Callable Callback for the onDownloadStart event. None on_download_pause Callable Callback for the onDownloadPause event. None on_download_stop Callable Callback for the onDownloadStop event. None on_download_complete Callable Callback for the onDownloadComplete event. None on_download_error Callable Callback for the onDownloadError event. None on_bt_download_complete Callable Callback for the onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/api.py def listen_to_notifications ( self , threaded : bool = False , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method differs from [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications] in that it expects callbacks accepting two arguments, `api` and `gid`, instead of only `gid`. Accepting `api` allows to use the high-level methods of the [`API`][aria2p.api.API] class. Stop listening to notifications with the [`API.stop_listening`][aria2p.api.API.stop_listening] method. Arguments: threaded: Whether to start the listening loop in a thread or not (non-blocking or blocking). on_download_start: Callback for the `onDownloadStart` event. on_download_pause: Callback for the `onDownloadPause` event. on_download_stop: Callback for the `onDownloadStop` event. on_download_complete: Callback for the `onDownloadComplete` event. on_download_error: Callback for the `onDownloadError` event. on_bt_download_complete: Callback for the `onBtDownloadComplete` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" def closure ( callback ): # noqa: WPS430 (nested function) return functools . partial ( callback , self ) if callable ( callback ) else None kwargs = { \"on_download_start\" : closure ( on_download_start ), \"on_download_pause\" : closure ( on_download_pause ), \"on_download_stop\" : closure ( on_download_stop ), \"on_download_complete\" : closure ( on_download_complete ), \"on_download_error\" : closure ( on_download_error ), \"on_bt_download_complete\" : closure ( on_bt_download_complete ), \"timeout\" : timeout , \"handle_signals\" : handle_signals , } if threaded : kwargs [ \"handle_signals\" ] = False self . listener = threading . Thread ( target = self . client . listen_to_notifications , kwargs = kwargs ) self . listener . start () else : self . client . listen_to_notifications ( ** kwargs )","title":"listen_to_notifications()"},{"location":"reference/api/#aria2p.api.API.move","text":"Move a download in the queue, relatively to its current position. Parameters: Name Type Description Default download Download The download object to move. required pos int The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, relatively to its current position. Arguments: download: The download object to move. pos: The relative position (1 to move down, -1 to move up, -2 to move up two times, etc.). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" )","title":"move()"},{"location":"reference/api/#aria2p.api.API.move_down","text":"Move a download down in the queue. Parameters: Name Type Description Default download Download The download object to move. required pos int Number of times to move down. With negative values, will move up (use move or move_up instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_down ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download down in the queue. Arguments: download: The download object to move. pos: Number of times to move down. With negative values, will move up (use move or move_up instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , pos , \"POS_CUR\" )","title":"move_down()"},{"location":"reference/api/#aria2p.api.API.move_files","text":"Move downloaded files to another directory. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to move files. required to_directory Union[pathlib.Path, str] The target directory to move files to. required force bool Whether to move files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS602 (static method) def move_files ( # noqa: WPS602 downloads : List [ Download ], to_directory : PathOrStr , force : bool = False , ) -> List [ bool ]: \"\"\" Move downloaded files to another directory. Arguments: downloads: the list of downloads for which to move files. to_directory: The target directory to move files to. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" if isinstance ( to_directory , str ): to_directory = Path ( to_directory ) # raises FileExistsError when target is already a file to_directory . mkdir ( parents = True , exist_ok = True ) results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : shutil . move ( str ( path ), str ( to_directory )) results . append ( True ) else : results . append ( False ) return results","title":"move_files()"},{"location":"reference/api/#aria2p.api.API.move_to","text":"Move a download in the queue, with absolute positioning. Parameters: Name Type Description Default download Download The download object to move. required pos int The absolute position in the queue where to move the download. 0 for top, -1 for bottom. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to ( self , download : Download , pos : int ) -> int : \"\"\" Move a download in the queue, with absolute positioning. Arguments: download: The download object to move. pos: The absolute position in the queue where to move the download. 0 for top, -1 for bottom. Returns: The new position of the download. \"\"\" if pos < 0 : how = \"POS_END\" pos = - pos else : how = \"POS_SET\" return self . client . change_position ( download . gid , pos , how )","title":"move_to()"},{"location":"reference/api/#aria2p.api.API.move_to_bottom","text":"Move a download to the bottom of the queue. Parameters: Name Type Description Default download Download The download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to_bottom ( self , download : Download ) -> int : \"\"\" Move a download to the bottom of the queue. Arguments: download: The download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_END\" )","title":"move_to_bottom()"},{"location":"reference/api/#aria2p.api.API.move_to_top","text":"Move a download to the top of the queue. Parameters: Name Type Description Default download Download The download object to move. required Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_to_top ( self , download : Download ) -> int : \"\"\" Move a download to the top of the queue. Arguments: download: The download object to move. Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , 0 , \"POS_SET\" )","title":"move_to_top()"},{"location":"reference/api/#aria2p.api.API.move_up","text":"Move a download up in the queue. Parameters: Name Type Description Default download Download The download object to move. required pos int Number of times to move up. With negative values, will move down (use move or move_down instead). 1 Returns: Type Description int The new position of the download. Source code in aria2p/api.py def move_up ( self , download : Download , pos : int = 1 ) -> int : \"\"\" Move a download up in the queue. Arguments: download: The download object to move. pos: Number of times to move up. With negative values, will move down (use move or move_down instead). Returns: The new position of the download. \"\"\" return self . client . change_position ( download . gid , - pos , \"POS_CUR\" )","title":"move_up()"},{"location":"reference/api/#aria2p.api.API.pause","text":"Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required force bool Whether to pause immediately without contacting servers or not. False Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def pause ( self , downloads : List [ Download ], force : bool = False ) -> List [ OperationResult ]: \"\"\" Remove the given downloads from the list. Arguments: downloads: The list of downloads to remove. force: Whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate if force : pause_func = self . client . force_pause else : pause_func = self . client . pause result : List [ OperationResult ] = [] for download in downloads : try : pause_func ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to pause download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result","title":"pause()"},{"location":"reference/api/#aria2p.api.API.pause_all","text":"Remove the given downloads from the list. Parameters: Name Type Description Default force bool Whether to pause immediately without contacting servers or not. False Returns: Type Description bool Success or failure of the operation to pause all downloads. Source code in aria2p/api.py def pause_all ( self , force : bool = False ) -> bool : \"\"\" Remove the given downloads from the list. Arguments: force: Whether to pause immediately without contacting servers or not. Returns: Success or failure of the operation to pause all downloads. \"\"\" if force : pause_func = self . client . force_pause_all else : pause_func = self . client . pause_all return pause_func () == \"OK\"","title":"pause_all()"},{"location":"reference/api/#aria2p.api.API.purge","text":"Purge completed, removed or failed downloads from the queue. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/api.py def purge ( self ) -> bool : \"\"\" Purge completed, removed or failed downloads from the queue. Returns: Success or failure of the operation. \"\"\" return self . client . purge_download_result () == \"OK\"","title":"purge()"},{"location":"reference/api/#aria2p.api.API.remove","text":"Remove the given downloads from the list. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required force bool Whether to force the removal or not. False files bool Whether to remove downloads files as well. False clean bool Whether to remove the aria2 control file as well. True Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def remove ( # noqa: WPS231 (complex, maybe we could split it) self , downloads : List [ Download ], force : bool = False , files : bool = False , clean : bool = True , ) -> List [ OperationResult ]: \"\"\" Remove the given downloads from the list. Arguments: downloads: The list of downloads to remove. force: Whether to force the removal or not. files: Whether to remove downloads files as well. clean: Whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate if force : remove_func = self . client . force_remove else : remove_func = self . client . remove result : List [ OperationResult ] = [] for download in downloads : if download . is_complete or download . is_removed or download . has_failed : logger . debug ( f \"Try to remove download result { download . gid } \" ) try : self . client . remove_download_result ( download . gid ) except ClientException as error : logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download result { download . gid } \" ) result . append ( True ) else : logger . debug ( f \"Try to remove download { download . gid } \" ) try : removed_gid = remove_func ( download . gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . exception ( error ) result . append ( error ) else : logger . success ( f \"Removed download { download . gid } \" ) result . append ( True ) try : # noqa: WPS505 (nested try) self . client . remove_download_result ( download . gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . debug ( f \"Failed to remove download result { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) if removed_gid != download . gid : logger . debug ( f \"Removed download GID# { removed_gid } is different than download GID# { download . gid } \" , ) try : # noqa: WPS505 (nested try) self . client . remove_download_result ( removed_gid ) except ClientException as error : # noqa: WPS440 (block variable overlap) logger . debug ( f \"Failed to remove download result { removed_gid } \" ) logger . opt ( exception = True ) . trace ( error ) if clean : # FUTURE: use missing_ok parameter on Python 3.8 try : download . control_file_path . unlink () except FileNotFoundError : logger . debug ( f \"aria2 control file { download . control_file_path } was not found\" ) else : logger . debug ( f \"Removed control file { download . control_file_path } \" ) if files and result [ - 1 ]: self . remove_files ([ download ], force = True ) return result","title":"remove()"},{"location":"reference/api/#aria2p.api.API.remove_all","text":"Remove all downloads from the list. Parameters: Name Type Description Default force bool Whether to force the removal or not. False Returns: Type Description bool Success or failure of the operation to remove all downloads. Source code in aria2p/api.py def remove_all ( self , force : bool = False ) -> bool : \"\"\" Remove all downloads from the list. Arguments: force: Whether to force the removal or not. Returns: Success or failure of the operation to remove all downloads. \"\"\" return all ( self . remove ( self . get_downloads (), force = force ))","title":"remove_all()"},{"location":"reference/api/#aria2p.api.API.remove_files","text":"Remove downloaded files. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] the list of downloads for which to remove files. required force bool Whether to remove files even if download is not complete. False Returns: Type Description List[bool] Success or failure of the operation for each given download. Source code in aria2p/api.py @staticmethod # noqa: WPS231,WPS602 (complex method, static method) def remove_files ( # noqa: WPS231,WPS602 downloads : List [ Download ], force : bool = False , ) -> List [ bool ]: \"\"\" Remove downloaded files. Arguments: downloads: the list of downloads for which to remove files. force: Whether to remove files even if download is not complete. Returns: Success or failure of the operation for each given download. \"\"\" results = [] for download in downloads : if download . is_complete or force : for path in download . root_files_paths : if path . is_dir (): try : shutil . rmtree ( str ( path )) except OSError : logger . error ( f \"Could not delete directory ' { path } '\" ) logger . opt ( exception = True ) . trace ( error ) results . append ( False ) else : results . append ( True ) else : try : path . unlink () except FileNotFoundError as error : logger . warning ( f \"File ' { path } ' did not exist when trying to delete it\" ) logger . opt ( exception = True ) . trace ( error ) results . append ( True ) else : results . append ( False ) return results","title":"remove_files()"},{"location":"reference/api/#aria2p.api.API.resume","text":"Resume (unpause) the given downloads. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to resume. required Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def resume ( self , downloads : List [ Download ]) -> List [ OperationResult ]: \"\"\" Resume (unpause) the given downloads. Arguments: downloads: The list of downloads to resume. Returns: Success or failure of the operation for each given download. \"\"\" # Note: batch/multicall candidate result : List [ OperationResult ] = [] for download in downloads : try : self . client . unpause ( download . gid ) except ClientException as error : logger . debug ( f \"Failed to resume download { download . gid } \" ) logger . opt ( exception = True ) . trace ( error ) result . append ( error ) else : result . append ( True ) return result","title":"resume()"},{"location":"reference/api/#aria2p.api.API.resume_all","text":"Resume (unpause) all downloads. Returns: Type Description bool Success or failure of the operation to resume all downloads. Source code in aria2p/api.py def resume_all ( self ) -> bool : \"\"\" Resume (unpause) all downloads. Returns: Success or failure of the operation to resume all downloads. \"\"\" return self . client . unpause_all () == \"OK\"","title":"resume_all()"},{"location":"reference/api/#aria2p.api.API.retry_downloads","text":"Resume failed downloads from where they left off with new GIDs. Parameters: Name Type Description Default downloads List[aria2p.downloads.Download] The list of downloads to remove. required clean bool Whether to remove the aria2 control file as well. False Returns: Type Description List[Union[bool, aria2p.client.ClientException]] Success or failure of the operation for each given download. Source code in aria2p/api.py def retry_downloads ( # noqa: WPS231 (not that complex) self , downloads : List [ Download ], clean : bool = False , ) -> List [ OperationResult ]: \"\"\" Resume failed downloads from where they left off with new GIDs. Arguments: downloads: The list of downloads to remove. clean: Whether to remove the aria2 control file as well. Returns: Success or failure of the operation for each given download. \"\"\" result : List [ OperationResult ] = [] for download in downloads : if not download . has_failed : continue uri = download . files [ 0 ] . uris [ 0 ][ \"uri\" ] # noqa: WPS219 (deep access) try : new_download_gid = self . add_uris ([ uri ], download . options ) except ClientException as error : result . append ( error ) else : if not new_download_gid : continue self . remove ([ download ], clean ) result . append ( True ) return result","title":"retry_downloads()"},{"location":"reference/api/#aria2p.api.API.search","text":"Not implemented. Search and return [ Download ][aria2p.downloads.Download] objects based on multiple patterns. Parameters: Name Type Description Default patterns List[str] The patterns used to filter the download list. required Exceptions: Type Description NotImplementedError This method is not implemented yet. Source code in aria2p/api.py def search ( self , patterns : List [ str ]) -> List [ Download ]: \"\"\" Not implemented. Search and return [`Download`][aria2p.downloads.Download] objects based on multiple patterns. Arguments: patterns: The patterns used to filter the download list. Raises: NotImplementedError: This method is not implemented yet. \"\"\" # gid # status # totalLength # completedLength # uploadLength # bitfield # downloadSpeed # uploadSpeed # infoHash # numSeeders # seeder # pieceLength # numPieces # connections # errorCode # errorMessage # followedBy # following # belongsTo # dir # files # bittorrent # announceList # comment # creationDate # mode # info # name # verifiedLength # verifyIntegrityPending raise NotImplementedError","title":"search()"},{"location":"reference/api/#aria2p.api.API.set_global_options","text":"Set global options. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required Returns: Type Description bool Success or failure of the operation for changing global options. Source code in aria2p/api.py def set_global_options ( self , options : OptionsType ) -> bool : \"\"\" Set global options. Arguments: options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. Returns: Success or failure of the operation for changing global options. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options return self . client . change_global_option ( client_options ) == \"OK\"","title":"set_global_options()"},{"location":"reference/api/#aria2p.api.API.set_options","text":"Set options for specific downloads. Parameters: Name Type Description Default options Union[aria2p.options.Options, dict] An instance of the [ Options ][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. required downloads List[aria2p.downloads.Download] The list of downloads to set the options for. required Returns: Type Description List[bool] Success or failure of the operation for changing options for each given download. Source code in aria2p/api.py def set_options ( self , options : OptionsType , downloads : List [ Download ]) -> List [ bool ]: \"\"\" Set options for specific downloads. Arguments: options: An instance of the [`Options`][aria2p.options.Options] class or a dictionary containing aria2c options to create the download with. downloads: The list of downloads to set the options for. Returns: Success or failure of the operation for changing options for each given download. \"\"\" if isinstance ( options , Options ): client_options = options . get_struct () else : client_options = options # Note: batch/multicall candidate results = [] for download in downloads : results . append ( self . client . change_option ( download . gid , client_options ) == \"OK\" ) return results","title":"set_options()"},{"location":"reference/api/#aria2p.api.API.stop_listening","text":"Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [ listen_to_notifications ][aria2p.api.API.listen_to_notifications]. Source code in aria2p/api.py def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. If the listening loop was threaded, this method will wait for the thread to finish. The time it takes for the thread to finish will depend on the timeout given while calling [`listen_to_notifications`][aria2p.api.API.listen_to_notifications]. \"\"\" self . client . stop_listening () if self . listener : self . listener . join () self . listener = None","title":"stop_listening()"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. check_args ( parser , opts ) \u00a4 Additional checks for command line arguments. Parameters: Name Type Description Default parser ArgumentParser An argument parser. required opts Namespace Parsed options. required Source code in aria2p/cli.py def check_args ( parser : argparse . ArgumentParser , opts : argparse . Namespace ) -> None : # noqa: WPS231 (complex) \"\"\" Additional checks for command line arguments. Arguments: parser: An argument parser. opts: Parsed options. \"\"\" subparsers = [ action for action in parser . _actions # noqa: WPS437 (protected attribute) if isinstance ( action , argparse . _SubParsersAction ) # noqa: WPS437 ][ 0 ] . choices gid_commands = ( \"pause\" , \"stop\" , \"remove\" , \"rm\" , \"del\" , \"delete\" , \"resume\" , \"start\" , \"autopurge\" , \"autoclear\" , \"autoremove\" , ) if opts . subcommand in gid_commands : if not opts . do_all and not opts . gids : subparsers [ opts . subcommand ] . error ( \"the following arguments are required: gids or --all\" ) elif opts . do_all and opts . gids : subparsers [ opts . subcommand ] . error ( \"argument -a/--all: not allowed with arguments gids\" ) elif opts . subcommand and opts . subcommand . startswith ( \"add\" ): if not opts . uris and not opts . from_file : subparsers [ opts . subcommand ] . error ( \"the following arguments are required: uris\" ) get_method ( name ) \u00a4 Return the actual aria2 method name from a differently formatted name. Parameters: Name Type Description Default name str A method name. required Returns: Type Description Optional[str] The real method name. Source code in aria2p/cli.py def get_method ( name : str ) -> Optional [ str ]: \"\"\" Return the actual aria2 method name from a differently formatted name. Arguments: name: A method name. Returns: The real method name. \"\"\" methods = {} for method in Client . METHODS : methods [ method . lower ()] = method methods [ method . split ( \".\" )[ 1 ] . lower ()] = method name = name . lower () name = name . replace ( \"-\" , \"\" ) name = name . replace ( \"_\" , \"\" ) return methods . get ( name ) get_parser () \u00a4 Return a parser for the command-line options and arguments. Returns: Type Description ArgumentParser An argument parser. Source code in aria2p/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return a parser for the command-line options and arguments. Returns: An argument parser. \"\"\" usage = \" %(prog)s [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\" # noqa: WPS323 (%-formatting) description = \"Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC.\" parser = argparse . ArgumentParser ( add_help = False , usage = usage , description = description , prog = \"aria2p\" ) main_help = \"Show this help message and exit. Commands also accept the -h/--help option.\" subcommand_help = \"Show this help message and exit.\" global_options = parser . add_argument_group ( title = \"Global options\" ) global_options . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = main_help ) global_options . add_argument ( \"-p\" , \"--port\" , dest = \"port\" , default = DEFAULT_PORT , type = int , help = \"Port to use to connect to the remote server.\" , ) global_options . add_argument ( \"-H\" , \"--host\" , dest = \"host\" , default = DEFAULT_HOST , help = \"Host address for the remote server.\" , ) global_options . add_argument ( \"-s\" , \"--secret\" , dest = \"secret\" , default = \"\" , help = \"Secret token to use to connect to the remote server.\" , ) global_options . add_argument ( \"-L\" , \"--log-level\" , dest = \"log_level\" , default = None , help = \"Log level to use\" , choices = ( \"TRACE\" , \"DEBUG\" , \"INFO\" , \"SUCCESS\" , \"WARNING\" , \"ERROR\" , \"CRITICAL\" ), type = str . upper , ) global_options . add_argument ( \"-P\" , \"--log-path\" , dest = \"log_path\" , default = None , help = \"Log path to use. Can be a directory or a file.\" , ) global_options . add_argument ( \"-T\" , \"--client-timeout\" , dest = \"client_timeout\" , default = DEFAULT_TIMEOUT , type = float , help = f \"Timeout in seconds for requests to the remote server. Floats supported. Default: { DEFAULT_TIMEOUT } .\" , ) # ========= SUBPARSERS ========= # subparsers = parser . add_subparsers ( dest = \"subcommand\" , title = \"Commands\" , metavar = \"\" , prog = \"aria2p\" ) def subparser ( command : str , text : str , ** kwargs ) -> argparse . ArgumentParser : # noqa: WPS430 (nested function) sub = subparsers . add_parser ( command , add_help = False , help = text , description = text , ** kwargs ) sub . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = subcommand_help ) return sub add_parser = subparser ( \"add\" , \"Add downloads with URIs/Magnets/torrents/Metalinks.\" ) add_magnets_parser = subparser ( \"add-magnets\" , \"Add downloads with Magnet URIs.\" , aliases = [ \"add-magnet\" ]) add_metalinks_parser = subparser ( \"add-metalinks\" , \"Add downloads with Metalink files.\" , aliases = [ \"add-metalink\" ]) add_torrents_parser = subparser ( \"add-torrents\" , \"Add downloads with torrent files.\" , aliases = [ \"add-torrent\" ]) subparser ( \"purge\" , \"Automatically purge completed/removed/failed downloads.\" , aliases = [ \"autoclear\" , \"autopurge\" , \"autoremove\" ], ) call_parser = subparser ( \"call\" , \"Call a remote method through the JSON-RPC client.\" ) pause_parser = subparser ( \"pause\" , \"Pause downloads.\" , aliases = [ \"stop\" ]) remove_parser = subparser ( \"remove\" , \"Remove downloads.\" , aliases = [ \"rm\" , \"del\" , \"delete\" ]) resume_parser = subparser ( \"resume\" , \"Resume downloads.\" , aliases = [ \"start\" ]) subparser ( \"show\" , \"Show the download progression.\" ) subparser ( \"top\" , \"Launch the top-like interactive interface.\" ) listen_parser = subparser ( \"listen\" , \"Listen to notifications.\" ) # ========= CALL PARSER ========= # call_parser . add_argument ( \"method\" , help = ( \"The method to call (case insensitive). \" \"Dashes and underscores will be removed so you can use as many as you want, or none. \" \"Prefixes like 'aria2.' or 'system.' are also optional.\" ), ) call_parser_mxg = call_parser . add_mutually_exclusive_group () call_parser_mxg . add_argument ( \"-P\" , \"--params-list\" , dest = \"params\" , nargs = \"+\" , help = \"Parameters as a list of strings.\" , ) call_parser_mxg . add_argument ( \"-J\" , \"--json-params\" , dest = \"params\" , help = \"Parameters as a JSON string. You should always wrap it at least once in an array '[]'.\" , ) # ========= ADD PARSER ========= # add_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The URIs/file-paths to add.\" ) add_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD MAGNET PARSER ========= # add_magnets_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The magnet URIs to add.\" ) add_magnets_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD TORRENT PARSER ========= # add_torrents_parser . add_argument ( \"torrent_files\" , nargs = \"*\" , help = \"The paths to the torrent files.\" ) add_torrents_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= ADD METALINK PARSER ========= # add_metalinks_parser . add_argument ( \"metalink_files\" , nargs = \"*\" , help = \"The paths to the metalink files.\" ) add_metalinks_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= PAUSE PARSER ========= # pause_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to pause.\" ) pause_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Pause all the downloads.\" ) pause_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Pause without contacting servers first.\" , ) # ========= RESUME PARSER ========= # resume_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to resume.\" ) resume_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Resume all the downloads.\" ) # ========= REMOVE PARSER ========= # remove_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to remove.\" ) remove_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Remove all the downloads.\" ) remove_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Remove without contacting servers first.\" , ) # ========= LISTEN PARSER ========= # listen_parser . add_argument ( \"-c\" , \"--callbacks-module\" , dest = \"callbacks_module\" , help = \"Path to the Python module defining your notifications callbacks.\" , ) listen_parser . add_argument ( \"event_types\" , nargs = \"*\" , help = \"The types of notifications to process: \" \"start, pause, stop, error, complete or btcomplete. \" \"Example: aria2p listen error btcomplete. \" \"Useful if you want to spawn multiple specialized aria2p listener, \" \"for example one for each type of notification, \" \"but still want to use only one callback file.\" , ) listen_parser . add_argument ( \"-t\" , \"--timeout\" , dest = \"timeout\" , type = float , default = 5 , help = \"Timeout in seconds to use when waiting for data over the WebSocket at each iteration. \" \"Use small values for faster reactivity when stopping to listen.\" , ) return parser main ( args = None ) \u00a4 Run the main program. This function is executed when you type aria2p or python -m aria2p . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in aria2p/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `aria2p` or `python -m aria2p`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) kwargs = opts . __dict__ # noqa: WPS609 (special attribute) log_level = kwargs . pop ( \"log_level\" ) log_path = kwargs . pop ( \"log_path\" ) if log_path : log_path = Path ( log_path ) if log_path . is_dir (): log_path = log_path / \"aria2p- {time} .log\" enable_logger ( sink = log_path , level = log_level or \"WARNING\" ) elif log_level : enable_logger ( sink = sys . stderr , level = log_level ) logger . debug ( \"Checking arguments\" ) check_args ( parser , opts ) logger . debug ( \"Instantiating API\" ) api = API ( Client ( host = kwargs . pop ( \"host\" ), port = kwargs . pop ( \"port\" ), secret = kwargs . pop ( \"secret\" ), timeout = kwargs . pop ( \"client_timeout\" ), ), ) logger . info ( f \"API instantiated: { api !r} \" ) # Warn if no aria2 daemon process seems to be running logger . debug ( \"Testing connection\" ) try : api . client . get_version () except requests . ConnectionError as error : print ( f \"[ERROR] { error } \" , file = sys . stderr ) print ( file = sys . stderr ) print ( \"Please make sure that an instance of aria2c is running with RPC mode enabled,\" , file = sys . stderr ) print ( \"and that you have provided the right host, port and secret token.\" , file = sys . stderr ) print ( \"More information at https://aria2p.readthedocs.io/en/latest.\" , file = sys . stderr ) return 2 subcommands = { None : subcommand_top , \"show\" : subcommand_show , \"top\" : subcommand_top , \"call\" : subcommand_call , \"add\" : subcommand_add , \"add-magnet\" : subcommand_add_magnets , # alias for add-magnets \"add-magnets\" : subcommand_add_magnets , \"add-torrent\" : subcommand_add_torrents , # alias for add-torrents \"add-torrents\" : subcommand_add_torrents , \"add-metalink\" : subcommand_add_metalinks , # alias for add-metalinks \"add-metalinks\" : subcommand_add_metalinks , \"pause\" : subcommand_pause , \"stop\" : subcommand_pause , # alias for pause \"resume\" : subcommand_resume , \"start\" : subcommand_resume , # alias for resume \"remove\" : subcommand_remove , \"rm\" : subcommand_remove , # alias for remove \"del\" : subcommand_remove , # alias for remove \"delete\" : subcommand_remove , # alias for remove \"purge\" : subcommand_purge , \"autopurge\" : subcommand_purge , # alias for purge \"autoclear\" : subcommand_purge , # alias for purge \"autoremove\" : subcommand_purge , # alias for purge \"listen\" : subcommand_listen , } subcommand = kwargs . pop ( \"subcommand\" ) if subcommand : logger . debug ( \"Running subcommand \" + subcommand ) try : return subcommands [ subcommand ]( api , ** kwargs ) except ClientException as error : # noqa: WPS440 (variable overlap) print ( str ( error ), file = sys . stderr ) return error . code subcommand_add ( api , uris = None , from_file = None ) \u00a4 Add magnet subcommand. Parameters: Name Type Description Default api API The API instance to use. required uris List[str] The URIs or file-paths to add. None from_file str Path to the file to read uris from. Deprecated: Every URI that is a valid file-path and is not a torrent or a metalink is now read as an input file. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py def subcommand_add ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Arguments: api: The API instance to use. uris: The URIs or file-paths to add. from_file: Path to the file to read uris from. Deprecated: Every URI that is a valid file-path and is not a torrent or a metalink is now read as an input file. Returns: int: 0 if OK else 1. \"\"\" uris = uris or [] if from_file : logger . warning ( \"Deprecation warning: every URI that is a valid file-path \" \"and is not a torrent or a metalink is now read as an input file.\" , ) new_downloads = [] for uri in uris : new_downloads . extend ( api . add ( uri )) if new_downloads : for new_download in new_downloads : print ( f \"Created download { new_download . gid } \" ) return 0 print ( \"No new download was created\" , file = sys . stderr ) return 1 subcommand_add_magnets ( api , uris = None , from_file = None ) \u00a4 Add magnet subcommand. Parameters: Name Type Description Default api API The API instance to use. required uris List[str] The URIs of the magnets. None from_file str Path to the file to read uris from. None Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_add_magnets ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Arguments: api: The API instance to use. uris: The URIs of the magnets. from_file: Path to the file to read uris from. Returns: int: Always 0. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : new_download = api . add_magnet ( uri ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1 subcommand_add_metalinks ( api , metalink_files = None , from_file = None ) \u00a4 Add metalink subcommand. Parameters: Name Type Description Default api API The API instance to use. required metalink_files List[str] The paths to the metalink files. None from_file str Path to the file to metalink files paths from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py def subcommand_add_metalinks ( api : API , metalink_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add metalink subcommand. Arguments: api: The API instance to use. metalink_files: The paths to the metalink files. from_file: Path to the file to metalink files paths from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not metalink_files : metalink_files = [] if from_file : try : metalink_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for metalink_file in metalink_files : new_downloads = api . add_metalink ( metalink_file ) for download in new_downloads : print ( f \"Created download { download . gid } \" ) return 0 if ok else 1 subcommand_add_torrents ( api , torrent_files = None , from_file = None ) \u00a4 Add torrent subcommand. Parameters: Name Type Description Default api API The API instance to use. required torrent_files List[str] The paths to the torrent files. None from_file str Path to the file to read torrent files paths from. None Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_add_torrents ( api : API , torrent_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add torrent subcommand. Arguments: api: The API instance to use. torrent_files: The paths to the torrent files. from_file: Path to the file to read torrent files paths from. Returns: int: Always 0. \"\"\" ok = True if not torrent_files : torrent_files = [] if from_file : try : torrent_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for torrent_file in torrent_files : new_download = api . add_torrent ( torrent_file ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1 subcommand_call ( api , method , params ) \u00a4 Call subcommand. Parameters: Name Type Description Default api API The API instance to use. required method str Name of the method to call. required params Union[str, List[str]] Parameters to use when calling method. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_call ( api : API , method : str , params : Union [ str , List [ str ]]) -> int : \"\"\" Call subcommand. Arguments: api: The API instance to use. method: Name of the method to call. params: Parameters to use when calling method. Returns: int: Always 0. \"\"\" real_method = get_method ( method ) if real_method is None : print ( f \"aria2p: call: Unknown method { method } .\" , file = sys . stderr ) print ( \" Run 'aria2p call listmethods' to list the available methods.\" , file = sys . stderr ) return 1 if isinstance ( params , str ): params = json . loads ( params ) elif params is None : params = [] response = api . client . call ( real_method , params ) print ( json . dumps ( response )) return 0 subcommand_listen ( api , callbacks_module = None , event_types = None , timeout = 5 ) \u00a4 Listen subcommand. Parameters: Name Type Description Default api API The API instance to use. required callbacks_module Union[pathlib.Path, str] The path to the module to import, containing the callbacks as functions. None event_types List[str] The event types to process. None timeout int The timeout to pass to the WebSocket connection, in seconds. 5 Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_listen ( api : API , callbacks_module : PathOrStr = None , event_types : List [ str ] = None , timeout : int = 5 , ) -> int : \"\"\" Listen subcommand. Arguments: api: The API instance to use. callbacks_module: The path to the module to import, containing the callbacks as functions. event_types: The event types to process. timeout: The timeout to pass to the WebSocket connection, in seconds. Returns: int: Always 0. \"\"\" if not callbacks_module : print ( \"aria2p: listen: Please provide the callback module file path with -c option\" , file = sys . stderr ) return 1 if isinstance ( callbacks_module , Path ): callbacks_module = str ( callbacks_module ) if not event_types : event_types = [ \"start\" , \"pause\" , \"stop\" , \"error\" , \"complete\" , \"btcomplete\" ] spec = importlib_util . spec_from_file_location ( \"aria2p_callbacks\" , callbacks_module ) callbacks = importlib_util . module_from_spec ( spec ) if callbacks is None : print ( f \"aria2p: Could not import module file { callbacks_module } \" , file = sys . stderr ) return 1 spec . loader . exec_module ( callbacks ) callbacks_kwargs = {} for callback_name in ( # noqa: WPS352 (multiline loop) \"on_download_start\" , \"on_download_pause\" , \"on_download_stop\" , \"on_download_error\" , \"on_download_complete\" , \"on_bt_download_complete\" , ): if callback_name [ 3 :] . replace ( \"download\" , \"\" ) . replace ( \"_\" , \"\" ) in event_types : callback = getattr ( callbacks , callback_name , None ) if callback : callbacks_kwargs [ callback_name ] = callback api . listen_to_notifications ( timeout = timeout , handle_signals = True , threaded = False , ** callbacks_kwargs ) return 0 subcommand_pause ( api , gids = None , do_all = False , force = False ) \u00a4 Pause subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to pause. None do_all bool Pause all downloads if True. False force bool Force pause or not (see API.pause). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_pause ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Pause subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to pause. do_all: Pause all downloads if True. force: Force pause or not (see API.pause). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . pause_all ( force = force ): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 result = api . pause ( downloads , force = force ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_purge ( api ) \u00a4 Purge subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_purge ( api : API ) -> int : \"\"\" Purge subcommand. Arguments: api: The API instance to use. Returns: int: 0 if all success, 1 if one failure. \"\"\" if api . autopurge (): return 0 return 1 subcommand_remove ( api , gids = None , do_all = False , force = False ) \u00a4 Remove subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to remove. None do_all bool Pause all downloads if True. False force bool Force pause or not (see API.remove). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_remove ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Remove subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to remove. do_all: Pause all downloads if True. force: Force pause or not (see API.remove). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . remove_all (): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 ok = True result = api . remove ( downloads , force = force ) if all ( result ): return 0 if ok else 1 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_resume ( api , gids = None , do_all = False ) \u00a4 Resume subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to resume. None do_all bool Pause all downloads if True. False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_resume ( api : API , gids : List [ str ] = None , do_all : bool = False ) -> int : \"\"\" Resume subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to resume. do_all: Pause all downloads if True. Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . resume_all (): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 result = api . resume ( downloads ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1 subcommand_show ( api ) \u00a4 Show subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_show ( api : API ) -> int : \"\"\" Show subcommand. Arguments: api: The API instance to use. Returns: int: Always 0. \"\"\" downloads = api . get_downloads () def print_line ( * args ): # noqa: WPS430 (nested function) print ( \" {:<17} {:<9} {:>8} {:>12} {:>12} {:>8} {} \" . format ( * args )) # noqa: P101 (unindexed params) print_line ( \"GID\" , \"STATUS\" , \"PROGRESS\" , \"DOWN_SPEED\" , \"UP_SPEED\" , \"ETA\" , \"NAME\" ) for download in downloads : print_line ( download . gid , download . status , download . progress_string (), download . download_speed_string (), download . upload_speed_string (), download . eta_string (), download . name , ) return 0 subcommand_top ( api ) \u00a4 Top subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_top ( api : API ) -> int : \"\"\" Top subcommand. Arguments: api: The API instance to use. Returns: int: Always 0. \"\"\" if Interface is None : print ( \"The top-interface dependencies are not installed. Try running `pip install aria2p[tui]` to install them.\" , file = sys . stderr , ) return 1 interface = Interface ( api ) success = interface . run () return 0 if success else 1","title":"cli.py"},{"location":"reference/cli/#aria2p.cli","text":"Module that contains the command line application.","title":"aria2p.cli"},{"location":"reference/cli/#aria2p.cli.check_args","text":"Additional checks for command line arguments. Parameters: Name Type Description Default parser ArgumentParser An argument parser. required opts Namespace Parsed options. required Source code in aria2p/cli.py def check_args ( parser : argparse . ArgumentParser , opts : argparse . Namespace ) -> None : # noqa: WPS231 (complex) \"\"\" Additional checks for command line arguments. Arguments: parser: An argument parser. opts: Parsed options. \"\"\" subparsers = [ action for action in parser . _actions # noqa: WPS437 (protected attribute) if isinstance ( action , argparse . _SubParsersAction ) # noqa: WPS437 ][ 0 ] . choices gid_commands = ( \"pause\" , \"stop\" , \"remove\" , \"rm\" , \"del\" , \"delete\" , \"resume\" , \"start\" , \"autopurge\" , \"autoclear\" , \"autoremove\" , ) if opts . subcommand in gid_commands : if not opts . do_all and not opts . gids : subparsers [ opts . subcommand ] . error ( \"the following arguments are required: gids or --all\" ) elif opts . do_all and opts . gids : subparsers [ opts . subcommand ] . error ( \"argument -a/--all: not allowed with arguments gids\" ) elif opts . subcommand and opts . subcommand . startswith ( \"add\" ): if not opts . uris and not opts . from_file : subparsers [ opts . subcommand ] . error ( \"the following arguments are required: uris\" )","title":"check_args()"},{"location":"reference/cli/#aria2p.cli.get_method","text":"Return the actual aria2 method name from a differently formatted name. Parameters: Name Type Description Default name str A method name. required Returns: Type Description Optional[str] The real method name. Source code in aria2p/cli.py def get_method ( name : str ) -> Optional [ str ]: \"\"\" Return the actual aria2 method name from a differently formatted name. Arguments: name: A method name. Returns: The real method name. \"\"\" methods = {} for method in Client . METHODS : methods [ method . lower ()] = method methods [ method . split ( \".\" )[ 1 ] . lower ()] = method name = name . lower () name = name . replace ( \"-\" , \"\" ) name = name . replace ( \"_\" , \"\" ) return methods . get ( name )","title":"get_method()"},{"location":"reference/cli/#aria2p.cli.get_parser","text":"Return a parser for the command-line options and arguments. Returns: Type Description ArgumentParser An argument parser. Source code in aria2p/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return a parser for the command-line options and arguments. Returns: An argument parser. \"\"\" usage = \" %(prog)s [GLOBAL_OPTS...] COMMAND [COMMAND_OPTS...]\" # noqa: WPS323 (%-formatting) description = \"Command-line tool and Python library to interact with an `aria2c` daemon process through JSON-RPC.\" parser = argparse . ArgumentParser ( add_help = False , usage = usage , description = description , prog = \"aria2p\" ) main_help = \"Show this help message and exit. Commands also accept the -h/--help option.\" subcommand_help = \"Show this help message and exit.\" global_options = parser . add_argument_group ( title = \"Global options\" ) global_options . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = main_help ) global_options . add_argument ( \"-p\" , \"--port\" , dest = \"port\" , default = DEFAULT_PORT , type = int , help = \"Port to use to connect to the remote server.\" , ) global_options . add_argument ( \"-H\" , \"--host\" , dest = \"host\" , default = DEFAULT_HOST , help = \"Host address for the remote server.\" , ) global_options . add_argument ( \"-s\" , \"--secret\" , dest = \"secret\" , default = \"\" , help = \"Secret token to use to connect to the remote server.\" , ) global_options . add_argument ( \"-L\" , \"--log-level\" , dest = \"log_level\" , default = None , help = \"Log level to use\" , choices = ( \"TRACE\" , \"DEBUG\" , \"INFO\" , \"SUCCESS\" , \"WARNING\" , \"ERROR\" , \"CRITICAL\" ), type = str . upper , ) global_options . add_argument ( \"-P\" , \"--log-path\" , dest = \"log_path\" , default = None , help = \"Log path to use. Can be a directory or a file.\" , ) global_options . add_argument ( \"-T\" , \"--client-timeout\" , dest = \"client_timeout\" , default = DEFAULT_TIMEOUT , type = float , help = f \"Timeout in seconds for requests to the remote server. Floats supported. Default: { DEFAULT_TIMEOUT } .\" , ) # ========= SUBPARSERS ========= # subparsers = parser . add_subparsers ( dest = \"subcommand\" , title = \"Commands\" , metavar = \"\" , prog = \"aria2p\" ) def subparser ( command : str , text : str , ** kwargs ) -> argparse . ArgumentParser : # noqa: WPS430 (nested function) sub = subparsers . add_parser ( command , add_help = False , help = text , description = text , ** kwargs ) sub . add_argument ( \"-h\" , \"--help\" , action = \"help\" , help = subcommand_help ) return sub add_parser = subparser ( \"add\" , \"Add downloads with URIs/Magnets/torrents/Metalinks.\" ) add_magnets_parser = subparser ( \"add-magnets\" , \"Add downloads with Magnet URIs.\" , aliases = [ \"add-magnet\" ]) add_metalinks_parser = subparser ( \"add-metalinks\" , \"Add downloads with Metalink files.\" , aliases = [ \"add-metalink\" ]) add_torrents_parser = subparser ( \"add-torrents\" , \"Add downloads with torrent files.\" , aliases = [ \"add-torrent\" ]) subparser ( \"purge\" , \"Automatically purge completed/removed/failed downloads.\" , aliases = [ \"autoclear\" , \"autopurge\" , \"autoremove\" ], ) call_parser = subparser ( \"call\" , \"Call a remote method through the JSON-RPC client.\" ) pause_parser = subparser ( \"pause\" , \"Pause downloads.\" , aliases = [ \"stop\" ]) remove_parser = subparser ( \"remove\" , \"Remove downloads.\" , aliases = [ \"rm\" , \"del\" , \"delete\" ]) resume_parser = subparser ( \"resume\" , \"Resume downloads.\" , aliases = [ \"start\" ]) subparser ( \"show\" , \"Show the download progression.\" ) subparser ( \"top\" , \"Launch the top-like interactive interface.\" ) listen_parser = subparser ( \"listen\" , \"Listen to notifications.\" ) # ========= CALL PARSER ========= # call_parser . add_argument ( \"method\" , help = ( \"The method to call (case insensitive). \" \"Dashes and underscores will be removed so you can use as many as you want, or none. \" \"Prefixes like 'aria2.' or 'system.' are also optional.\" ), ) call_parser_mxg = call_parser . add_mutually_exclusive_group () call_parser_mxg . add_argument ( \"-P\" , \"--params-list\" , dest = \"params\" , nargs = \"+\" , help = \"Parameters as a list of strings.\" , ) call_parser_mxg . add_argument ( \"-J\" , \"--json-params\" , dest = \"params\" , help = \"Parameters as a JSON string. You should always wrap it at least once in an array '[]'.\" , ) # ========= ADD PARSER ========= # add_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The URIs/file-paths to add.\" ) add_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD MAGNET PARSER ========= # add_magnets_parser . add_argument ( \"uris\" , nargs = \"*\" , help = \"The magnet URIs to add.\" ) add_magnets_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load URIs from a file.\" ) # ========= ADD TORRENT PARSER ========= # add_torrents_parser . add_argument ( \"torrent_files\" , nargs = \"*\" , help = \"The paths to the torrent files.\" ) add_torrents_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= ADD METALINK PARSER ========= # add_metalinks_parser . add_argument ( \"metalink_files\" , nargs = \"*\" , help = \"The paths to the metalink files.\" ) add_metalinks_parser . add_argument ( \"-f\" , \"--from-file\" , dest = \"from_file\" , help = \"Load file paths from a file.\" ) # ========= PAUSE PARSER ========= # pause_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to pause.\" ) pause_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Pause all the downloads.\" ) pause_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Pause without contacting servers first.\" , ) # ========= RESUME PARSER ========= # resume_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to resume.\" ) resume_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Resume all the downloads.\" ) # ========= REMOVE PARSER ========= # remove_parser . add_argument ( \"gids\" , nargs = \"*\" , help = \"The GIDs of the downloads to remove.\" ) remove_parser . add_argument ( \"-a\" , \"--all\" , action = \"store_true\" , dest = \"do_all\" , help = \"Remove all the downloads.\" ) remove_parser . add_argument ( \"-f\" , \"--force\" , dest = \"force\" , action = \"store_true\" , help = \"Remove without contacting servers first.\" , ) # ========= LISTEN PARSER ========= # listen_parser . add_argument ( \"-c\" , \"--callbacks-module\" , dest = \"callbacks_module\" , help = \"Path to the Python module defining your notifications callbacks.\" , ) listen_parser . add_argument ( \"event_types\" , nargs = \"*\" , help = \"The types of notifications to process: \" \"start, pause, stop, error, complete or btcomplete. \" \"Example: aria2p listen error btcomplete. \" \"Useful if you want to spawn multiple specialized aria2p listener, \" \"for example one for each type of notification, \" \"but still want to use only one callback file.\" , ) listen_parser . add_argument ( \"-t\" , \"--timeout\" , dest = \"timeout\" , type = float , default = 5 , help = \"Timeout in seconds to use when waiting for data over the WebSocket at each iteration. \" \"Use small values for faster reactivity when stopping to listen.\" , ) return parser","title":"get_parser()"},{"location":"reference/cli/#aria2p.cli.main","text":"Run the main program. This function is executed when you type aria2p or python -m aria2p . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in aria2p/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `aria2p` or `python -m aria2p`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) kwargs = opts . __dict__ # noqa: WPS609 (special attribute) log_level = kwargs . pop ( \"log_level\" ) log_path = kwargs . pop ( \"log_path\" ) if log_path : log_path = Path ( log_path ) if log_path . is_dir (): log_path = log_path / \"aria2p- {time} .log\" enable_logger ( sink = log_path , level = log_level or \"WARNING\" ) elif log_level : enable_logger ( sink = sys . stderr , level = log_level ) logger . debug ( \"Checking arguments\" ) check_args ( parser , opts ) logger . debug ( \"Instantiating API\" ) api = API ( Client ( host = kwargs . pop ( \"host\" ), port = kwargs . pop ( \"port\" ), secret = kwargs . pop ( \"secret\" ), timeout = kwargs . pop ( \"client_timeout\" ), ), ) logger . info ( f \"API instantiated: { api !r} \" ) # Warn if no aria2 daemon process seems to be running logger . debug ( \"Testing connection\" ) try : api . client . get_version () except requests . ConnectionError as error : print ( f \"[ERROR] { error } \" , file = sys . stderr ) print ( file = sys . stderr ) print ( \"Please make sure that an instance of aria2c is running with RPC mode enabled,\" , file = sys . stderr ) print ( \"and that you have provided the right host, port and secret token.\" , file = sys . stderr ) print ( \"More information at https://aria2p.readthedocs.io/en/latest.\" , file = sys . stderr ) return 2 subcommands = { None : subcommand_top , \"show\" : subcommand_show , \"top\" : subcommand_top , \"call\" : subcommand_call , \"add\" : subcommand_add , \"add-magnet\" : subcommand_add_magnets , # alias for add-magnets \"add-magnets\" : subcommand_add_magnets , \"add-torrent\" : subcommand_add_torrents , # alias for add-torrents \"add-torrents\" : subcommand_add_torrents , \"add-metalink\" : subcommand_add_metalinks , # alias for add-metalinks \"add-metalinks\" : subcommand_add_metalinks , \"pause\" : subcommand_pause , \"stop\" : subcommand_pause , # alias for pause \"resume\" : subcommand_resume , \"start\" : subcommand_resume , # alias for resume \"remove\" : subcommand_remove , \"rm\" : subcommand_remove , # alias for remove \"del\" : subcommand_remove , # alias for remove \"delete\" : subcommand_remove , # alias for remove \"purge\" : subcommand_purge , \"autopurge\" : subcommand_purge , # alias for purge \"autoclear\" : subcommand_purge , # alias for purge \"autoremove\" : subcommand_purge , # alias for purge \"listen\" : subcommand_listen , } subcommand = kwargs . pop ( \"subcommand\" ) if subcommand : logger . debug ( \"Running subcommand \" + subcommand ) try : return subcommands [ subcommand ]( api , ** kwargs ) except ClientException as error : # noqa: WPS440 (variable overlap) print ( str ( error ), file = sys . stderr ) return error . code","title":"main()"},{"location":"reference/cli/#aria2p.cli.subcommand_add","text":"Add magnet subcommand. Parameters: Name Type Description Default api API The API instance to use. required uris List[str] The URIs or file-paths to add. None from_file str Path to the file to read uris from. Deprecated: Every URI that is a valid file-path and is not a torrent or a metalink is now read as an input file. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py def subcommand_add ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Arguments: api: The API instance to use. uris: The URIs or file-paths to add. from_file: Path to the file to read uris from. Deprecated: Every URI that is a valid file-path and is not a torrent or a metalink is now read as an input file. Returns: int: 0 if OK else 1. \"\"\" uris = uris or [] if from_file : logger . warning ( \"Deprecation warning: every URI that is a valid file-path \" \"and is not a torrent or a metalink is now read as an input file.\" , ) new_downloads = [] for uri in uris : new_downloads . extend ( api . add ( uri )) if new_downloads : for new_download in new_downloads : print ( f \"Created download { new_download . gid } \" ) return 0 print ( \"No new download was created\" , file = sys . stderr ) return 1","title":"subcommand_add()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_magnets","text":"Add magnet subcommand. Parameters: Name Type Description Default api API The API instance to use. required uris List[str] The URIs of the magnets. None from_file str Path to the file to read uris from. None Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_add_magnets ( api : API , uris : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add magnet subcommand. Arguments: api: The API instance to use. uris: The URIs of the magnets. from_file: Path to the file to read uris from. Returns: int: Always 0. \"\"\" ok = True if not uris : uris = [] if from_file : try : uris . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for uri in uris : new_download = api . add_magnet ( uri ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_magnets()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_metalinks","text":"Add metalink subcommand. Parameters: Name Type Description Default api API The API instance to use. required metalink_files List[str] The paths to the metalink files. None from_file str Path to the file to metalink files paths from. None Returns: Type Description int int: 0 if OK else 1. Source code in aria2p/cli.py def subcommand_add_metalinks ( api : API , metalink_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add metalink subcommand. Arguments: api: The API instance to use. metalink_files: The paths to the metalink files. from_file: Path to the file to metalink files paths from. Returns: int: 0 if OK else 1. \"\"\" ok = True if not metalink_files : metalink_files = [] if from_file : try : metalink_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for metalink_file in metalink_files : new_downloads = api . add_metalink ( metalink_file ) for download in new_downloads : print ( f \"Created download { download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_metalinks()"},{"location":"reference/cli/#aria2p.cli.subcommand_add_torrents","text":"Add torrent subcommand. Parameters: Name Type Description Default api API The API instance to use. required torrent_files List[str] The paths to the torrent files. None from_file str Path to the file to read torrent files paths from. None Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_add_torrents ( api : API , torrent_files : List [ str ] = None , from_file : str = None ) -> int : \"\"\" Add torrent subcommand. Arguments: api: The API instance to use. torrent_files: The paths to the torrent files. from_file: Path to the file to read torrent files paths from. Returns: int: Always 0. \"\"\" ok = True if not torrent_files : torrent_files = [] if from_file : try : torrent_files . extend ( read_lines ( from_file )) except OSError : print ( f \"Cannot open file: { from_file } \" , file = sys . stderr ) ok = False for torrent_file in torrent_files : new_download = api . add_torrent ( torrent_file ) print ( f \"Created download { new_download . gid } \" ) return 0 if ok else 1","title":"subcommand_add_torrents()"},{"location":"reference/cli/#aria2p.cli.subcommand_call","text":"Call subcommand. Parameters: Name Type Description Default api API The API instance to use. required method str Name of the method to call. required params Union[str, List[str]] Parameters to use when calling method. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_call ( api : API , method : str , params : Union [ str , List [ str ]]) -> int : \"\"\" Call subcommand. Arguments: api: The API instance to use. method: Name of the method to call. params: Parameters to use when calling method. Returns: int: Always 0. \"\"\" real_method = get_method ( method ) if real_method is None : print ( f \"aria2p: call: Unknown method { method } .\" , file = sys . stderr ) print ( \" Run 'aria2p call listmethods' to list the available methods.\" , file = sys . stderr ) return 1 if isinstance ( params , str ): params = json . loads ( params ) elif params is None : params = [] response = api . client . call ( real_method , params ) print ( json . dumps ( response )) return 0","title":"subcommand_call()"},{"location":"reference/cli/#aria2p.cli.subcommand_listen","text":"Listen subcommand. Parameters: Name Type Description Default api API The API instance to use. required callbacks_module Union[pathlib.Path, str] The path to the module to import, containing the callbacks as functions. None event_types List[str] The event types to process. None timeout int The timeout to pass to the WebSocket connection, in seconds. 5 Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_listen ( api : API , callbacks_module : PathOrStr = None , event_types : List [ str ] = None , timeout : int = 5 , ) -> int : \"\"\" Listen subcommand. Arguments: api: The API instance to use. callbacks_module: The path to the module to import, containing the callbacks as functions. event_types: The event types to process. timeout: The timeout to pass to the WebSocket connection, in seconds. Returns: int: Always 0. \"\"\" if not callbacks_module : print ( \"aria2p: listen: Please provide the callback module file path with -c option\" , file = sys . stderr ) return 1 if isinstance ( callbacks_module , Path ): callbacks_module = str ( callbacks_module ) if not event_types : event_types = [ \"start\" , \"pause\" , \"stop\" , \"error\" , \"complete\" , \"btcomplete\" ] spec = importlib_util . spec_from_file_location ( \"aria2p_callbacks\" , callbacks_module ) callbacks = importlib_util . module_from_spec ( spec ) if callbacks is None : print ( f \"aria2p: Could not import module file { callbacks_module } \" , file = sys . stderr ) return 1 spec . loader . exec_module ( callbacks ) callbacks_kwargs = {} for callback_name in ( # noqa: WPS352 (multiline loop) \"on_download_start\" , \"on_download_pause\" , \"on_download_stop\" , \"on_download_error\" , \"on_download_complete\" , \"on_bt_download_complete\" , ): if callback_name [ 3 :] . replace ( \"download\" , \"\" ) . replace ( \"_\" , \"\" ) in event_types : callback = getattr ( callbacks , callback_name , None ) if callback : callbacks_kwargs [ callback_name ] = callback api . listen_to_notifications ( timeout = timeout , handle_signals = True , threaded = False , ** callbacks_kwargs ) return 0","title":"subcommand_listen()"},{"location":"reference/cli/#aria2p.cli.subcommand_pause","text":"Pause subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to pause. None do_all bool Pause all downloads if True. False force bool Force pause or not (see API.pause). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_pause ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Pause subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to pause. do_all: Pause all downloads if True. force: Force pause or not (see API.pause). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . pause_all ( force = force ): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 result = api . pause ( downloads , force = force ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_pause()"},{"location":"reference/cli/#aria2p.cli.subcommand_purge","text":"Purge subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_purge ( api : API ) -> int : \"\"\" Purge subcommand. Arguments: api: The API instance to use. Returns: int: 0 if all success, 1 if one failure. \"\"\" if api . autopurge (): return 0 return 1","title":"subcommand_purge()"},{"location":"reference/cli/#aria2p.cli.subcommand_remove","text":"Remove subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to remove. None do_all bool Pause all downloads if True. False force bool Force pause or not (see API.remove). False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_remove ( api : API , gids : List [ str ] = None , do_all : bool = False , force : bool = False ) -> int : \"\"\" Remove subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to remove. do_all: Pause all downloads if True. force: Force pause or not (see API.remove). Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . remove_all (): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 ok = True result = api . remove ( downloads , force = force ) if all ( result ): return 0 if ok else 1 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_remove()"},{"location":"reference/cli/#aria2p.cli.subcommand_resume","text":"Resume subcommand. Parameters: Name Type Description Default api API The API instance to use. required gids List[str] The GIDs of the downloads to resume. None do_all bool Pause all downloads if True. False Returns: Type Description int int: 0 if all success, 1 if one failure. Source code in aria2p/cli.py def subcommand_resume ( api : API , gids : List [ str ] = None , do_all : bool = False ) -> int : \"\"\" Resume subcommand. Arguments: api: The API instance to use. gids: The GIDs of the downloads to resume. do_all: Pause all downloads if True. Returns: int: 0 if all success, 1 if one failure. \"\"\" if do_all : if api . resume_all (): return 0 return 1 try : downloads = api . get_downloads ( gids ) except ClientException as error : print ( str ( error ), file = sys . stderr ) return 1 result = api . resume ( downloads ) if all ( result ): return 0 for item in result : if isinstance ( item , ClientException ): print ( item , file = sys . stderr ) return 1","title":"subcommand_resume()"},{"location":"reference/cli/#aria2p.cli.subcommand_show","text":"Show subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_show ( api : API ) -> int : \"\"\" Show subcommand. Arguments: api: The API instance to use. Returns: int: Always 0. \"\"\" downloads = api . get_downloads () def print_line ( * args ): # noqa: WPS430 (nested function) print ( \" {:<17} {:<9} {:>8} {:>12} {:>12} {:>8} {} \" . format ( * args )) # noqa: P101 (unindexed params) print_line ( \"GID\" , \"STATUS\" , \"PROGRESS\" , \"DOWN_SPEED\" , \"UP_SPEED\" , \"ETA\" , \"NAME\" ) for download in downloads : print_line ( download . gid , download . status , download . progress_string (), download . download_speed_string (), download . upload_speed_string (), download . eta_string (), download . name , ) return 0","title":"subcommand_show()"},{"location":"reference/cli/#aria2p.cli.subcommand_top","text":"Top subcommand. Parameters: Name Type Description Default api API The API instance to use. required Returns: Type Description int int: Always 0. Source code in aria2p/cli.py def subcommand_top ( api : API ) -> int : \"\"\" Top subcommand. Arguments: api: The API instance to use. Returns: int: Always 0. \"\"\" if Interface is None : print ( \"The top-interface dependencies are not installed. Try running `pip install aria2p[tui]` to install them.\" , file = sys . stderr , ) return 1 interface = Interface ( api ) success = interface . run () return 0 if success else 1","title":"subcommand_top()"},{"location":"reference/client/","text":"\u00a4 Client module. This module defines the ClientException and Client classes, which are used to communicate with a remote aria2c process through the JSON-RPC protocol. Client \u00a4 The JSON-RPC client class. In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote. This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri). The class defines a METHODS variable which contains the names of the available methods. The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument. The class provides utility methods: call , which performs a JSON-RPC call for a single method; batch_call , which performs a JSON-RPC call for a list of methods; multicall2 , which is an equivalent of multicall, but easier to use; post , which is responsible for actually sending a payload to the remote process using a POST request; get_payload , which is used to build payloads; get_params , which is used to build list of parameters. server: str property readonly \u00a4 Return the full remote process / server address. Returns: Type Description str The server address. ws_server: str property readonly \u00a4 Return the full WebSocket remote server address. Returns: Type Description str The WebSocket server address. __init__ ( self , host = 'http://localhost' , port = 6800 , secret = '' , timeout = 60.0 ) special \u00a4 Initialize the object. Parameters: Name Type Description Default host str The remote process address. 'http://localhost' port int The remote process port. 6800 secret str The secret token. '' timeout float The timeout to use for requests towards the remote server. 60.0 Source code in aria2p/client.py def __init__ ( # noqa: S107 (hardcoded password) self , host : str = DEFAULT_HOST , port : int = DEFAULT_PORT , secret : str = \"\" , timeout : float = DEFAULT_TIMEOUT , ) -> None : \"\"\" Initialize the object. Arguments: host: The remote process address. port: The remote process port. secret: The secret token. timeout: The timeout to use for requests towards the remote server. \"\"\" host = host . rstrip ( \"/\" ) self . host = host self . port = port self . secret = secret self . timeout = timeout self . listening = False add_metalink ( self , metalink , options = None , position = None ) \u00a4 Add a Metalink download. This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads. Original signature: aria2.addMetalink([secret], metalink[, options[, position]]) If [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by [ --dir ][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [ --save-session ][aria2p.options.Options.save_session]. Parameters: Name Type Description Default metalink str metalink is a base64-encoded string which contains the contents of the \".metalink\" file. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description List[str] The GID of the created download. Examples: Original JSON-RPC Example The following examples add local file file.meta4. >>> import urllib2 , json , base64 >>> metalink = base64 . b64encode ( open ( 'file.meta4' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addMetalink' , ... 'params' :[ metalink ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}' Source code in aria2p/client.py def add_metalink ( self , metalink : str , options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> List [ str ]: \"\"\" Add a Metalink download. This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads. Original signature: aria2.addMetalink([secret], metalink[, options[, position]]) If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by [`--dir`][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session]. Arguments: metalink: `metalink` is a base64-encoded string which contains the contents of the \".metalink\" file. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following examples add local file file.meta4. >>> import urllib2, json, base64 >>> metalink = base64.b64encode(open('file.meta4').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addMetalink', ... 'params':[metalink]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}' \"\"\" return self . call ( self . ADD_METALINK , [ metalink , options , position ]) add_torrent ( self , torrent , uris , options = None , position = None ) \u00a4 Add a BitTorrent download. This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download. Original signature: aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) If you want to add a BitTorrent Magnet URI, use the [ add_uri() ][aria2p.client.Client.add_uri] method instead. If [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by [ --dir ][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [ --save-session ][aria2p.options.Options.save_session]. Parameters: Name Type Description Default torrent str torrent must be a base64-encoded string containing the contents of the \".torrent\" file. required uris List[str] uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description str The GID of the created download. Examples: Original JSON-RPC Example The following examples add local file file.torrent. >>> import urllib2 , json , base64 >>> torrent = base64 . b64encode ( open ( 'file.torrent' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , 'params' :[ torrent ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def add_torrent ( self , torrent : str , uris : List [ str ], options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> str : \"\"\" Add a BitTorrent download. This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download. Original signature: aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) If you want to add a BitTorrent Magnet URI, use the [`add_uri()`][aria2p.client.Client.add_uri] method instead. If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by [`--dir`][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session]. Arguments: torrent: `torrent` must be a base64-encoded string containing the contents of the \".torrent\" file. uris: `uris` is an array of URIs (string). `uris` is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following examples add local file file.torrent. >>> import urllib2, json, base64 >>> torrent = base64.b64encode(open('file.torrent').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', 'params':[torrent]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . ADD_TORRENT , [ torrent , uris , options , position ]) add_uri ( self , uris , options = None , position = None ) \u00a4 Add a new download. This method adds a new download and returns the GID of the newly registered download. Original signature: aria2.addUri([secret], uris[, options[, position]]) Parameters: Name Type Description Default uris List[str] uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description str The GID of the created download. Examples: Original JSON-RPC Example The following example adds http://example.org/file : >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def add_uri ( self , uris : List [ str ], options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> str : \"\"\" Add a new download. This method adds a new download and returns the GID of the newly registered download. Original signature: aria2.addUri([secret], uris[, options[, position]]) Arguments: uris: `uris` is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following example adds http://example.org/file: >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . ADD_URI , params = [ uris , options , position ]) batch_call ( self , calls , insert_secret = True ) \u00a4 Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: Name Type Description Default calls List[Tuple[str, List[str], Union[str, int]]] A list of tuples composed of method name, parameters and ID. required insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description List[Union[dict, list, str, int]] The results for each call in the batch. Source code in aria2p/client.py def batch_call ( self , calls : CallsType , insert_secret : bool = True , ) -> List [ CallReturnType ]: \"\"\" Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Arguments: calls: A list of tuples composed of method name, parameters and ID. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The results for each call in the batch. \"\"\" payloads = [] for method , params , msg_id in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) payloads . append ( self . get_payload ( method , params , msg_id , as_json = False )) payload : str = json . dumps ( payloads ) responses = self . post ( payload ) return [ self . res_or_raise ( resp ) for resp in responses ] call ( self , method , params = None , msg_id = None , insert_secret = True ) \u00a4 Call a single JSON-RPC method. Parameters: Name Type Description Default method str The method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] A list of parameters. None msg_id Union[int, str] The ID of the call, sent back with the server's answer. None insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object. Source code in aria2p/client.py def call ( self , method : str , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , insert_secret : bool = True , ) -> CallReturnType : \"\"\" Call a single JSON-RPC method. Arguments: method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: A list of parameters. msg_id: The ID of the call, sent back with the server's answer. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object. \"\"\" params = self . get_params ( * ( params or [])) if insert_secret and self . secret : if method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) elif method == self . MULTICALL : for param in params [ 0 ]: param [ \"params\" ] . insert ( 0 , f \"token: { self . secret } \" ) return self . res_or_raise ( self . post ( self . get_payload ( method , params , msg_id = msg_id ))) change_global_option ( self , options ) \u00a4 Change the global options dynamically. Original signature: aria2.changeGlobalOption([secret], options) Parameters: Name Type Description Default options dict The following options are available: bt-max-open-files download-result keep-unfinished-download-result log log-level max-concurrent-downloads max-download-result max-overall-download-limit max-overall-upload-limit optimize-concurrent-downloads save-cookies save-session server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum , index-out , out , pause and select-file . With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode. required Returns: Type Description str \"OK\" for success. Source code in aria2p/client.py def change_global_option ( self , options : dict ) -> str : \"\"\" Change the global options dynamically. Original signature: aria2.changeGlobalOption([secret], options) Arguments: options: The following options are available: - `bt-max-open-files` - `download-result` - `keep-unfinished-download-result` - `log` - `log-level` - `max-concurrent-downloads` - `max-download-result` - `max-overall-download-limit` - `max-overall-upload-limit` - `optimize-concurrent-downloads` - `save-cookies` - `save-session` - `server-stat-of` In addition, options listed in the Input File subsection are available, except for following options: `checksum`, `index-out`, `out`, `pause` and `select-file`. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode. Returns: `\"OK\"` for success. \"\"\" return self . call ( self . CHANGE_GLOBAL_OPTION , [ options ]) change_option ( self , gid , options ) \u00a4 Change a download options dynamically. Original signature: aria2.changeOption([secret], gid, options) Parameters: Name Type Description Default gid str The download to change options of. required options dict The options listed in Input File subsection are available, except for following options: dry-run metalink-base-uri parameterized-uri pause piece-length rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): bt-max-peers bt-request-peer-speed-limit bt-remove-unselected-file force-save max-download-limit max-upload-limit required Returns: Type Description str \"OK\" for success. Examples: Original JSON-RPC Example The following examples set the max-download-limit option to 20K for the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeOption' , ... 'params' :[ '0000000000000001' , ... { 'max-download-limit' : '10K' }]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } Source code in aria2p/client.py def change_option ( self , gid : str , options : dict ) -> str : \"\"\" Change a download options dynamically. Original signature: aria2.changeOption([secret], gid, options) Arguments: gid: The download to change options of. options: The options listed in Input File subsection are available, except for following options: - `dry-run` - `metalink-base-uri` - `parameterized-uri` - `pause` - `piece-length` - `rpc-save-upload-metadata` Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): - `bt-max-peers` - `bt-request-peer-speed-limit` - `bt-remove-unselected-file` - `force-save` - `max-download-limit` - `max-upload-limit` Returns: `\"OK\"` for success. Examples: **Original JSON-RPC Example** The following examples set the max-download-limit option to 20K for the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeOption', ... 'params':['0000000000000001', ... {'max-download-limit':'10K'}]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} \"\"\" return self . call ( self . CHANGE_OPTION , [ gid , options ]) change_position ( self , gid , pos , how ) \u00a4 Change position of a download. This method changes the position of the download denoted by gid in the queue. Original signature: aria2.changePosition([secret], gid, pos, how) Parameters: Name Type Description Default gid str The download to change the position of. required pos int An integer. required how str POS_SET , POS_CUR or POS_END . If how is POS_SET , it moves the download to a position relative to the beginning of the queue. If how is POS_CUR , it moves the download to a position relative to the current position. If how is POS_END , it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. For example, if GID#0000000000000001 is currently in position 3, change_position('0000000000000001', -1, 'POS_CUR') will change its position to 2. Additionally change_position('0000000000000001', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). required Returns: Type Description int An integer denoting the resulting position. Examples: Original JSON-RPC Example The following examples move the download GID#0000000000000001 to the front of the queue. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changePosition' , ... 'params' :[ '0000000000000001' , 0 , 'POS_SET' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : 0 } Source code in aria2p/client.py def change_position ( self , gid : str , pos : int , how : str ) -> int : \"\"\" Change position of a download. This method changes the position of the download denoted by `gid` in the queue. Original signature: aria2.changePosition([secret], gid, pos, how) Arguments: gid: The download to change the position of. pos: An integer. how: `POS_SET`, `POS_CUR` or `POS_END`. - If `how` is `POS_SET`, it moves the download to a position relative to the beginning of the queue. - If `how` is `POS_CUR`, it moves the download to a position relative to the current position. - If `how` is `POS_END`, it moves the download to a position relative to the end of the queue. - If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. For example, if GID#0000000000000001 is currently in position 3, `change_position('0000000000000001', -1, 'POS_CUR')` will change its position to 2. Additionally `change_position('0000000000000001', 0, 'POS_SET')` will change its position to 0 (the beginning of the queue). Returns: An integer denoting the resulting position. Examples: **Original JSON-RPC Example** The following examples move the download GID#0000000000000001 to the front of the queue. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changePosition', ... 'params':['0000000000000001', 0, 'POS_SET']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0} \"\"\" return self . call ( self . CHANGE_POSITION , [ gid , pos , how ]) change_uri ( self , gid , file_index , del_uris , add_uris , position = None ) \u00a4 Remove the URIs in del_uris from and appends the URIs in add_uris to download denoted by gid. Original signature: aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) Parameters: Name Type Description Default gid str The download to change URIs of. required file_index int Used to select which file to remove/attach given URIs. file_index is 1-based. required del_uris List[str] List of strings. required add_uris List[str] List of strings. required position Optional[int] Used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. None A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in del_uris . In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in del_uris . Returns: Type Description List[int] A list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. Examples: Original JSON-RPC Example The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeUri' , ... 'params' :[ '0000000000000001' , 1 , [], [ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ 0 , 1 ]} Source code in aria2p/client.py def change_uri ( self , gid : str , file_index : int , del_uris : List [ str ], add_uris : List [ str ], position : Optional [ int ] = None , ) -> List [ int ]: \"\"\" Remove the URIs in `del_uris` from and appends the URIs in `add_uris` to download denoted by gid. Original signature: aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) Arguments: gid: The download to change URIs of. file_index: Used to select which file to remove/attach given URIs. `file_index` is 1-based. del_uris: List of strings. add_uris: List of strings. position: Used to specify where URIs are inserted in the existing waiting URI list. `position` is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. `position` is the position after URIs are removed, not the position when this method is called. A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in `del_uris`. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in `del_uris`. Returns: A list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. Examples: **Original JSON-RPC Example** The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeUri', ... 'params':['0000000000000001', 1, [], ['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]} \"\"\" return self . call ( self . CHANGE_URI , [ gid , file_index , del_uris , add_uris , position ]) force_pause ( self , gid ) \u00a4 Force pause a download. This method pauses the download denoted by gid. This method behaves just like [ pause() ][aria2p.client.Client.pause] except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forcePause([secret], gid) Parameters: Name Type Description Default gid str The download to force pause. required Returns: Type Description str The GID of the paused download. Source code in aria2p/client.py def force_pause ( self , gid : str ) -> str : \"\"\" Force pause a download. This method pauses the download denoted by gid. This method behaves just like [`pause()`][aria2p.client.Client.pause] except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forcePause([secret], gid) Arguments: gid: The download to force pause. Returns: The GID of the paused download. \"\"\" return self . call ( self . FORCE_PAUSE , [ gid ]) force_pause_all ( self ) \u00a4 Force pause all active/waiting downloads. This method is equal to calling [ force_pause() ][aria2p.client.Client.force_pause] for every active/waiting download. Original signature: aria2.forcePauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def force_pause_all ( self ) -> str : \"\"\" Force pause all active/waiting downloads. This method is equal to calling [`force_pause()`][aria2p.client.Client.force_pause] for every active/waiting download. Original signature: aria2.forcePauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . FORCE_PAUSE_ALL ) force_remove ( self , gid ) \u00a4 Force remove a download. This method removes the download denoted by gid. This method behaves just like [ remove() ][aria2p.client.Client.remove] except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forceRemove([secret], gid) Parameters: Name Type Description Default gid str The download to force remove. required Returns: Type Description str The GID of the removed download. Source code in aria2p/client.py def force_remove ( self , gid : str ) -> str : \"\"\" Force remove a download. This method removes the download denoted by gid. This method behaves just like [`remove()`][aria2p.client.Client.remove] except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forceRemove([secret], gid) Arguments: gid: The download to force remove. Returns: The GID of the removed download. \"\"\" return self . call ( self . FORCE_REMOVE , [ gid ]) force_shutdown ( self ) \u00a4 Force shutdown aria2. This method shuts down aria2. This method behaves like [ shutdown() ][aria2p.client.Client.shutdown] without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. Original signature: aria2.forceShutdown([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def force_shutdown ( self ) -> str : \"\"\" Force shutdown aria2. This method shuts down aria2. This method behaves like [`shutdown()`][aria2p.client.Client.shutdown] without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. Original signature: aria2.forceShutdown([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . FORCE_SHUTDOWN ) get_files ( self , gid ) \u00a4 Return file list of a download. This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index : Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path : File path. length : File size in bytes. completedLength : Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. This is because completedLength in [ get_files() ][aria2p.client.Client.get_files] only includes completed pieces. On the other hand, completedLength in [ tell_status() ][aria2p.client.Client.tell_status] also includes partially completed pieces. selected : true if this file is selected by [ --select-file ][aria2p.options.Options.select_file] option. If [ --select-file ][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the [ get_uris() ][aria2p.client.Client.get_uris] method. Original signature: aria2.getFiles([secret], gid) Parameters: Name Type Description Default gid str The download to list files of. required Returns: Type Description dict The file list of a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getFiles' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}]} Source code in aria2p/client.py def get_files ( self , gid : str ) -> dict : \"\"\" Return file list of a download. This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. - `path`: File path. - `length`: File size in bytes. - `completedLength`: Completed length of this file in bytes. Please note that it is possible that sum of `completedLength` is less than the `completedLength` returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. This is because `completedLength` in [`get_files()`][aria2p.client.Client.get_files] only includes completed pieces. On the other hand, `completedLength` in [`tell_status()`][aria2p.client.Client.tell_status] also includes partially completed pieces. - `selected`: true if this file is selected by [`--select-file`][aria2p.options.Options.select_file] option. If [`--select-file`][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. - `uris` Returns a list of URIs for this file. The element type is the same struct used in the [`get_uris()`][aria2p.client.Client.get_uris] method. Original signature: aria2.getFiles([secret], gid) Arguments: gid: The download to list files of. Returns: The file list of a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getFiles', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}]} \"\"\" return self . call ( self . GET_FILES , [ gid ]) get_global_option ( self ) \u00a4 Return the global options. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the [ get_option() ][aria2p.client.Client.get_option] method. Original signature: aria2.getGlobalOption([secret]) Returns: Type Description dict The global options. The response is a struct. Its keys are the names of options. Values are strings. Source code in aria2p/client.py def get_global_option ( self ) -> dict : \"\"\" Return the global options. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the [`get_option()`][aria2p.client.Client.get_option] method. Original signature: aria2.getGlobalOption([secret]) Returns: The global options. The response is a struct. Its keys are the names of options. Values are strings. \"\"\" return self . call ( self . GET_GLOBAL_OPTION ) get_global_stat ( self ) \u00a4 Return global statistics such as the overall download and upload speeds. Original signature: aria2.getGlobalStat([secret]) Returns: Type Description dict A struct that contains the following keys (values are strings): downloadSpeed : Overall download speed (byte/sec). uploadSpeed : Overall upload speed(byte/sec). numActive : The number of active downloads. numWaiting : The number of waiting downloads. numStopped : The number of stopped downloads in the current session. This value is capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. numStoppedTotal : The number of stopped downloads in the current session and not capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getGlobalStat' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'downloadSpeed' : u '21846' , u 'numActive' : u '2' , u 'numStopped' : u '0' , u 'numWaiting' : u '0' , u 'uploadSpeed' : u '0' }} Source code in aria2p/client.py def get_global_stat ( self ) -> dict : \"\"\" Return global statistics such as the overall download and upload speeds. Original signature: aria2.getGlobalStat([secret]) Returns: A struct that contains the following keys (values are strings): - `downloadSpeed`: Overall download speed (byte/sec). - `uploadSpeed`: Overall upload speed(byte/sec). - `numActive`: The number of active downloads. - `numWaiting`: The number of waiting downloads. - `numStopped`: The number of stopped downloads in the current session. This value is capped by the [`--max-download-result`][aria2p.options.Options.max_download_result] option. - `numStoppedTotal`: The number of stopped downloads in the current session and not capped by the [`--max-download-result`][aria2p.options.Options.max_download_result] option. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getGlobalStat'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'downloadSpeed': u'21846', u'numActive': u'2', u'numStopped': u'0', u'numWaiting': u'0', u'uploadSpeed': u'0'}} \"\"\" return self . call ( self . GET_GLOBAL_STAT ) get_option ( self , gid ) \u00a4 Return options of a download. Original signature: aria2.getOption([secret], gid) Parameters: Name Type Description Default gid str The download to get the options of. required Returns: Type Description dict A struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Examples: Original JSON-RPC Example The following examples get options of the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getOption' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'allow-overwrite' : u 'false' , u 'allow-piece-length-change' : u 'false' , u 'always-resume' : u 'true' , u 'async-dns' : u 'true' , ... Source code in aria2p/client.py def get_option ( self , gid : str ) -> dict : \"\"\" Return options of a download. Original signature: aria2.getOption([secret], gid) Arguments: gid: The download to get the options of. Returns: A struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Examples: **Original JSON-RPC Example** The following examples get options of the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getOption', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'allow-overwrite': u'false', u'allow-piece-length-change': u'false', u'always-resume': u'true', u'async-dns': u'true', ... \"\"\" return self . call ( self . GET_OPTION , [ gid ]) get_params ( * args ) staticmethod \u00a4 Build the list of parameters. This method simply removes the None values from the given arguments. Parameters: Name Type Description Default *args Any List of parameters. () Returns: Type Description list A new list, with None values filtered out. Source code in aria2p/client.py @staticmethod def get_params ( * args : Any ) -> list : \"\"\" Build the list of parameters. This method simply removes the `None` values from the given arguments. Arguments: *args: List of parameters. Returns: A new list, with `None` values filtered out. \"\"\" return [ _ for _ in args if _ is not None ] get_payload ( method , params = None , msg_id = None , as_json = True ) staticmethod \u00a4 Build a payload. Parameters: Name Type Description Default method The method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] The list of parameters. None msg_id Union[int, str] The ID of the call, sent back with the server's answer. None as_json bool Whether to return the payload as a JSON-string or Python dictionary. True Returns: Type Description Union[str, dict] The payload as a JSON string or as Python dictionary. Source code in aria2p/client.py @staticmethod def get_payload ( method , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , as_json : bool = True , ) -> Union [ str , dict ]: \"\"\" Build a payload. Arguments: method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: The list of parameters. msg_id: The ID of the call, sent back with the server's answer. as_json: Whether to return the payload as a JSON-string or Python dictionary. Returns: The payload as a JSON string or as Python dictionary. \"\"\" payload = { \"jsonrpc\" : \"2.0\" , \"method\" : method } if msg_id is not None : payload [ \"id\" ] = msg_id else : payload [ \"id\" ] = DEFAULT_ID if params : payload [ \"params\" ] = params return json . dumps ( payload ) if as_json else payload get_peers ( self , gid ) \u00a4 Return peers list of a download. This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId : Percent-encoded peer ID. ip : IP address of the peer. port : Port number of the peer. bitfield : Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking : true if aria2 is choking the peer. Otherwise false. peerChoking : true if the peer is choking aria2. Otherwise false. downloadSpeed : Download speed (byte/sec) that this client obtains from the peer. uploadSpeed : Upload speed(byte/sec) that this client uploads to the peer. seeder : true if this peer is a seeder. Otherwise false. Original signature: aria2.getPeers([secret], gid) Parameters: Name Type Description Default gid str The download to get peers from. required Returns: Type Description dict The peers connected to a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getPeers' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'amChoking' : u 'true' , u 'bitfield' : u 'ffffffffffffffffffffffffffffffffffffffff' , u 'downloadSpeed' : u '10602' , u 'ip' : u '10.0.0.9' , u 'peerChoking' : u 'false' , u 'peerId' : u 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , u 'port' : u '6881' , u 'seeder' : u 'true' , u 'uploadSpeed' : u '0' }, { u 'amChoking' : u 'false' , u 'bitfield' : u 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , u 'downloadSpeed' : u '8654' , u 'ip' : u '10.0.0.30' , u 'peerChoking' : u 'false' , u 'peerId' : u 'bittorrent client758' , u 'port' : u '37842' , u 'seeder' : u 'false' , u 'uploadSpeed' : u '6890' }]} Source code in aria2p/client.py def get_peers ( self , gid : str ) -> dict : \"\"\" Return peers list of a download. This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. - `peerId`: Percent-encoded peer ID. - `ip`: IP address of the peer. - `port`: Port number of the peer. - `bitfield`: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. - `amChoking`: true if aria2 is choking the peer. Otherwise false. - `peerChoking`: true if the peer is choking aria2. Otherwise false. - `downloadSpeed`: Download speed (byte/sec) that this client obtains from the peer. - `uploadSpeed`: Upload speed(byte/sec) that this client uploads to the peer. - `seeder`: true if this peer is a seeder. Otherwise false. Original signature: aria2.getPeers([secret], gid) Arguments: gid: The download to get peers from. Returns: The peers connected to a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getPeers', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'amChoking': u'true', u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff', u'downloadSpeed': u'10602', u'ip': u'10.0.0.9', u'peerChoking': u'false', u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', u'port': u'6881', u'seeder': u'true', u'uploadSpeed': u'0'}, {u'amChoking': u'false', u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', u'downloadSpeed': u'8654', u'ip': u'10.0.0.30', u'peerChoking': u'false', u'peerId': u'bittorrent client758', u'port': u'37842', u'seeder': u'false', u'uploadSpeed': u'6890'}]} \"\"\" return self . call ( self . GET_PEERS , [ gid ]) get_servers ( self , gid ) \u00a4 Return servers currently connected for a download. This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index : Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers : A list of structs which contain the following keys. uri : Original URI. currentUri : This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. downloadSpeed : Download speed (byte/sec). Original signature: aria2.getServers([secret], gid) Parameters: Name Type Description Default gid str The download to get servers from. required Returns: Type Description dict The servers connected to a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getServers' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'servers' : [{ u 'currentUri' : u 'http://example.org/file' , u 'downloadSpeed' : u '10467' , u 'uri' : u 'http://example.org/file' }]}]} Source code in aria2p/client.py def get_servers ( self , gid : str ) -> dict : \"\"\" Return servers currently connected for a download. This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. - `servers`: A list of structs which contain the following keys. - `uri`: Original URI. - `currentUri`: This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. - `downloadSpeed`: Download speed (byte/sec). Original signature: aria2.getServers([secret], gid) Arguments: gid: The download to get servers from. Returns: The servers connected to a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getServers', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'servers': [{u'currentUri': u'http://example.org/file', u'downloadSpeed': u'10467', u'uri': u'http://example.org/file'}]}]} \"\"\" return self . call ( self . GET_SERVERS , [ gid ]) get_session_info ( self ) \u00a4 Return session information. Returns: Type Description dict A struct that contains the sessionId key, which is generated each time aria2 is invoked. Original signature: aria2.getSessionInfo([secret]) Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getSessionInfo' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'sessionId' : u 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' }} Source code in aria2p/client.py def get_session_info ( self ) -> dict : \"\"\" Return session information. Returns: A struct that contains the `sessionId` key, which is generated each time aria2 is invoked. Original signature: aria2.getSessionInfo([secret]) Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getSessionInfo'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}} \"\"\" return self . call ( self . GET_SESSION_INFO ) get_uris ( self , gid ) \u00a4 Return URIs used in a download. This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri : URI status : 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. Original signature: aria2.getUris([secret], gid) Parameters: Name Type Description Default gid str The download to list URIs of. required Returns: Type Description dict The URIs used in a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getUris' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]} Source code in aria2p/client.py def get_uris ( self , gid : str ) -> dict : \"\"\" Return URIs used in a download. This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. - `uri`: URI - `status`: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. Original signature: aria2.getUris([secret], gid) Arguments: gid: The download to list URIs of. Returns: The URIs used in a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getUris', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'status': u'used', u'uri': u'http://example.org/file'}]} \"\"\" return self . call ( self . GET_URIS , [ gid ]) get_version ( self ) \u00a4 Return aria2 version and the list of enabled features. Original signature: aria2.getVersion([secret]) Returns: Type Description str A struct that contains the following keys: version : Version number of aria2 as a string. enabledFeatures : List of enabled features. Each feature is given as a string. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getVersion' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'enabledFeatures' : [ u 'Async DNS' , u 'BitTorrent' , u 'Firefox3 Cookie' , u 'GZip' , u 'HTTPS' , u 'Message Digest' , u 'Metalink' , u 'XML-RPC' ], u 'version' : u '1.11.0' }} Source code in aria2p/client.py def get_version ( self ) -> str : \"\"\" Return aria2 version and the list of enabled features. Original signature: aria2.getVersion([secret]) Returns: A struct that contains the following keys: - `version`: Version number of aria2 as a string. - `enabledFeatures`: List of enabled features. Each feature is given as a string. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getVersion'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'enabledFeatures': [u'Async DNS', u'BitTorrent', u'Firefox3 Cookie', u'GZip', u'HTTPS', u'Message Digest', u'Metalink', u'XML-RPC'], u'version': u'1.11.0'}} \"\"\" return self . call ( self . GET_VERSION ) list_methods ( self ) \u00a4 Return the available RPC methods. This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. Original signature: system.listMethods() Returns: Type Description List[str] The list of available RPC methods. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listMethods' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.addUri' , u 'aria2.addTorrent' , ... Source code in aria2p/client.py def list_methods ( self ) -> List [ str ]: \"\"\" Return the available RPC methods. This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. Original signature: system.listMethods() Returns: The list of available RPC methods. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listMethods'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.addUri', u'aria2.addTorrent', ... \"\"\" return self . call ( self . LIST_METHODS ) list_notifications ( self ) \u00a4 Return all the available RPC notifications. This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. Original signature: system.listNotifications() Returns: Type Description List[str] The list of available RPC notifications. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listNotifications' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.onDownloadStart' , u 'aria2.onDownloadPause' , ... Source code in aria2p/client.py def list_notifications ( self ) -> List [ str ]: \"\"\" Return all the available RPC notifications. This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. Original signature: system.listNotifications() Returns: The list of available RPC notifications. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listNotifications'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.onDownloadStart', u'aria2.onDownloadPause', ... \"\"\" return self . call ( self . LIST_NOTIFICATIONS ) listen_to_notifications ( self , on_download_start = None , on_download_pause = None , on_download_stop = None , on_download_complete = None , on_download_error = None , on_bt_download_complete = None , timeout = 5 , handle_signals = True ) \u00a4 Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [ stop_listening ][aria2p.client.Client.stop_listening] method. Parameters: Name Type Description Default on_download_start Callable Callback for the onDownloadStart event. None on_download_pause Callable Callback for the onDownloadPause event. None on_download_stop Callable Callback for the onDownloadStop event. None on_download_complete Callable Callback for the onDownloadComplete event. None on_download_error Callable Callback for the onDownloadError event. None on_bt_download_complete Callable Callback for the onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/client.py def listen_to_notifications ( # noqa: WPS231 (false-positive because of logging lines?) self , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method. Arguments: on_download_start: Callback for the `onDownloadStart` event. on_download_pause: Callback for the `onDownloadPause` event. on_download_stop: Callback for the `onDownloadStop` event. on_download_complete: Callback for the `onDownloadComplete` event. on_download_error: Callback for the `onDownloadError` event. on_bt_download_complete: Callback for the `onBtDownloadComplete` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" self . listening = True ws_server = self . ws_server log_prefix = f \"Notifications ( { ws_server } )\" logger . debug ( f \" { log_prefix } : opening WebSocket with timeout= { timeout } \" ) try : socket = websocket . create_connection ( ws_server , timeout = timeout ) except ConnectionRefusedError : logger . error ( f \" { log_prefix } : connection refused. Is the server running?\" ) return callbacks = { NOTIFICATION_START : on_download_start , NOTIFICATION_PAUSE : on_download_pause , NOTIFICATION_STOP : on_download_stop , NOTIFICATION_COMPLETE : on_download_complete , NOTIFICATION_ERROR : on_download_error , NOTIFICATION_BT_COMPLETE : on_bt_download_complete , } stopped = SignalHandler ([ \"SIGTERM\" , \"SIGINT\" ]) if handle_signals else False while not stopped : logger . debug ( f \" { log_prefix } : waiting for data over WebSocket\" ) try : message = socket . recv () except websocket . WebSocketConnectionClosedException : logger . error ( f \" { log_prefix } : connection to server was closed. Is the server running?\" ) break except websocket . WebSocketTimeoutException : logger . debug ( f \" { log_prefix } : reached timeout ( { timeout } s)\" ) else : notification = Notification . get_or_raise ( json . loads ( message )) logger . info ( f \" { log_prefix } : received { notification . type } with gid= { notification . gid } \" , ) callback = callbacks . get ( notification . type ) if callable ( callback ): logger . debug ( f \" { log_prefix } : calling { callback } with gid= { notification . gid } \" ) callback ( notification . gid ) else : logger . debug ( f \" { log_prefix } : no callback given for type \" + notification . type ) if not self . listening : logger . debug ( f \" { log_prefix } : stopped listening\" ) break if stopped : logger . debug ( f \" { log_prefix } : stopped listening after receiving a signal\" ) self . listening = False logger . debug ( f \" { log_prefix } : closing WebSocket\" ) socket . close () multicall ( self , methods ) \u00a4 Call multiple methods in a single request. This methods encapsulates multiple method calls in a single request. Original signature: system.multicall(methods) Parameters: Name Type Description Default methods List[dict] An array of structs. The structs contain two keys: methodName and params . - methodName is the method name to call and - params is array containing parameters to the method call. required Returns: Type Description List[Union[dict, list, str, int]] An array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. Examples: Original JSON-RPC Example In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. >>> import urllib2 , json , base64 >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.multicall' , ... 'params' :[[{ 'methodName' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'methodName' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [[ u '0000000000000001' ], [ u 'd2703803b52216d1' ]]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json . dumps ([{ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) [{ u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u '0000000000000001' }, { u 'id' : u 'asdf' , u 'jsonrpc' : u '2.0' , u 'result' : u 'd2703803b52216d1' }] Source code in aria2p/client.py def multicall ( self , methods : List [ dict ]) -> List [ CallReturnType ]: \"\"\" Call multiple methods in a single request. This methods encapsulates multiple method calls in a single request. Original signature: system.multicall(methods) Arguments: methods: An array of structs. The structs contain two keys: `methodName` and `params`. - `methodName` is the method name to call and - `params` is array containing parameters to the method call. Returns: An array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. Examples: **Original JSON-RPC Example** In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. >>> import urllib2, json, base64 >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.multicall', ... 'params':[[{'methodName':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'methodName':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] \"\"\" return self . call ( self . MULTICALL , [ methods ]) multicall2 ( self , calls , insert_secret = True ) \u00a4 Call multiple methods in one request. A method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"0000000000000001\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: Name Type Description Default calls List[Tuple[str, List[str]]] List of tuples composed of method name and parameters. required insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py def multicall2 ( self , calls : Multicalls2Type , insert_secret : bool = True ) -> CallReturnType : \"\"\" Call multiple methods in one request. A method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"0000000000000001\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note: multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Arguments: calls: List of tuples composed of method name and parameters. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" multicall_params = [] for method , params in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) multicall_params . append ({ \"methodName\" : method , \"params\" : params }) payload : str = self . get_payload ( self . MULTICALL , [ multicall_params ]) return self . res_or_raise ( self . post ( payload )) pause ( self , gid ) \u00a4 Pause a download. This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the [ unpause() ][aria2p.client.Client.unpause] method. Original signature: aria2.pause([secret], gid) Parameters: Name Type Description Default gid str The download to pause. required Returns: Type Description str The GID of the paused download. Source code in aria2p/client.py def pause ( self , gid : str ) -> str : \"\"\" Pause a download. This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the [`unpause()`][aria2p.client.Client.unpause] method. Original signature: aria2.pause([secret], gid) Arguments: gid: The download to pause. Returns: The GID of the paused download. \"\"\" return self . call ( self . PAUSE , [ gid ]) pause_all ( self ) \u00a4 Pause all active/waiting downloads. This method is equal to calling [ pause() ][aria2p.client.Client.pause] for every active/waiting download. Original signature: aria2.pauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def pause_all ( self ) -> str : \"\"\" Pause all active/waiting downloads. This method is equal to calling [`pause()`][aria2p.client.Client.pause] for every active/waiting download. Original signature: aria2.pauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . PAUSE_ALL ) post ( self , payload ) \u00a4 Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: Name Type Description Default payload str The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). required Returns: Type Description dict The answer from the server, as a Python dictionary. Source code in aria2p/client.py def post ( self , payload : str ) -> dict : \"\"\" Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Arguments: payload: The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). Returns: The answer from the server, as a Python dictionary. \"\"\" return requests . post ( self . server , data = payload , timeout = self . timeout ) . json () purge_download_result ( self ) \u00a4 Purge completed/error/removed downloads from memory. Original signature: aria2.purgeDownloadResult([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def purge_download_result ( self ) -> str : \"\"\" Purge completed/error/removed downloads from memory. Original signature: aria2.purgeDownloadResult([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . PURGE_DOWNLOAD_RESULT ) remove ( self , gid ) \u00a4 Remove a download. This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. Original signature: aria2.remove([secret], gid) Parameters: Name Type Description Default gid str The download to remove. required Returns: Type Description str The GID of the removed download. Examples: Original JSON-RPC Example The following examples remove a download with GID#0000000000000001. >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.remove' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def remove ( self , gid : str ) -> str : \"\"\" Remove a download. This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. Original signature: aria2.remove([secret], gid) Arguments: gid: The download to remove. Returns: The GID of the removed download. Examples: **Original JSON-RPC Example** The following examples remove a download with GID#0000000000000001. >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.remove', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . REMOVE , [ gid ]) # noqa: WPS204 (overused [gid]) remove_download_result ( self , gid ) \u00a4 Remove a completed/error/removed download from memory. Original signature: aria2.removeDownloadResult([secret], gid) Parameters: Name Type Description Default gid str The download result to remove. required Returns: Type Description str \"OK\" for success. Examples: Original JSON-RPC Example The following examples remove the download result of the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.removeDownloadResult' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } Source code in aria2p/client.py def remove_download_result ( self , gid : str ) -> str : \"\"\" Remove a completed/error/removed download from memory. Original signature: aria2.removeDownloadResult([secret], gid) Arguments: gid: The download result to remove. Returns: `\"OK\"` for success. Examples: **Original JSON-RPC Example** The following examples remove the download result of the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.removeDownloadResult', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} \"\"\" return self . call ( self . REMOVE_DOWNLOAD_RESULT , [ gid ]) res_or_raise ( response ) staticmethod \u00a4 Return the result of the response, or raise an error with code and message. Parameters: Name Type Description Default response dict A response sent by the server. required Returns: Type Description Union[dict, list, str, int] The \"result\" value of the response. Exceptions: Type Description ClientException When the response contains an error (client/server error). See the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py @staticmethod def res_or_raise ( response : dict ) -> CallReturnType : \"\"\" Return the result of the response, or raise an error with code and message. Arguments: response: A response sent by the server. Returns: The \"result\" value of the response. Raises: ClientException: When the response contains an error (client/server error). See the [`ClientException`][aria2p.client.ClientException] class. \"\"\" # noqa: DAR401,DAR402 (fails to follow exceptions) if \"error\" in response : raise Client . response_as_exception ( response ) return response [ \"result\" ] response_as_exception ( response ) staticmethod \u00a4 Transform the response as a [ ClientException ][aria2p.client.ClientException] instance and return it. Parameters: Name Type Description Default response dict A response sent by the server. required Returns: Type Description ClientException An instance of the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py @staticmethod def response_as_exception ( response : dict ) -> ClientException : \"\"\" Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it. Arguments: response: A response sent by the server. Returns: An instance of the [`ClientException`][aria2p.client.ClientException] class. \"\"\" return ClientException ( response [ \"error\" ][ \"code\" ], response [ \"error\" ][ \"message\" ]) save_session ( self ) \u00a4 Save the current session to a file. This method saves the current session to a file specified by the [ --save-session ][aria2p.options.Options.save_session] option. Original signature: aria2.saveSession([secret]) Returns: Type Description str \"OK\" if it succeeds. Source code in aria2p/client.py def save_session ( self ) -> str : \"\"\" Save the current session to a file. This method saves the current session to a file specified by the [`--save-session`][aria2p.options.Options.save_session] option. Original signature: aria2.saveSession([secret]) Returns: `\"OK\"` if it succeeds. \"\"\" return self . call ( self . SAVE_SESSION ) shutdown ( self ) \u00a4 Shutdown aria2. Original signature: aria2.shutdown([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def shutdown ( self ) -> str : \"\"\" Shutdown aria2. Original signature: aria2.shutdown([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . SHUTDOWN ) stop_listening ( self ) \u00a4 Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications]. Source code in aria2p/client.py def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]. \"\"\" self . listening = False tell_active ( self , keys = None ) \u00a4 Return the list of active downloads. Original signature: aria2.tellActive([secret][, keys]) Parameters: Name Type Description Default keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_active ( self , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of active downloads. Original signature: aria2.tellActive([secret][, keys]) Arguments: keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_ACTIVE , [ keys ]) tell_status ( self , gid , keys = None ) \u00a4 Tell status of a download. This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, tell_status(\"0000000000000001\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid : GID of the download. status : active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength : Total length of the download in bytes. completedLength : Completed length of the download in bytes. uploadLength : Uploaded length of the download in bytes. bitfield : Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed : Download speed of this download measured in bytes/sec. uploadSpeed : Upload speed of this download measured in bytes/sec. infoHash : InfoHash. BitTorrent only. numSeeders : The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength : Piece length in bytes. numPieces : The number of pieces. connections : The number of peers/servers aria2 has connected to. errorCode : The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage : The (hopefully) human readable error message associated to errorCode. followedBy : List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the [ --follow-metalink ][aria2p.options.Options.follow_metalink] option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following : The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo : GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir :Directory to save files. files : Return the list of files. The elements of this list are the same structs used in [ get_files() ][aria2p.client.Client.get_files] method. bittorrent : Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains the following keys: announceList : List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. comment : The comment of the torrent. comment.utf-8 is used if available. creationDate : The creation time of the torrent. The value is an integer since the epoch, measured in seconds. mode : File mode of the torrent. The value is either single or multi. info : Struct which contains data from Info dictionary. It contains following keys. name : name in info dictionary. name.utf-8 is used if available. verifiedLength : The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending : true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Original signature: aria2.tellStatus([secret], gid[, keys]) Parameters: Name Type Description Default gid str The download to tell status of. required keys Optional[dict] The keys to return. None Returns: Type Description dict The details of a download. Examples: Original JSON-RPC Example The following example gets information about a download with GID#0000000000000001: >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'bitfield' : u '0000000000' , u 'completedLength' : u '901120' , u 'connections' : u '1' , u 'dir' : u '/downloads' , u 'downloadSpeed' : u '15158' , u 'files' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}], u 'gid' : u '0000000000000001' , u 'numPieces' : u '34' , u 'pieceLength' : u '1048576' , u 'status' : u 'active' , u 'totalLength' : u '34896138' , u 'uploadLength' : u '0' , u 'uploadSpeed' : u '0' }} The following example gets only specific keys: >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '0000000000000001' , ... [ 'gid' , ... 'totalLength' , ... 'completedLength' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'completedLength' : u '5701632' , u 'gid' : u '0000000000000001' , u 'totalLength' : u '34896138' }} Source code in aria2p/client.py def tell_status ( self , gid : str , keys : Optional [ dict ] = None ) -> dict : \"\"\" Tell status of a download. This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, `tell_status(\"0000000000000001\", [\"gid\", \"status\"])` returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. - `gid`: GID of the download. - `status`: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. - `totalLength`: Total length of the download in bytes. - `completedLength`: Completed length of the download in bytes. - `uploadLength`: Uploaded length of the download in bytes. - `bitfield`: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. - `downloadSpeed`: Download speed of this download measured in bytes/sec. - `uploadSpeed`: Upload speed of this download measured in bytes/sec. - `infoHash`: InfoHash. BitTorrent only. - `numSeeders`: The number of seeders aria2 has connected to. BitTorrent only. - `seeder` true if the local endpoint is a seeder. Otherwise false. BitTorrent only. - `pieceLength`: Piece length in bytes. - `numPieces`: The number of pieces. - `connections`: The number of peers/servers aria2 has connected to. - `errorCode`: The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. - `errorMessage`: The (hopefully) human readable error message associated to errorCode. - `followedBy`: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the [`--follow-metalink`][aria2p.options.Options.follow_metalink] option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. - `following`: The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. - `belongsTo`: GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. - `dir`:Directory to save files. - `files`: Return the list of files. The elements of this list are the same structs used in [`get_files()`][aria2p.client.Client.get_files] method. - `bittorrent`: Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains the following keys: - `announceList`: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. - `comment`: The comment of the torrent. comment.utf-8 is used if available. - `creationDate`: The creation time of the torrent. The value is an integer since the epoch, measured in seconds. - `mode`: File mode of the torrent. The value is either single or multi. - `info`: Struct which contains data from Info dictionary. It contains following keys. - `name`: name in info dictionary. name.utf-8 is used if available. - `verifiedLength`: The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. - `verifyIntegrityPending`: true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Original signature: aria2.tellStatus([secret], gid[, keys]) Arguments: gid: The download to tell status of. keys: The keys to return. Returns: The details of a download. Examples: **Original JSON-RPC Example** The following example gets information about a download with GID#0000000000000001: >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'bitfield': u'0000000000', u'completedLength': u'901120', u'connections': u'1', u'dir': u'/downloads', u'downloadSpeed': u'15158', u'files': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}], u'gid': u'0000000000000001', u'numPieces': u'34', u'pieceLength': u'1048576', u'status': u'active', u'totalLength': u'34896138', u'uploadLength': u'0', u'uploadSpeed': u'0'}} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['0000000000000001', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'0000000000000001', u'totalLength': u'34896138'}} \"\"\" return self . call ( self . TELL_STATUS , [ gid , keys ]) tell_stopped ( self , offset , num , keys = None ) \u00a4 Return the list of stopped downloads. This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. Original signature: aria2.tellStopped([secret], offset, num[, keys]) Parameters: Name Type Description Default offset int Same semantics as described in the [ tell_waiting() ][aria2p.client.Client.tell_waiting] method. required num int An integer to specify the maximum number of downloads to be returned. required keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_stopped ( self , offset : int , num : int , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of stopped downloads. This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. Original signature: aria2.tellStopped([secret], offset, num[, keys]) Arguments: offset: Same semantics as described in the [`tell_waiting()`][aria2p.client.Client.tell_waiting] method. num: An integer to specify the maximum number of downloads to be returned. keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_STOPPED , [ offset , num , keys ]) tell_waiting ( self , offset , num , keys = None ) \u00a4 Return the list of waiting downloads. This method returns a list of waiting downloads, including paused ones. Original signature: aria2.tellWaiting([secret], offset, num[, keys]) Parameters: Name Type Description Default offset int An integer to specify the offset from the download waiting at the front. If offset is a positive integer, this method returns downloads in the range of [ offset , offset + num ). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. tell_waiting(0, 1) returns [\"A\"] . tell_waiting(1, 2) returns [\"B\", \"C\"] . tell_waiting(-1, 2) returns [\"C\", \"B\"] . required num int An integer to specify the maximum number of downloads to be returned. required keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_waiting ( self , offset : int , num : int , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of waiting downloads. This method returns a list of waiting downloads, including paused ones. Original signature: aria2.tellWaiting([secret], offset, num[, keys]) Arguments: offset: An integer to specify the offset from the download waiting at the front. If `offset` is a positive integer, this method returns downloads in the range of [`offset`, `offset` + `num`). `offset` can be a negative integer. `offset == -1` points last download in the waiting queue and `offset == -2` points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. `tell_waiting(0, 1)` returns `[\"A\"]`. `tell_waiting(1, 2)` returns `[\"B\", \"C\"]`. `tell_waiting(-1, 2)` returns `[\"C\", \"B\"]`. num: An integer to specify the maximum number of downloads to be returned. keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_WAITING , [ offset , num , keys ]) unpause ( self , gid ) \u00a4 Resume a download. This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Original signature: aria2.unpause([secret], gid) Parameters: Name Type Description Default gid str The download to resume. required Returns: Type Description str The GID of the resumed download. Source code in aria2p/client.py def unpause ( self , gid : str ) -> str : \"\"\" Resume a download. This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Original signature: aria2.unpause([secret], gid) Arguments: gid: The download to resume. Returns: The GID of the resumed download. \"\"\" return self . call ( self . UNPAUSE , [ gid ]) unpause_all ( self ) \u00a4 Resume all downloads. This method is equal to calling [ unpause() ][aria2p.client.Client.unpause] for every active/waiting download. Original signature: aria2.unpauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def unpause_all ( self ) -> str : \"\"\" Resume all downloads. This method is equal to calling [`unpause()`][aria2p.client.Client.unpause] for every active/waiting download. Original signature: aria2.unpauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . UNPAUSE_ALL ) ClientException \u00a4 An exception specific to JSON-RPC errors. __init__ ( self , code , message ) special \u00a4 Initialize the exception. Parameters: Name Type Description Default code int The error code. required message str The error message. required Source code in aria2p/client.py def __init__ ( self , code : int , message : str ) -> None : \"\"\" Initialize the exception. Arguments: code: The error code. message: The error message. \"\"\" super () . __init__ () if code in JSONRPC_CODES : message = f \" { JSONRPC_CODES [ code ] } \\n { message } \" self . code = code self . message = message Notification \u00a4 A helper class for notifications. You should not need to use this class. It simply provides methods to instantiate a notification with a message received from the server through a WebSocket, or to raise a ClientException if the message is invalid. __init__ ( self , event_type , gid ) special \u00a4 Initialize the object. Parameters: Name Type Description Default event_type str The notification type. Possible types are available in the NOTIFICATION_TYPES variable. required gid str The GID of the download related to the notification. required Source code in aria2p/client.py def __init__ ( self , event_type : str , gid : str ) -> None : \"\"\" Initialize the object. Arguments: event_type: The notification type. Possible types are available in the NOTIFICATION_TYPES variable. gid: The GID of the download related to the notification. \"\"\" self . type = event_type self . gid = gid from_message ( message ) staticmethod \u00a4 Return an instance of Notification. This method expects a valid message (not containing errors). Parameters: Name Type Description Default message dict A valid message received over WebSocket. required Returns: Type Description Notification A Notification instance. Source code in aria2p/client.py @staticmethod def from_message ( message : dict ) -> \"Notification\" : \"\"\" Return an instance of Notification. This method expects a valid message (not containing errors). Arguments: message: A valid message received over WebSocket. Returns: A Notification instance. \"\"\" return Notification ( event_type = message [ \"method\" ], gid = message [ \"params\" ][ 0 ][ \"gid\" ]) get_or_raise ( message ) staticmethod \u00a4 Raise a ClientException when the message is invalid or return a Notification instance. Parameters: Name Type Description Default message dict The JSON-loaded message received over WebSocket. required Returns: Type Description Notification A Notification instance if the message is valid. Exceptions: Type Description ClientException When the message contains an error. Source code in aria2p/client.py @staticmethod def get_or_raise ( message : dict ) -> \"Notification\" : \"\"\" Raise a ClientException when the message is invalid or return a Notification instance. Arguments: message: The JSON-loaded message received over WebSocket. Returns: A Notification instance if the message is valid. Raises: ClientException: When the message contains an error. \"\"\" # noqa: DAR401,DAR402 (fails to follow exceptions) if \"error\" in message : raise Client . response_as_exception ( message ) return Notification . from_message ( message )","title":"client.py"},{"location":"reference/client/#aria2p.client","text":"Client module. This module defines the ClientException and Client classes, which are used to communicate with a remote aria2c process through the JSON-RPC protocol.","title":"aria2p.client"},{"location":"reference/client/#aria2p.client.Client","text":"The JSON-RPC client class. In this documentation, all the following terms refer to the same entity, the remote aria2c process: remote process, remote server, server, daemon process, background process, remote. This class implements method to communicate with a daemon aria2c process through the JSON-RPC protocol. Each method offered by the aria2c process is implemented in this class, in snake_case instead of camelCase (example: add_uri instead of addUri). The class defines a METHODS variable which contains the names of the available methods. The class is instantiated using an address and port, and optionally a secret token. The token is never passed as a method argument. The class provides utility methods: call , which performs a JSON-RPC call for a single method; batch_call , which performs a JSON-RPC call for a list of methods; multicall2 , which is an equivalent of multicall, but easier to use; post , which is responsible for actually sending a payload to the remote process using a POST request; get_payload , which is used to build payloads; get_params , which is used to build list of parameters.","title":"Client"},{"location":"reference/client/#aria2p.client.Client.server","text":"Return the full remote process / server address. Returns: Type Description str The server address.","title":"server"},{"location":"reference/client/#aria2p.client.Client.ws_server","text":"Return the full WebSocket remote server address. Returns: Type Description str The WebSocket server address.","title":"ws_server"},{"location":"reference/client/#aria2p.client.Client.__init__","text":"Initialize the object. Parameters: Name Type Description Default host str The remote process address. 'http://localhost' port int The remote process port. 6800 secret str The secret token. '' timeout float The timeout to use for requests towards the remote server. 60.0 Source code in aria2p/client.py def __init__ ( # noqa: S107 (hardcoded password) self , host : str = DEFAULT_HOST , port : int = DEFAULT_PORT , secret : str = \"\" , timeout : float = DEFAULT_TIMEOUT , ) -> None : \"\"\" Initialize the object. Arguments: host: The remote process address. port: The remote process port. secret: The secret token. timeout: The timeout to use for requests towards the remote server. \"\"\" host = host . rstrip ( \"/\" ) self . host = host self . port = port self . secret = secret self . timeout = timeout self . listening = False","title":"__init__()"},{"location":"reference/client/#aria2p.client.Client.add_metalink","text":"Add a Metalink download. This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads. Original signature: aria2.addMetalink([secret], metalink[, options[, position]]) If [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by [ --dir ][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [ --save-session ][aria2p.options.Options.save_session]. Parameters: Name Type Description Default metalink str metalink is a base64-encoded string which contains the contents of the \".metalink\" file. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description List[str] The GID of the created download. Examples: Original JSON-RPC Example The following examples add local file file.meta4. >>> import urllib2 , json , base64 >>> metalink = base64 . b64encode ( open ( 'file.meta4' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addMetalink' , ... 'params' :[ metalink ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}' Source code in aria2p/client.py def add_metalink ( self , metalink : str , options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> List [ str ]: \"\"\" Add a Metalink download. This method adds a Metalink download by uploading a \".metalink\" file and returns an array of GIDs of newly registered downloads. Original signature: aria2.addMetalink([secret], metalink[, options[, position]]) If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named hex string of SHA-1 hash of data plus \".metalink\" in the directory specified by [`--dir`][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.metalink. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session]. Arguments: metalink: `metalink` is a base64-encoded string which contains the contents of the \".metalink\" file. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following examples add local file file.meta4. >>> import urllib2, json, base64 >>> metalink = base64.b64encode(open('file.meta4').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addMetalink', ... 'params':[metalink]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":[\"0000000000000001\"]}' \"\"\" return self . call ( self . ADD_METALINK , [ metalink , options , position ])","title":"add_metalink()"},{"location":"reference/client/#aria2p.client.Client.add_torrent","text":"Add a BitTorrent download. This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download. Original signature: aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) If you want to add a BitTorrent Magnet URI, use the [ add_uri() ][aria2p.client.Client.add_uri] method instead. If [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by [ --dir ][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [ --rpc-save-upload-metadata ][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [ --save-session ][aria2p.options.Options.save_session]. Parameters: Name Type Description Default torrent str torrent must be a base64-encoded string containing the contents of the \".torrent\" file. required uris List[str] uris is an array of URIs (string). uris is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description str The GID of the created download. Examples: Original JSON-RPC Example The following examples add local file file.torrent. >>> import urllib2 , json , base64 >>> torrent = base64 . b64encode ( open ( 'file.torrent' ) . read ()) >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , 'params' :[ torrent ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def add_torrent ( self , torrent : str , uris : List [ str ], options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> str : \"\"\" Add a BitTorrent download. This method adds a BitTorrent download by uploading a \".torrent\" file and returns the GID of the newly registered download. Original signature: aria2.addTorrent([secret], torrent[, uris[, options[, position]]]) If you want to add a BitTorrent Magnet URI, use the [`add_uri()`][aria2p.client.Client.add_uri] method instead. If [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is true, the uploaded data is saved as a file named as the hex string of SHA-1 hash of data plus \".torrent\" in the directory specified by [`--dir`][aria2p.options.Options.dir] option. E.g. a file name might be 0a3893293e27ac0490424c06de4d09242215f0a6.torrent. If a file with the same name already exists, it is overwritten! If the file cannot be saved successfully or [`--rpc-save-upload-metadata`][aria2p.options.Options.rpc_save_upload_metadata] is false, the downloads added by this method are not saved by [`--save-session`][aria2p.options.Options.save_session]. Arguments: torrent: `torrent` must be a base64-encoded string containing the contents of the \".torrent\" file. uris: `uris` is an array of URIs (string). `uris` is used for Web-seeding. For single file torrents, the URI can be a complete URI pointing to the resource; if URI ends with /, name in torrent file is added. For multi-file torrents, name and path in torrent are added to form a URI for each file. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following examples add local file file.torrent. >>> import urllib2, json, base64 >>> torrent = base64.b64encode(open('file.torrent').read()) >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', 'params':[torrent]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"asdf\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . ADD_TORRENT , [ torrent , uris , options , position ])","title":"add_torrent()"},{"location":"reference/client/#aria2p.client.Client.add_uri","text":"Add a new download. This method adds a new download and returns the GID of the newly registered download. Original signature: aria2.addUri([secret], uris[, options[, position]]) Parameters: Name Type Description Default uris List[str] uris is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. required options Optional[dict] options is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. None position Optional[int] If position is given, it must be an integer starting from 0. The new download will be inserted at position in the waiting queue. If position is omitted or position is larger than the current size of the queue, the new download is appended to the end of the queue. None Returns: Type Description str The GID of the created download. Examples: Original JSON-RPC Example The following example adds http://example.org/file : >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def add_uri ( self , uris : List [ str ], options : Optional [ dict ] = None , position : Optional [ int ] = None , ) -> str : \"\"\" Add a new download. This method adds a new download and returns the GID of the newly registered download. Original signature: aria2.addUri([secret], uris[, options[, position]]) Arguments: uris: `uris` is an array of HTTP/FTP/SFTP/BitTorrent URIs (strings) pointing to the same resource. If you mix URIs pointing to different resources, then the download may fail or be corrupted without aria2 complaining. When adding BitTorrent Magnet URIs, uris must have only one element and it should be BitTorrent Magnet URI. options: `options` is a struct and its members are pairs of option name and value. See [Options][aria2p.options.Options] for more details. position: If `position` is given, it must be an integer starting from 0. The new download will be inserted at `position` in the waiting queue. If `position` is omitted or `position` is larger than the current size of the queue, the new download is appended to the end of the queue. Returns: The GID of the created download. Examples: **Original JSON-RPC Example** The following example adds http://example.org/file: >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . ADD_URI , params = [ uris , options , position ])","title":"add_uri()"},{"location":"reference/client/#aria2p.client.Client.batch_call","text":"Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Parameters: Name Type Description Default calls List[Tuple[str, List[str], Union[str, int]]] A list of tuples composed of method name, parameters and ID. required insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description List[Union[dict, list, str, int]] The results for each call in the batch. Source code in aria2p/client.py def batch_call ( self , calls : CallsType , insert_secret : bool = True , ) -> List [ CallReturnType ]: \"\"\" Call multiple methods in one request. A batch call is simply a list of full payloads, sent at once to the remote process. The differences with a multicall are: - multicall is a special \"system\" method, whereas batch_call is simply the concatenation of several methods - multicall payloads define the \"jsonrpc\" and \"id\" keys only once, whereas these keys are repeated in each part of the batch_call payload - as a result of the previous line, you must pass different IDs to the batch_call methods, whereas the ID in multicall is optional Arguments: calls: A list of tuples composed of method name, parameters and ID. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The results for each call in the batch. \"\"\" payloads = [] for method , params , msg_id in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) payloads . append ( self . get_payload ( method , params , msg_id , as_json = False )) payload : str = json . dumps ( payloads ) responses = self . post ( payload ) return [ self . res_or_raise ( resp ) for resp in responses ]","title":"batch_call()"},{"location":"reference/client/#aria2p.client.Client.call","text":"Call a single JSON-RPC method. Parameters: Name Type Description Default method str The method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] A list of parameters. None msg_id Union[int, str] The ID of the call, sent back with the server's answer. None insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object. Source code in aria2p/client.py def call ( self , method : str , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , insert_secret : bool = True , ) -> CallReturnType : \"\"\" Call a single JSON-RPC method. Arguments: method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: A list of parameters. msg_id: The ID of the call, sent back with the server's answer. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object. \"\"\" params = self . get_params ( * ( params or [])) if insert_secret and self . secret : if method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) elif method == self . MULTICALL : for param in params [ 0 ]: param [ \"params\" ] . insert ( 0 , f \"token: { self . secret } \" ) return self . res_or_raise ( self . post ( self . get_payload ( method , params , msg_id = msg_id )))","title":"call()"},{"location":"reference/client/#aria2p.client.Client.change_global_option","text":"Change the global options dynamically. Original signature: aria2.changeGlobalOption([secret], options) Parameters: Name Type Description Default options dict The following options are available: bt-max-open-files download-result keep-unfinished-download-result log log-level max-concurrent-downloads max-download-result max-overall-download-limit max-overall-upload-limit optimize-concurrent-downloads save-cookies save-session server-stat-of In addition, options listed in the Input File subsection are available, except for following options: checksum , index-out , out , pause and select-file . With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode. required Returns: Type Description str \"OK\" for success. Source code in aria2p/client.py def change_global_option ( self , options : dict ) -> str : \"\"\" Change the global options dynamically. Original signature: aria2.changeGlobalOption([secret], options) Arguments: options: The following options are available: - `bt-max-open-files` - `download-result` - `keep-unfinished-download-result` - `log` - `log-level` - `max-concurrent-downloads` - `max-download-result` - `max-overall-download-limit` - `max-overall-upload-limit` - `optimize-concurrent-downloads` - `save-cookies` - `save-session` - `server-stat-of` In addition, options listed in the Input File subsection are available, except for following options: `checksum`, `index-out`, `out`, `pause` and `select-file`. With the log option, you can dynamically start logging or change log file. To stop logging, specify an empty string (\"\") as the parameter value. Note that log file is always opened in append mode. Returns: `\"OK\"` for success. \"\"\" return self . call ( self . CHANGE_GLOBAL_OPTION , [ options ])","title":"change_global_option()"},{"location":"reference/client/#aria2p.client.Client.change_option","text":"Change a download options dynamically. Original signature: aria2.changeOption([secret], gid, options) Parameters: Name Type Description Default gid str The download to change options of. required options dict The options listed in Input File subsection are available, except for following options: dry-run metalink-base-uri parameterized-uri pause piece-length rpc-save-upload-metadata Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): bt-max-peers bt-request-peer-speed-limit bt-remove-unselected-file force-save max-download-limit max-upload-limit required Returns: Type Description str \"OK\" for success. Examples: Original JSON-RPC Example The following examples set the max-download-limit option to 20K for the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeOption' , ... 'params' :[ '0000000000000001' , ... { 'max-download-limit' : '10K' }]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } Source code in aria2p/client.py def change_option ( self , gid : str , options : dict ) -> str : \"\"\" Change a download options dynamically. Original signature: aria2.changeOption([secret], gid, options) Arguments: gid: The download to change options of. options: The options listed in Input File subsection are available, except for following options: - `dry-run` - `metalink-base-uri` - `parameterized-uri` - `pause` - `piece-length` - `rpc-save-upload-metadata` Except for the following options, changing the other options of active download makes it restart (restart itself is managed by aria2, and no user intervention is required): - `bt-max-peers` - `bt-request-peer-speed-limit` - `bt-remove-unselected-file` - `force-save` - `max-download-limit` - `max-upload-limit` Returns: `\"OK\"` for success. Examples: **Original JSON-RPC Example** The following examples set the max-download-limit option to 20K for the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeOption', ... 'params':['0000000000000001', ... {'max-download-limit':'10K'}]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} \"\"\" return self . call ( self . CHANGE_OPTION , [ gid , options ])","title":"change_option()"},{"location":"reference/client/#aria2p.client.Client.change_position","text":"Change position of a download. This method changes the position of the download denoted by gid in the queue. Original signature: aria2.changePosition([secret], gid, pos, how) Parameters: Name Type Description Default gid str The download to change the position of. required pos int An integer. required how str POS_SET , POS_CUR or POS_END . If how is POS_SET , it moves the download to a position relative to the beginning of the queue. If how is POS_CUR , it moves the download to a position relative to the current position. If how is POS_END , it moves the download to a position relative to the end of the queue. If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. For example, if GID#0000000000000001 is currently in position 3, change_position('0000000000000001', -1, 'POS_CUR') will change its position to 2. Additionally change_position('0000000000000001', 0, 'POS_SET') will change its position to 0 (the beginning of the queue). required Returns: Type Description int An integer denoting the resulting position. Examples: Original JSON-RPC Example The following examples move the download GID#0000000000000001 to the front of the queue. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changePosition' , ... 'params' :[ '0000000000000001' , 0 , 'POS_SET' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : 0 } Source code in aria2p/client.py def change_position ( self , gid : str , pos : int , how : str ) -> int : \"\"\" Change position of a download. This method changes the position of the download denoted by `gid` in the queue. Original signature: aria2.changePosition([secret], gid, pos, how) Arguments: gid: The download to change the position of. pos: An integer. how: `POS_SET`, `POS_CUR` or `POS_END`. - If `how` is `POS_SET`, it moves the download to a position relative to the beginning of the queue. - If `how` is `POS_CUR`, it moves the download to a position relative to the current position. - If `how` is `POS_END`, it moves the download to a position relative to the end of the queue. - If the destination position is less than 0 or beyond the end of the queue, it moves the download to the beginning or the end of the queue respectively. For example, if GID#0000000000000001 is currently in position 3, `change_position('0000000000000001', -1, 'POS_CUR')` will change its position to 2. Additionally `change_position('0000000000000001', 0, 'POS_SET')` will change its position to 0 (the beginning of the queue). Returns: An integer denoting the resulting position. Examples: **Original JSON-RPC Example** The following examples move the download GID#0000000000000001 to the front of the queue. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changePosition', ... 'params':['0000000000000001', 0, 'POS_SET']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': 0} \"\"\" return self . call ( self . CHANGE_POSITION , [ gid , pos , how ])","title":"change_position()"},{"location":"reference/client/#aria2p.client.Client.change_uri","text":"Remove the URIs in del_uris from and appends the URIs in add_uris to download denoted by gid. Original signature: aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) Parameters: Name Type Description Default gid str The download to change URIs of. required file_index int Used to select which file to remove/attach given URIs. file_index is 1-based. required del_uris List[str] List of strings. required add_uris List[str] List of strings. required position Optional[int] Used to specify where URIs are inserted in the existing waiting URI list. position is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. position is the position after URIs are removed, not the position when this method is called. None A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in del_uris . In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in del_uris . Returns: Type Description List[int] A list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. Examples: Original JSON-RPC Example The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.changeUri' , ... 'params' :[ '0000000000000001' , 1 , [], [ 'http://example.org/file' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ 0 , 1 ]} Source code in aria2p/client.py def change_uri ( self , gid : str , file_index : int , del_uris : List [ str ], add_uris : List [ str ], position : Optional [ int ] = None , ) -> List [ int ]: \"\"\" Remove the URIs in `del_uris` from and appends the URIs in `add_uris` to download denoted by gid. Original signature: aria2.changeUri([secret], gid, fileIndex, delUris, addUris[, position]) Arguments: gid: The download to change URIs of. file_index: Used to select which file to remove/attach given URIs. `file_index` is 1-based. del_uris: List of strings. add_uris: List of strings. position: Used to specify where URIs are inserted in the existing waiting URI list. `position` is 0-based. When position is omitted, URIs are appended to the back of the list. This method first executes the removal and then the addition. `position` is the position after URIs are removed, not the position when this method is called. A download can contain multiple files and URIs are attached to each file. When removing an URI, if the same URIs exist in download, only one of them is removed for each URI in `del_uris`. In other words, if there are three URIs http://example.org/aria2 and you want remove them all, you have to specify (at least) 3 http://example.org/aria2 in `del_uris`. Returns: A list which contains two integers. The first integer is the number of URIs deleted. The second integer is the number of URIs added. Examples: **Original JSON-RPC Example** The following examples add the URI http://example.org/file to the file whose index is 1 and belongs to the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.changeUri', ... 'params':['0000000000000001', 1, [], ['http://example.org/file']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [0, 1]} \"\"\" return self . call ( self . CHANGE_URI , [ gid , file_index , del_uris , add_uris , position ])","title":"change_uri()"},{"location":"reference/client/#aria2p.client.Client.force_pause","text":"Force pause a download. This method pauses the download denoted by gid. This method behaves just like [ pause() ][aria2p.client.Client.pause] except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forcePause([secret], gid) Parameters: Name Type Description Default gid str The download to force pause. required Returns: Type Description str The GID of the paused download. Source code in aria2p/client.py def force_pause ( self , gid : str ) -> str : \"\"\" Force pause a download. This method pauses the download denoted by gid. This method behaves just like [`pause()`][aria2p.client.Client.pause] except that this method pauses downloads without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forcePause([secret], gid) Arguments: gid: The download to force pause. Returns: The GID of the paused download. \"\"\" return self . call ( self . FORCE_PAUSE , [ gid ])","title":"force_pause()"},{"location":"reference/client/#aria2p.client.Client.force_pause_all","text":"Force pause all active/waiting downloads. This method is equal to calling [ force_pause() ][aria2p.client.Client.force_pause] for every active/waiting download. Original signature: aria2.forcePauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def force_pause_all ( self ) -> str : \"\"\" Force pause all active/waiting downloads. This method is equal to calling [`force_pause()`][aria2p.client.Client.force_pause] for every active/waiting download. Original signature: aria2.forcePauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . FORCE_PAUSE_ALL )","title":"force_pause_all()"},{"location":"reference/client/#aria2p.client.Client.force_remove","text":"Force remove a download. This method removes the download denoted by gid. This method behaves just like [ remove() ][aria2p.client.Client.remove] except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forceRemove([secret], gid) Parameters: Name Type Description Default gid str The download to force remove. required Returns: Type Description str The GID of the removed download. Source code in aria2p/client.py def force_remove ( self , gid : str ) -> str : \"\"\" Force remove a download. This method removes the download denoted by gid. This method behaves just like [`remove()`][aria2p.client.Client.remove] except that this method removes the download without performing any actions which take time, such as contacting BitTorrent trackers to unregister the download first. Original signature: aria2.forceRemove([secret], gid) Arguments: gid: The download to force remove. Returns: The GID of the removed download. \"\"\" return self . call ( self . FORCE_REMOVE , [ gid ])","title":"force_remove()"},{"location":"reference/client/#aria2p.client.Client.force_shutdown","text":"Force shutdown aria2. This method shuts down aria2. This method behaves like [ shutdown() ][aria2p.client.Client.shutdown] without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. Original signature: aria2.forceShutdown([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def force_shutdown ( self ) -> str : \"\"\" Force shutdown aria2. This method shuts down aria2. This method behaves like [`shutdown()`][aria2p.client.Client.shutdown] without performing any actions which take time, such as contacting BitTorrent trackers to unregister downloads first. Original signature: aria2.forceShutdown([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . FORCE_SHUTDOWN )","title":"force_shutdown()"},{"location":"reference/client/#aria2p.client.Client.get_files","text":"Return file list of a download. This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. index : Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. path : File path. length : File size in bytes. completedLength : Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. This is because completedLength in [ get_files() ][aria2p.client.Client.get_files] only includes completed pieces. On the other hand, completedLength in [ tell_status() ][aria2p.client.Client.tell_status] also includes partially completed pieces. selected : true if this file is selected by [ --select-file ][aria2p.options.Options.select_file] option. If [ --select-file ][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. uris Returns a list of URIs for this file. The element type is the same struct used in the [ get_uris() ][aria2p.client.Client.get_uris] method. Original signature: aria2.getFiles([secret], gid) Parameters: Name Type Description Default gid str The download to list files of. required Returns: Type Description dict The file list of a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getFiles' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}]} Source code in aria2p/client.py def get_files ( self , gid : str ) -> dict : \"\"\" Return file list of a download. This method returns the file list of the download denoted by gid (string). The response is an array of structs which contain following keys. Values are strings. - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. - `path`: File path. - `length`: File size in bytes. - `completedLength`: Completed length of this file in bytes. Please note that it is possible that sum of `completedLength` is less than the `completedLength` returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. This is because `completedLength` in [`get_files()`][aria2p.client.Client.get_files] only includes completed pieces. On the other hand, `completedLength` in [`tell_status()`][aria2p.client.Client.tell_status] also includes partially completed pieces. - `selected`: true if this file is selected by [`--select-file`][aria2p.options.Options.select_file] option. If [`--select-file`][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. - `uris` Returns a list of URIs for this file. The element type is the same struct used in the [`get_uris()`][aria2p.client.Client.get_uris] method. Original signature: aria2.getFiles([secret], gid) Arguments: gid: The download to list files of. Returns: The file list of a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getFiles', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}]} \"\"\" return self . call ( self . GET_FILES , [ gid ])","title":"get_files()"},{"location":"reference/client/#aria2p.client.Client.get_global_option","text":"Return the global options. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the [ get_option() ][aria2p.client.Client.get_option] method. Original signature: aria2.getGlobalOption([secret]) Returns: Type Description dict The global options. The response is a struct. Its keys are the names of options. Values are strings. Source code in aria2p/client.py def get_global_option ( self ) -> dict : \"\"\" Return the global options. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Because global options are used as a template for the options of newly added downloads, the response contains keys returned by the [`get_option()`][aria2p.client.Client.get_option] method. Original signature: aria2.getGlobalOption([secret]) Returns: The global options. The response is a struct. Its keys are the names of options. Values are strings. \"\"\" return self . call ( self . GET_GLOBAL_OPTION )","title":"get_global_option()"},{"location":"reference/client/#aria2p.client.Client.get_global_stat","text":"Return global statistics such as the overall download and upload speeds. Original signature: aria2.getGlobalStat([secret]) Returns: Type Description dict A struct that contains the following keys (values are strings): downloadSpeed : Overall download speed (byte/sec). uploadSpeed : Overall upload speed(byte/sec). numActive : The number of active downloads. numWaiting : The number of waiting downloads. numStopped : The number of stopped downloads in the current session. This value is capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. numStoppedTotal : The number of stopped downloads in the current session and not capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getGlobalStat' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'downloadSpeed' : u '21846' , u 'numActive' : u '2' , u 'numStopped' : u '0' , u 'numWaiting' : u '0' , u 'uploadSpeed' : u '0' }} Source code in aria2p/client.py def get_global_stat ( self ) -> dict : \"\"\" Return global statistics such as the overall download and upload speeds. Original signature: aria2.getGlobalStat([secret]) Returns: A struct that contains the following keys (values are strings): - `downloadSpeed`: Overall download speed (byte/sec). - `uploadSpeed`: Overall upload speed(byte/sec). - `numActive`: The number of active downloads. - `numWaiting`: The number of waiting downloads. - `numStopped`: The number of stopped downloads in the current session. This value is capped by the [`--max-download-result`][aria2p.options.Options.max_download_result] option. - `numStoppedTotal`: The number of stopped downloads in the current session and not capped by the [`--max-download-result`][aria2p.options.Options.max_download_result] option. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getGlobalStat'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'downloadSpeed': u'21846', u'numActive': u'2', u'numStopped': u'0', u'numWaiting': u'0', u'uploadSpeed': u'0'}} \"\"\" return self . call ( self . GET_GLOBAL_STAT )","title":"get_global_stat()"},{"location":"reference/client/#aria2p.client.Client.get_option","text":"Return options of a download. Original signature: aria2.getOption([secret], gid) Parameters: Name Type Description Default gid str The download to get the options of. required Returns: Type Description dict A struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Examples: Original JSON-RPC Example The following examples get options of the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getOption' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'allow-overwrite' : u 'false' , u 'allow-piece-length-change' : u 'false' , u 'always-resume' : u 'true' , u 'async-dns' : u 'true' , ... Source code in aria2p/client.py def get_option ( self , gid : str ) -> dict : \"\"\" Return options of a download. Original signature: aria2.getOption([secret], gid) Arguments: gid: The download to get the options of. Returns: A struct where keys are the names of options. The values are strings. Note that this method does not return options which have no default value and have not been set on the command-line, in configuration files or RPC methods. Examples: **Original JSON-RPC Example** The following examples get options of the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getOption', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'allow-overwrite': u'false', u'allow-piece-length-change': u'false', u'always-resume': u'true', u'async-dns': u'true', ... \"\"\" return self . call ( self . GET_OPTION , [ gid ])","title":"get_option()"},{"location":"reference/client/#aria2p.client.Client.get_params","text":"Build the list of parameters. This method simply removes the None values from the given arguments. Parameters: Name Type Description Default *args Any List of parameters. () Returns: Type Description list A new list, with None values filtered out. Source code in aria2p/client.py @staticmethod def get_params ( * args : Any ) -> list : \"\"\" Build the list of parameters. This method simply removes the `None` values from the given arguments. Arguments: *args: List of parameters. Returns: A new list, with `None` values filtered out. \"\"\" return [ _ for _ in args if _ is not None ]","title":"get_params()"},{"location":"reference/client/#aria2p.client.Client.get_payload","text":"Build a payload. Parameters: Name Type Description Default method The method name. You can use the constant defined in [ Client ][aria2p.client.Client]. required params List[Any] The list of parameters. None msg_id Union[int, str] The ID of the call, sent back with the server's answer. None as_json bool Whether to return the payload as a JSON-string or Python dictionary. True Returns: Type Description Union[str, dict] The payload as a JSON string or as Python dictionary. Source code in aria2p/client.py @staticmethod def get_payload ( method , params : List [ Any ] = None , msg_id : Union [ int , str ] = None , as_json : bool = True , ) -> Union [ str , dict ]: \"\"\" Build a payload. Arguments: method: The method name. You can use the constant defined in [`Client`][aria2p.client.Client]. params: The list of parameters. msg_id: The ID of the call, sent back with the server's answer. as_json: Whether to return the payload as a JSON-string or Python dictionary. Returns: The payload as a JSON string or as Python dictionary. \"\"\" payload = { \"jsonrpc\" : \"2.0\" , \"method\" : method } if msg_id is not None : payload [ \"id\" ] = msg_id else : payload [ \"id\" ] = DEFAULT_ID if params : payload [ \"params\" ] = params return json . dumps ( payload ) if as_json else payload","title":"get_payload()"},{"location":"reference/client/#aria2p.client.Client.get_peers","text":"Return peers list of a download. This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. peerId : Percent-encoded peer ID. ip : IP address of the peer. port : Port number of the peer. bitfield : Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. amChoking : true if aria2 is choking the peer. Otherwise false. peerChoking : true if the peer is choking aria2. Otherwise false. downloadSpeed : Download speed (byte/sec) that this client obtains from the peer. uploadSpeed : Upload speed(byte/sec) that this client uploads to the peer. seeder : true if this peer is a seeder. Otherwise false. Original signature: aria2.getPeers([secret], gid) Parameters: Name Type Description Default gid str The download to get peers from. required Returns: Type Description dict The peers connected to a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getPeers' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'amChoking' : u 'true' , u 'bitfield' : u 'ffffffffffffffffffffffffffffffffffffffff' , u 'downloadSpeed' : u '10602' , u 'ip' : u '10.0.0.9' , u 'peerChoking' : u 'false' , u 'peerId' : u 'aria2 %2F 1 %2E 10 %2E 5%2D %87% 2A %E Dz %2F%F 7 %E 6' , u 'port' : u '6881' , u 'seeder' : u 'true' , u 'uploadSpeed' : u '0' }, { u 'amChoking' : u 'false' , u 'bitfield' : u 'ffffeff0fffffffbfffffff9fffffcfff7f4ffff' , u 'downloadSpeed' : u '8654' , u 'ip' : u '10.0.0.30' , u 'peerChoking' : u 'false' , u 'peerId' : u 'bittorrent client758' , u 'port' : u '37842' , u 'seeder' : u 'false' , u 'uploadSpeed' : u '6890' }]} Source code in aria2p/client.py def get_peers ( self , gid : str ) -> dict : \"\"\" Return peers list of a download. This method returns the list of peers of the download denoted by gid (string). This method is for BitTorrent only. The response is an array of structs and contains the following keys. Values are strings. - `peerId`: Percent-encoded peer ID. - `ip`: IP address of the peer. - `port`: Port number of the peer. - `bitfield`: Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end are set to zero. - `amChoking`: true if aria2 is choking the peer. Otherwise false. - `peerChoking`: true if the peer is choking aria2. Otherwise false. - `downloadSpeed`: Download speed (byte/sec) that this client obtains from the peer. - `uploadSpeed`: Upload speed(byte/sec) that this client uploads to the peer. - `seeder`: true if this peer is a seeder. Otherwise false. Original signature: aria2.getPeers([secret], gid) Arguments: gid: The download to get peers from. Returns: The peers connected to a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getPeers', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'amChoking': u'true', u'bitfield': u'ffffffffffffffffffffffffffffffffffffffff', u'downloadSpeed': u'10602', u'ip': u'10.0.0.9', u'peerChoking': u'false', u'peerId': u'aria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6', u'port': u'6881', u'seeder': u'true', u'uploadSpeed': u'0'}, {u'amChoking': u'false', u'bitfield': u'ffffeff0fffffffbfffffff9fffffcfff7f4ffff', u'downloadSpeed': u'8654', u'ip': u'10.0.0.30', u'peerChoking': u'false', u'peerId': u'bittorrent client758', u'port': u'37842', u'seeder': u'false', u'uploadSpeed': u'6890'}]} \"\"\" return self . call ( self . GET_PEERS , [ gid ])","title":"get_peers()"},{"location":"reference/client/#aria2p.client.Client.get_servers","text":"Return servers currently connected for a download. This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. index : Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. servers : A list of structs which contain the following keys. uri : Original URI. currentUri : This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. downloadSpeed : Download speed (byte/sec). Original signature: aria2.getServers([secret], gid) Parameters: Name Type Description Default gid str The download to get servers from. required Returns: Type Description dict The servers connected to a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getServers' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'index' : u '1' , u 'servers' : [{ u 'currentUri' : u 'http://example.org/file' , u 'downloadSpeed' : u '10467' , u 'uri' : u 'http://example.org/file' }]}]} Source code in aria2p/client.py def get_servers ( self , gid : str ) -> dict : \"\"\" Return servers currently connected for a download. This method returns currently connected HTTP(S)/FTP/SFTP servers of the download denoted by gid (string). The response is an array of structs and contains the following keys. Values are strings. - `index`: Index of the file, starting at 1, in the same order as files appear in the multi-file metalink. - `servers`: A list of structs which contain the following keys. - `uri`: Original URI. - `currentUri`: This is the URI currently used for downloading. If redirection is involved, currentUri and uri may differ. - `downloadSpeed`: Download speed (byte/sec). Original signature: aria2.getServers([secret], gid) Arguments: gid: The download to get servers from. Returns: The servers connected to a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getServers', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'index': u'1', u'servers': [{u'currentUri': u'http://example.org/file', u'downloadSpeed': u'10467', u'uri': u'http://example.org/file'}]}]} \"\"\" return self . call ( self . GET_SERVERS , [ gid ])","title":"get_servers()"},{"location":"reference/client/#aria2p.client.Client.get_session_info","text":"Return session information. Returns: Type Description dict A struct that contains the sessionId key, which is generated each time aria2 is invoked. Original signature: aria2.getSessionInfo([secret]) Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getSessionInfo' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'sessionId' : u 'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9' }} Source code in aria2p/client.py def get_session_info ( self ) -> dict : \"\"\" Return session information. Returns: A struct that contains the `sessionId` key, which is generated each time aria2 is invoked. Original signature: aria2.getSessionInfo([secret]) Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getSessionInfo'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'sessionId': u'cd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9'}} \"\"\" return self . call ( self . GET_SESSION_INFO )","title":"get_session_info()"},{"location":"reference/client/#aria2p.client.Client.get_uris","text":"Return URIs used in a download. This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. uri : URI status : 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. Original signature: aria2.getUris([secret], gid) Parameters: Name Type Description Default gid str The download to list URIs of. required Returns: Type Description dict The URIs used in a download. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getUris' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]} Source code in aria2p/client.py def get_uris ( self , gid : str ) -> dict : \"\"\" Return URIs used in a download. This method returns the URIs used in the download denoted by gid (string). The response is an array of structs and it contains following keys. Values are string. - `uri`: URI - `status`: 'used' if the URI is in use. 'waiting' if the URI is still waiting in the queue. Original signature: aria2.getUris([secret], gid) Arguments: gid: The download to list URIs of. Returns: The URIs used in a download. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getUris', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [{u'status': u'used', u'uri': u'http://example.org/file'}]} \"\"\" return self . call ( self . GET_URIS , [ gid ])","title":"get_uris()"},{"location":"reference/client/#aria2p.client.Client.get_version","text":"Return aria2 version and the list of enabled features. Original signature: aria2.getVersion([secret]) Returns: Type Description str A struct that contains the following keys: version : Version number of aria2 as a string. enabledFeatures : List of enabled features. Each feature is given as a string. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.getVersion' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'enabledFeatures' : [ u 'Async DNS' , u 'BitTorrent' , u 'Firefox3 Cookie' , u 'GZip' , u 'HTTPS' , u 'Message Digest' , u 'Metalink' , u 'XML-RPC' ], u 'version' : u '1.11.0' }} Source code in aria2p/client.py def get_version ( self ) -> str : \"\"\" Return aria2 version and the list of enabled features. Original signature: aria2.getVersion([secret]) Returns: A struct that contains the following keys: - `version`: Version number of aria2 as a string. - `enabledFeatures`: List of enabled features. Each feature is given as a string. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.getVersion'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'enabledFeatures': [u'Async DNS', u'BitTorrent', u'Firefox3 Cookie', u'GZip', u'HTTPS', u'Message Digest', u'Metalink', u'XML-RPC'], u'version': u'1.11.0'}} \"\"\" return self . call ( self . GET_VERSION )","title":"get_version()"},{"location":"reference/client/#aria2p.client.Client.list_methods","text":"Return the available RPC methods. This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. Original signature: system.listMethods() Returns: Type Description List[str] The list of available RPC methods. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listMethods' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.addUri' , u 'aria2.addTorrent' , ... Source code in aria2p/client.py def list_methods ( self ) -> List [ str ]: \"\"\" Return the available RPC methods. This method returns all the available RPC methods in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available method names. Original signature: system.listMethods() Returns: The list of available RPC methods. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listMethods'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.addUri', u'aria2.addTorrent', ... \"\"\" return self . call ( self . LIST_METHODS )","title":"list_methods()"},{"location":"reference/client/#aria2p.client.Client.list_notifications","text":"Return all the available RPC notifications. This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. Original signature: system.listNotifications() Returns: Type Description List[str] The list of available RPC notifications. Examples: Original JSON-RPC Example >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.listNotifications' }) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [ u 'aria2.onDownloadStart' , u 'aria2.onDownloadPause' , ... Source code in aria2p/client.py def list_notifications ( self ) -> List [ str ]: \"\"\" Return all the available RPC notifications. This method returns all the available RPC notifications in an array of string. Unlike other methods, this method does not require secret token. This is safe because this method just returns the available notifications names. Original signature: system.listNotifications() Returns: The list of available RPC notifications. Examples: **Original JSON-RPC Example** >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.listNotifications'}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [u'aria2.onDownloadStart', u'aria2.onDownloadPause', ... \"\"\" return self . call ( self . LIST_NOTIFICATIONS )","title":"list_notifications()"},{"location":"reference/client/#aria2p.client.Client.listen_to_notifications","text":"Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [ stop_listening ][aria2p.client.Client.stop_listening] method. Parameters: Name Type Description Default on_download_start Callable Callback for the onDownloadStart event. None on_download_pause Callable Callback for the onDownloadPause event. None on_download_stop Callable Callback for the onDownloadStop event. None on_download_complete Callable Callback for the onDownloadComplete event. None on_download_error Callable Callback for the onDownloadError event. None on_bt_download_complete Callable Callback for the onBtDownloadComplete event. None timeout int Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. 5 handle_signals bool Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. True Source code in aria2p/client.py def listen_to_notifications ( # noqa: WPS231 (false-positive because of logging lines?) self , on_download_start : Callable = None , on_download_pause : Callable = None , on_download_stop : Callable = None , on_download_complete : Callable = None , on_download_error : Callable = None , on_bt_download_complete : Callable = None , timeout : int = 5 , handle_signals : bool = True , ) -> None : \"\"\" Start listening to aria2 notifications via WebSocket. This method opens a WebSocket connection to the server and wait for notifications (or events) to be received. It accepts callbacks as arguments, which are functions accepting one parameter called \"gid\", for each type of notification. Stop listening to notifications with the [`stop_listening`][aria2p.client.Client.stop_listening] method. Arguments: on_download_start: Callback for the `onDownloadStart` event. on_download_pause: Callback for the `onDownloadPause` event. on_download_stop: Callback for the `onDownloadStop` event. on_download_complete: Callback for the `onDownloadComplete` event. on_download_error: Callback for the `onDownloadError` event. on_bt_download_complete: Callback for the `onBtDownloadComplete` event. timeout: Timeout when waiting for data to be received. Use a small value for faster reactivity when stopping to listen. Default is 5 seconds. handle_signals: Whether to add signal handlers to gracefully stop the loop on SIGTERM and SIGINT. \"\"\" self . listening = True ws_server = self . ws_server log_prefix = f \"Notifications ( { ws_server } )\" logger . debug ( f \" { log_prefix } : opening WebSocket with timeout= { timeout } \" ) try : socket = websocket . create_connection ( ws_server , timeout = timeout ) except ConnectionRefusedError : logger . error ( f \" { log_prefix } : connection refused. Is the server running?\" ) return callbacks = { NOTIFICATION_START : on_download_start , NOTIFICATION_PAUSE : on_download_pause , NOTIFICATION_STOP : on_download_stop , NOTIFICATION_COMPLETE : on_download_complete , NOTIFICATION_ERROR : on_download_error , NOTIFICATION_BT_COMPLETE : on_bt_download_complete , } stopped = SignalHandler ([ \"SIGTERM\" , \"SIGINT\" ]) if handle_signals else False while not stopped : logger . debug ( f \" { log_prefix } : waiting for data over WebSocket\" ) try : message = socket . recv () except websocket . WebSocketConnectionClosedException : logger . error ( f \" { log_prefix } : connection to server was closed. Is the server running?\" ) break except websocket . WebSocketTimeoutException : logger . debug ( f \" { log_prefix } : reached timeout ( { timeout } s)\" ) else : notification = Notification . get_or_raise ( json . loads ( message )) logger . info ( f \" { log_prefix } : received { notification . type } with gid= { notification . gid } \" , ) callback = callbacks . get ( notification . type ) if callable ( callback ): logger . debug ( f \" { log_prefix } : calling { callback } with gid= { notification . gid } \" ) callback ( notification . gid ) else : logger . debug ( f \" { log_prefix } : no callback given for type \" + notification . type ) if not self . listening : logger . debug ( f \" { log_prefix } : stopped listening\" ) break if stopped : logger . debug ( f \" { log_prefix } : stopped listening after receiving a signal\" ) self . listening = False logger . debug ( f \" { log_prefix } : closing WebSocket\" ) socket . close ()","title":"listen_to_notifications()"},{"location":"reference/client/#aria2p.client.Client.multicall","text":"Call multiple methods in a single request. This methods encapsulates multiple method calls in a single request. Original signature: system.multicall(methods) Parameters: Name Type Description Default methods List[dict] An array of structs. The structs contain two keys: methodName and params . - methodName is the method name to call and - params is array containing parameters to the method call. required Returns: Type Description List[Union[dict, list, str, int]] An array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. Examples: Original JSON-RPC Example In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. >>> import urllib2 , json , base64 >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'system.multicall' , ... 'params' :[[{ 'methodName' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'methodName' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : [[ u '0000000000000001' ], [ u 'd2703803b52216d1' ]]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json . dumps ([{ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.addUri' , ... 'params' :[[ 'http://example.org' ]]}, ... { 'jsonrpc' : '2.0' , 'id' : 'asdf' , ... 'method' : 'aria2.addTorrent' , ... 'params' :[ base64 . b64encode ( open ( 'file.torrent' ) . read ())]}]) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) [{ u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u '0000000000000001' }, { u 'id' : u 'asdf' , u 'jsonrpc' : u '2.0' , u 'result' : u 'd2703803b52216d1' }] Source code in aria2p/client.py def multicall ( self , methods : List [ dict ]) -> List [ CallReturnType ]: \"\"\" Call multiple methods in a single request. This methods encapsulates multiple method calls in a single request. Original signature: system.multicall(methods) Arguments: methods: An array of structs. The structs contain two keys: `methodName` and `params`. - `methodName` is the method name to call and - `params` is array containing parameters to the method call. Returns: An array of responses. The elements will be either a one-item array containing the return value of the method call or a struct of fault element if an encapsulated method call fails. Examples: **Original JSON-RPC Example** In the following examples, we add 2 downloads. The first one is http://example.org/file and the second one is file.torrent. >>> import urllib2, json, base64 >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'system.multicall', ... 'params':[[{'methodName':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'methodName':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': [[u'0000000000000001'], [u'd2703803b52216d1']]} JSON-RPC additionally supports Batch requests as described in the JSON-RPC 2.0 Specification: >>> jsonreq = json.dumps([{'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.addUri', ... 'params':[['http://example.org']]}, ... {'jsonrpc':'2.0', 'id':'asdf', ... 'method':'aria2.addTorrent', ... 'params':[base64.b64encode(open('file.torrent').read())]}]) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) [{u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'0000000000000001'}, {u'id': u'asdf', u'jsonrpc': u'2.0', u'result': u'd2703803b52216d1'}] \"\"\" return self . call ( self . MULTICALL , [ methods ])","title":"multicall()"},{"location":"reference/client/#aria2p.client.Client.multicall2","text":"Call multiple methods in one request. A method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"0000000000000001\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Parameters: Name Type Description Default calls List[Tuple[str, List[str]]] List of tuples composed of method name and parameters. required insert_secret bool Whether to insert the secret token in the parameters or not. True Returns: Type Description Union[dict, list, str, int] The answer from the server, as a Python object (dict / list / str / int). Source code in aria2p/client.py def multicall2 ( self , calls : Multicalls2Type , insert_secret : bool = True ) -> CallReturnType : \"\"\" Call multiple methods in one request. A method equivalent to multicall, but with a simplified usage. Instead of providing dictionaries with \"methodName\" and \"params\" keys and values, this method allows you to provide the values only, in tuples of length 2. With a classic multicall, you would write your params like: [ {\"methodName\": client.REMOVE, \"params\": [\"0000000000000001\"]}, {\"methodName\": client.REMOVE, \"params\": [\"2fa07b6e85c40205\"]}, ] With multicall2, you can reduce the verbosity: [ (client.REMOVE, [\"0000000000000001\"]), (client.REMOVE, [\"2fa07b6e85c40205\"]), ] Note: multicall2 is not part of the JSON-RPC protocol specification. It is implemented here as a simple convenience method. Arguments: calls: List of tuples composed of method name and parameters. insert_secret: Whether to insert the secret token in the parameters or not. Returns: The answer from the server, as a Python object (dict / list / str / int). \"\"\" multicall_params = [] for method , params in calls : params = self . get_params ( * params ) if insert_secret and self . secret and method . startswith ( \"aria2.\" ): params . insert ( 0 , f \"token: { self . secret } \" ) multicall_params . append ({ \"methodName\" : method , \"params\" : params }) payload : str = self . get_payload ( self . MULTICALL , [ multicall_params ]) return self . res_or_raise ( self . post ( payload ))","title":"multicall2()"},{"location":"reference/client/#aria2p.client.Client.pause","text":"Pause a download. This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the [ unpause() ][aria2p.client.Client.unpause] method. Original signature: aria2.pause([secret], gid) Parameters: Name Type Description Default gid str The download to pause. required Returns: Type Description str The GID of the paused download. Source code in aria2p/client.py def pause ( self , gid : str ) -> str : \"\"\" Pause a download. This method pauses the download denoted by gid (string). The status of paused download becomes paused. If the download was active, the download is placed in the front of waiting queue. While the status is paused, the download is not started. To change status to waiting, use the [`unpause()`][aria2p.client.Client.unpause] method. Original signature: aria2.pause([secret], gid) Arguments: gid: The download to pause. Returns: The GID of the paused download. \"\"\" return self . call ( self . PAUSE , [ gid ])","title":"pause()"},{"location":"reference/client/#aria2p.client.Client.pause_all","text":"Pause all active/waiting downloads. This method is equal to calling [ pause() ][aria2p.client.Client.pause] for every active/waiting download. Original signature: aria2.pauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def pause_all ( self ) -> str : \"\"\" Pause all active/waiting downloads. This method is equal to calling [`pause()`][aria2p.client.Client.pause] for every active/waiting download. Original signature: aria2.pauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . PAUSE_ALL )","title":"pause_all()"},{"location":"reference/client/#aria2p.client.Client.post","text":"Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Parameters: Name Type Description Default payload str The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). required Returns: Type Description dict The answer from the server, as a Python dictionary. Source code in aria2p/client.py def post ( self , payload : str ) -> dict : \"\"\" Send a POST request to the server. The response is a JSON string, which we then load as a Python object. Arguments: payload: The payload / data to send to the remote process. It contains the following key-value pairs: \"jsonrpc\": \"2.0\", \"method\": method, \"id\": id, \"params\": params (optional). Returns: The answer from the server, as a Python dictionary. \"\"\" return requests . post ( self . server , data = payload , timeout = self . timeout ) . json ()","title":"post()"},{"location":"reference/client/#aria2p.client.Client.purge_download_result","text":"Purge completed/error/removed downloads from memory. Original signature: aria2.purgeDownloadResult([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def purge_download_result ( self ) -> str : \"\"\" Purge completed/error/removed downloads from memory. Original signature: aria2.purgeDownloadResult([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . PURGE_DOWNLOAD_RESULT )","title":"purge_download_result()"},{"location":"reference/client/#aria2p.client.Client.remove","text":"Remove a download. This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. Original signature: aria2.remove([secret], gid) Parameters: Name Type Description Default gid str The download to remove. required Returns: Type Description str The GID of the removed download. Examples: Original JSON-RPC Example The following examples remove a download with GID#0000000000000001. >>> import urllib2 , json >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.remove' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> c . read () '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' Source code in aria2p/client.py def remove ( self , gid : str ) -> str : \"\"\" Remove a download. This method removes the download denoted by gid (string). If the specified download is in progress, it is first stopped. The status of the removed download becomes removed. This method returns GID of removed download. Original signature: aria2.remove([secret], gid) Arguments: gid: The download to remove. Returns: The GID of the removed download. Examples: **Original JSON-RPC Example** The following examples remove a download with GID#0000000000000001. >>> import urllib2, json >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.remove', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> c.read() '{\"id\":\"qwer\",\"jsonrpc\":\"2.0\",\"result\":\"0000000000000001\"}' \"\"\" return self . call ( self . REMOVE , [ gid ]) # noqa: WPS204 (overused [gid])","title":"remove()"},{"location":"reference/client/#aria2p.client.Client.remove_download_result","text":"Remove a completed/error/removed download from memory. Original signature: aria2.removeDownloadResult([secret], gid) Parameters: Name Type Description Default gid str The download result to remove. required Returns: Type Description str \"OK\" for success. Examples: Original JSON-RPC Example The following examples remove the download result of the download GID#0000000000000001. >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.removeDownloadResult' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : u 'OK' } Source code in aria2p/client.py def remove_download_result ( self , gid : str ) -> str : \"\"\" Remove a completed/error/removed download from memory. Original signature: aria2.removeDownloadResult([secret], gid) Arguments: gid: The download result to remove. Returns: `\"OK\"` for success. Examples: **Original JSON-RPC Example** The following examples remove the download result of the download GID#0000000000000001. >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.removeDownloadResult', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': u'OK'} \"\"\" return self . call ( self . REMOVE_DOWNLOAD_RESULT , [ gid ])","title":"remove_download_result()"},{"location":"reference/client/#aria2p.client.Client.res_or_raise","text":"Return the result of the response, or raise an error with code and message. Parameters: Name Type Description Default response dict A response sent by the server. required Returns: Type Description Union[dict, list, str, int] The \"result\" value of the response. Exceptions: Type Description ClientException When the response contains an error (client/server error). See the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py @staticmethod def res_or_raise ( response : dict ) -> CallReturnType : \"\"\" Return the result of the response, or raise an error with code and message. Arguments: response: A response sent by the server. Returns: The \"result\" value of the response. Raises: ClientException: When the response contains an error (client/server error). See the [`ClientException`][aria2p.client.ClientException] class. \"\"\" # noqa: DAR401,DAR402 (fails to follow exceptions) if \"error\" in response : raise Client . response_as_exception ( response ) return response [ \"result\" ]","title":"res_or_raise()"},{"location":"reference/client/#aria2p.client.Client.response_as_exception","text":"Transform the response as a [ ClientException ][aria2p.client.ClientException] instance and return it. Parameters: Name Type Description Default response dict A response sent by the server. required Returns: Type Description ClientException An instance of the [ ClientException ][aria2p.client.ClientException] class. Source code in aria2p/client.py @staticmethod def response_as_exception ( response : dict ) -> ClientException : \"\"\" Transform the response as a [`ClientException`][aria2p.client.ClientException] instance and return it. Arguments: response: A response sent by the server. Returns: An instance of the [`ClientException`][aria2p.client.ClientException] class. \"\"\" return ClientException ( response [ \"error\" ][ \"code\" ], response [ \"error\" ][ \"message\" ])","title":"response_as_exception()"},{"location":"reference/client/#aria2p.client.Client.save_session","text":"Save the current session to a file. This method saves the current session to a file specified by the [ --save-session ][aria2p.options.Options.save_session] option. Original signature: aria2.saveSession([secret]) Returns: Type Description str \"OK\" if it succeeds. Source code in aria2p/client.py def save_session ( self ) -> str : \"\"\" Save the current session to a file. This method saves the current session to a file specified by the [`--save-session`][aria2p.options.Options.save_session] option. Original signature: aria2.saveSession([secret]) Returns: `\"OK\"` if it succeeds. \"\"\" return self . call ( self . SAVE_SESSION )","title":"save_session()"},{"location":"reference/client/#aria2p.client.Client.shutdown","text":"Shutdown aria2. Original signature: aria2.shutdown([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def shutdown ( self ) -> str : \"\"\" Shutdown aria2. Original signature: aria2.shutdown([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . SHUTDOWN )","title":"shutdown()"},{"location":"reference/client/#aria2p.client.Client.stop_listening","text":"Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [ Client.listen_to_notifications ][aria2p.client.Client.listen_to_notifications]. Source code in aria2p/client.py def stop_listening ( self ) -> None : \"\"\" Stop listening to notifications. Although this method returns instantly, the actual listening loop can take some time to break out, depending on the timeout that was given to [`Client.listen_to_notifications`][aria2p.client.Client.listen_to_notifications]. \"\"\" self . listening = False","title":"stop_listening()"},{"location":"reference/client/#aria2p.client.Client.tell_active","text":"Return the list of active downloads. Original signature: aria2.tellActive([secret][, keys]) Parameters: Name Type Description Default keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_active ( self , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of active downloads. Original signature: aria2.tellActive([secret][, keys]) Arguments: keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_ACTIVE , [ keys ])","title":"tell_active()"},{"location":"reference/client/#aria2p.client.Client.tell_status","text":"Tell status of a download. This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, tell_status(\"0000000000000001\", [\"gid\", \"status\"]) returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. gid : GID of the download. status : active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. totalLength : Total length of the download in bytes. completedLength : Completed length of the download in bytes. uploadLength : Uploaded length of the download in bytes. bitfield : Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. downloadSpeed : Download speed of this download measured in bytes/sec. uploadSpeed : Upload speed of this download measured in bytes/sec. infoHash : InfoHash. BitTorrent only. numSeeders : The number of seeders aria2 has connected to. BitTorrent only. seeder true if the local endpoint is a seeder. Otherwise false. BitTorrent only. pieceLength : Piece length in bytes. numPieces : The number of pieces. connections : The number of peers/servers aria2 has connected to. errorCode : The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. errorMessage : The (hopefully) human readable error message associated to errorCode. followedBy : List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the [ --follow-metalink ][aria2p.options.Options.follow_metalink] option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. following : The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. belongsTo : GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. dir :Directory to save files. files : Return the list of files. The elements of this list are the same structs used in [ get_files() ][aria2p.client.Client.get_files] method. bittorrent : Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains the following keys: announceList : List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. comment : The comment of the torrent. comment.utf-8 is used if available. creationDate : The creation time of the torrent. The value is an integer since the epoch, measured in seconds. mode : File mode of the torrent. The value is either single or multi. info : Struct which contains data from Info dictionary. It contains following keys. name : name in info dictionary. name.utf-8 is used if available. verifiedLength : The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. verifyIntegrityPending : true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Original signature: aria2.tellStatus([secret], gid[, keys]) Parameters: Name Type Description Default gid str The download to tell status of. required keys Optional[dict] The keys to return. None Returns: Type Description dict The details of a download. Examples: Original JSON-RPC Example The following example gets information about a download with GID#0000000000000001: >>> import urllib2 , json >>> from pprint import pprint >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '0000000000000001' ]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'bitfield' : u '0000000000' , u 'completedLength' : u '901120' , u 'connections' : u '1' , u 'dir' : u '/downloads' , u 'downloadSpeed' : u '15158' , u 'files' : [{ u 'index' : u '1' , u 'length' : u '34896138' , u 'completedLength' : u '34896138' , u 'path' : u '/downloads/file' , u 'selected' : u 'true' , u 'uris' : [{ u 'status' : u 'used' , u 'uri' : u 'http://example.org/file' }]}], u 'gid' : u '0000000000000001' , u 'numPieces' : u '34' , u 'pieceLength' : u '1048576' , u 'status' : u 'active' , u 'totalLength' : u '34896138' , u 'uploadLength' : u '0' , u 'uploadSpeed' : u '0' }} The following example gets only specific keys: >>> jsonreq = json . dumps ({ 'jsonrpc' : '2.0' , 'id' : 'qwer' , ... 'method' : 'aria2.tellStatus' , ... 'params' :[ '0000000000000001' , ... [ 'gid' , ... 'totalLength' , ... 'completedLength' ]]}) >>> c = urllib2 . urlopen ( 'http://localhost:6800/jsonrpc' , jsonreq ) >>> pprint ( json . loads ( c . read ())) { u 'id' : u 'qwer' , u 'jsonrpc' : u '2.0' , u 'result' : { u 'completedLength' : u '5701632' , u 'gid' : u '0000000000000001' , u 'totalLength' : u '34896138' }} Source code in aria2p/client.py def tell_status ( self , gid : str , keys : Optional [ dict ] = None ) -> dict : \"\"\" Tell status of a download. This method returns the progress of the download denoted by gid (string). keys is an array of strings. If specified, the response contains only keys in the keys array. If keys is empty or omitted, the response contains all keys. This is useful when you just want specific keys and avoid unnecessary transfers. For example, `tell_status(\"0000000000000001\", [\"gid\", \"status\"])` returns the gid and status keys only. The response is a struct and contains following keys. Values are strings. - `gid`: GID of the download. - `status`: active for currently downloading/seeding downloads. waiting for downloads in the queue; download is not started. paused for paused downloads. error for downloads that were stopped because of error. complete for stopped and completed downloads. removed for the downloads removed by user. - `totalLength`: Total length of the download in bytes. - `completedLength`: Completed length of the download in bytes. - `uploadLength`: Uploaded length of the download in bytes. - `bitfield`: Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. - `downloadSpeed`: Download speed of this download measured in bytes/sec. - `uploadSpeed`: Upload speed of this download measured in bytes/sec. - `infoHash`: InfoHash. BitTorrent only. - `numSeeders`: The number of seeders aria2 has connected to. BitTorrent only. - `seeder` true if the local endpoint is a seeder. Otherwise false. BitTorrent only. - `pieceLength`: Piece length in bytes. - `numPieces`: The number of pieces. - `connections`: The number of peers/servers aria2 has connected to. - `errorCode`: The code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. - `errorMessage`: The (hopefully) human readable error message associated to errorCode. - `followedBy`: List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the [`--follow-metalink`][aria2p.options.Options.follow_metalink] option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. - `following`: The reverse link for followedBy. A download included in followedBy has this object's GID in its following value. - `belongsTo`: GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, the downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. - `dir`:Directory to save files. - `files`: Return the list of files. The elements of this list are the same structs used in [`get_files()`][aria2p.client.Client.get_files] method. - `bittorrent`: Struct which contains information retrieved from the .torrent (file). BitTorrent only. It contains the following keys: - `announceList`: List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. - `comment`: The comment of the torrent. comment.utf-8 is used if available. - `creationDate`: The creation time of the torrent. The value is an integer since the epoch, measured in seconds. - `mode`: File mode of the torrent. The value is either single or multi. - `info`: Struct which contains data from Info dictionary. It contains following keys. - `name`: name in info dictionary. name.utf-8 is used if available. - `verifiedLength`: The number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. - `verifyIntegrityPending`: true if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Original signature: aria2.tellStatus([secret], gid[, keys]) Arguments: gid: The download to tell status of. keys: The keys to return. Returns: The details of a download. Examples: **Original JSON-RPC Example** The following example gets information about a download with GID#0000000000000001: >>> import urllib2, json >>> from pprint import pprint >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['0000000000000001']}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'bitfield': u'0000000000', u'completedLength': u'901120', u'connections': u'1', u'dir': u'/downloads', u'downloadSpeed': u'15158', u'files': [{u'index': u'1', u'length': u'34896138', u'completedLength': u'34896138', u'path': u'/downloads/file', u'selected': u'true', u'uris': [{u'status': u'used', u'uri': u'http://example.org/file'}]}], u'gid': u'0000000000000001', u'numPieces': u'34', u'pieceLength': u'1048576', u'status': u'active', u'totalLength': u'34896138', u'uploadLength': u'0', u'uploadSpeed': u'0'}} The following example gets only specific keys: >>> jsonreq = json.dumps({'jsonrpc':'2.0', 'id':'qwer', ... 'method':'aria2.tellStatus', ... 'params':['0000000000000001', ... ['gid', ... 'totalLength', ... 'completedLength']]}) >>> c = urllib2.urlopen('http://localhost:6800/jsonrpc', jsonreq) >>> pprint(json.loads(c.read())) {u'id': u'qwer', u'jsonrpc': u'2.0', u'result': {u'completedLength': u'5701632', u'gid': u'0000000000000001', u'totalLength': u'34896138'}} \"\"\" return self . call ( self . TELL_STATUS , [ gid , keys ])","title":"tell_status()"},{"location":"reference/client/#aria2p.client.Client.tell_stopped","text":"Return the list of stopped downloads. This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. Original signature: aria2.tellStopped([secret], offset, num[, keys]) Parameters: Name Type Description Default offset int Same semantics as described in the [ tell_waiting() ][aria2p.client.Client.tell_waiting] method. required num int An integer to specify the maximum number of downloads to be returned. required keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by the [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_stopped ( self , offset : int , num : int , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of stopped downloads. This method returns a list of stopped downloads. offset is an integer and specifies the offset from the least recently stopped download. Original signature: aria2.tellStopped([secret], offset, num[, keys]) Arguments: offset: Same semantics as described in the [`tell_waiting()`][aria2p.client.Client.tell_waiting] method. num: An integer to specify the maximum number of downloads to be returned. keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by the [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_STOPPED , [ offset , num , keys ])","title":"tell_stopped()"},{"location":"reference/client/#aria2p.client.Client.tell_waiting","text":"Return the list of waiting downloads. This method returns a list of waiting downloads, including paused ones. Original signature: aria2.tellWaiting([secret], offset, num[, keys]) Parameters: Name Type Description Default offset int An integer to specify the offset from the download waiting at the front. If offset is a positive integer, this method returns downloads in the range of [ offset , offset + num ). offset can be a negative integer. offset == -1 points last download in the waiting queue and offset == -2 points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. tell_waiting(0, 1) returns [\"A\"] . tell_waiting(1, 2) returns [\"B\", \"C\"] . tell_waiting(-1, 2) returns [\"C\", \"B\"] . required num int An integer to specify the maximum number of downloads to be returned. required keys Optional[dict] The keys to return. Please refer to the [ tell_status() ][aria2p.client.Client.tell_status] method. None Returns: Type Description List[dict] An array of the same structs as returned by [ tell_status() ][aria2p.client.Client.tell_status] method. Source code in aria2p/client.py def tell_waiting ( self , offset : int , num : int , keys : Optional [ dict ] = None ) -> List [ dict ]: \"\"\" Return the list of waiting downloads. This method returns a list of waiting downloads, including paused ones. Original signature: aria2.tellWaiting([secret], offset, num[, keys]) Arguments: offset: An integer to specify the offset from the download waiting at the front. If `offset` is a positive integer, this method returns downloads in the range of [`offset`, `offset` + `num`). `offset` can be a negative integer. `offset == -1` points last download in the waiting queue and `offset == -2` points the download before the last download, and so on. Downloads in the response are in reversed order then. For example, imagine three downloads \"A\",\"B\" and \"C\" are waiting in this order. `tell_waiting(0, 1)` returns `[\"A\"]`. `tell_waiting(1, 2)` returns `[\"B\", \"C\"]`. `tell_waiting(-1, 2)` returns `[\"C\", \"B\"]`. num: An integer to specify the maximum number of downloads to be returned. keys: The keys to return. Please refer to the [`tell_status()`][aria2p.client.Client.tell_status] method. Returns: An array of the same structs as returned by [`tell_status()`][aria2p.client.Client.tell_status] method. \"\"\" return self . call ( self . TELL_WAITING , [ offset , num , keys ])","title":"tell_waiting()"},{"location":"reference/client/#aria2p.client.Client.unpause","text":"Resume a download. This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Original signature: aria2.unpause([secret], gid) Parameters: Name Type Description Default gid str The download to resume. required Returns: Type Description str The GID of the resumed download. Source code in aria2p/client.py def unpause ( self , gid : str ) -> str : \"\"\" Resume a download. This method changes the status of the download denoted by gid (string) from paused to waiting, making the download eligible to be restarted. This method returns the GID of the unpaused download. Original signature: aria2.unpause([secret], gid) Arguments: gid: The download to resume. Returns: The GID of the resumed download. \"\"\" return self . call ( self . UNPAUSE , [ gid ])","title":"unpause()"},{"location":"reference/client/#aria2p.client.Client.unpause_all","text":"Resume all downloads. This method is equal to calling [ unpause() ][aria2p.client.Client.unpause] for every active/waiting download. Original signature: aria2.unpauseAll([secret]) Returns: Type Description str \"OK\" . Source code in aria2p/client.py def unpause_all ( self ) -> str : \"\"\" Resume all downloads. This method is equal to calling [`unpause()`][aria2p.client.Client.unpause] for every active/waiting download. Original signature: aria2.unpauseAll([secret]) Returns: `\"OK\"`. \"\"\" return self . call ( self . UNPAUSE_ALL )","title":"unpause_all()"},{"location":"reference/client/#aria2p.client.ClientException","text":"An exception specific to JSON-RPC errors.","title":"ClientException"},{"location":"reference/client/#aria2p.client.ClientException.__init__","text":"Initialize the exception. Parameters: Name Type Description Default code int The error code. required message str The error message. required Source code in aria2p/client.py def __init__ ( self , code : int , message : str ) -> None : \"\"\" Initialize the exception. Arguments: code: The error code. message: The error message. \"\"\" super () . __init__ () if code in JSONRPC_CODES : message = f \" { JSONRPC_CODES [ code ] } \\n { message } \" self . code = code self . message = message","title":"__init__()"},{"location":"reference/client/#aria2p.client.Notification","text":"A helper class for notifications. You should not need to use this class. It simply provides methods to instantiate a notification with a message received from the server through a WebSocket, or to raise a ClientException if the message is invalid.","title":"Notification"},{"location":"reference/client/#aria2p.client.Notification.__init__","text":"Initialize the object. Parameters: Name Type Description Default event_type str The notification type. Possible types are available in the NOTIFICATION_TYPES variable. required gid str The GID of the download related to the notification. required Source code in aria2p/client.py def __init__ ( self , event_type : str , gid : str ) -> None : \"\"\" Initialize the object. Arguments: event_type: The notification type. Possible types are available in the NOTIFICATION_TYPES variable. gid: The GID of the download related to the notification. \"\"\" self . type = event_type self . gid = gid","title":"__init__()"},{"location":"reference/client/#aria2p.client.Notification.from_message","text":"Return an instance of Notification. This method expects a valid message (not containing errors). Parameters: Name Type Description Default message dict A valid message received over WebSocket. required Returns: Type Description Notification A Notification instance. Source code in aria2p/client.py @staticmethod def from_message ( message : dict ) -> \"Notification\" : \"\"\" Return an instance of Notification. This method expects a valid message (not containing errors). Arguments: message: A valid message received over WebSocket. Returns: A Notification instance. \"\"\" return Notification ( event_type = message [ \"method\" ], gid = message [ \"params\" ][ 0 ][ \"gid\" ])","title":"from_message()"},{"location":"reference/client/#aria2p.client.Notification.get_or_raise","text":"Raise a ClientException when the message is invalid or return a Notification instance. Parameters: Name Type Description Default message dict The JSON-loaded message received over WebSocket. required Returns: Type Description Notification A Notification instance if the message is valid. Exceptions: Type Description ClientException When the message contains an error. Source code in aria2p/client.py @staticmethod def get_or_raise ( message : dict ) -> \"Notification\" : \"\"\" Raise a ClientException when the message is invalid or return a Notification instance. Arguments: message: The JSON-loaded message received over WebSocket. Returns: A Notification instance if the message is valid. Raises: ClientException: When the message contains an error. \"\"\" # noqa: DAR401,DAR402 (fails to follow exceptions) if \"error\" in message : raise Client . response_as_exception ( message ) return Notification . from_message ( message )","title":"get_or_raise()"},{"location":"reference/downloads/","text":"\u00a4 This module defines the BitTorrent, File and Download classes. They respectively hold structured information about torrent files, files and downloads in aria2c. BitTorrent \u00a4 Information retrieved from a torrent file. announce_list: Optional [ List [ List [ str ]]] property readonly \u00a4 List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. Returns: Type Description Optional[List[List[str]]] The announce URIs. comment: Optional [ str ] property readonly \u00a4 Return the comment of the torrent. comment.utf-8 is used if available. Returns: Type Description Optional[str] The torrent's comment. creation_date: datetime property readonly \u00a4 Return the creation time of the torrent. The value is an integer since the epoch, measured in seconds. Returns: Type Description datetime The creation date. info: Optional [ dict ] property readonly \u00a4 Struct which contains data from Info dictionary. It contains the name key: name in info dictionary. name.utf-8 is used if available. Returns: Type Description Optional[dict] The torrent's info. mode: Optional [ str ] property readonly \u00a4 File mode of the torrent. The value is either single or multi. Returns: Type Description Optional[str] The file mode. __init__ ( self , struct ) special \u00a4 Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} Download \u00a4 Class containing all information about a download, as retrieved with the client. belongs_to: Optional [ Download ] property readonly \u00a4 Parent download. Returns: Type Description Optional[Download] An instance of [ Download ][aria2p.downloads.Download]. belongs_to_id: Optional [ str ] property readonly \u00a4 GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. Returns: Type Description Optional[str] The GID of the parent download. bitfield: Optional [ str ] property readonly \u00a4 Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. Returns: Type Description Optional[str] The hexadecimal representation of the download progress. bittorrent: Optional [ aria2p . downloads . BitTorrent ] property readonly \u00a4 Struct which contains information retrieved from the .torrent (file). BitTorrent only. Returns: Type Description Optional[aria2p.downloads.BitTorrent] A [BitTorrent][aria2p.downloads.BitTorrent] instance or None . completed_length: int property readonly \u00a4 Completed length of the download in bytes. Returns: Type Description int The completed length in bytes. connections: int property readonly \u00a4 Return the number of peers/servers aria2 has connected to. Returns: Type Description int The number of connected peers/servers. control_file_path: Path property readonly \u00a4 Return the path to the aria2 control file for this download. Returns: Type Description Path The control file path. dir: Path property readonly \u00a4 Directory to save files. Returns: Type Description Path The directory where the files are saved. download_speed: int property readonly \u00a4 Download speed of this download measured in bytes/sec. Returns: Type Description int The download speed in bytes/sec. error_code: Optional [ str ] property readonly \u00a4 Return the code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. Returns: Type Description Optional[str] The error code. error_message: Optional [ str ] property readonly \u00a4 Return the (hopefully) human readable error message associated to errorCode. Returns: Type Description Optional[str] The error message. eta: timedelta property readonly \u00a4 Return the Estimated Time of Arrival (a timedelta). Returns: Type Description timedelta ETA or timedelta.max if unknown. files: List [ aria2p . downloads . File ] property readonly \u00a4 Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. Returns: Type Description List[aria2p.downloads.File] The files of this download. followed_by: List [ Download ] property readonly \u00a4 List of downloads generated as the result of this download. Returns: Type Description List[Download] A list of instances of [ Download ][aria2p.downloads.Download]. followed_by_ids: List [ str ] property readonly \u00a4 List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. Returns: Type Description List[str] The children downloads IDs. following: Optional [ Download ] property readonly \u00a4 Return the download this download is following. Returns: Type Description Optional[Download] An instance of [ Download ][aria2p.downloads.Download]. following_id: Optional [ str ] property readonly \u00a4 Return the reverse link for followedBy. A download included in followedBy has this object's GID in its following value. Returns: Type Description Optional[str] The parent download ID. gid: str property readonly \u00a4 GID of the download. Returns: Type Description str The download GID. has_failed: bool property readonly \u00a4 Return True if download has errored. Returns: Type Description bool If this download has failed. info_hash: Optional [ str ] property readonly \u00a4 Return the InfoHash. BitTorrent only. Returns: Type Description Optional[str] The InfoHash. is_active: bool property readonly \u00a4 Return True if download is active. Returns: Type Description bool If this download is active. is_complete: bool property readonly \u00a4 Return True if download is complete. Returns: Type Description bool If this download is complete. is_metadata: bool property readonly \u00a4 Return True if this download is only composed of metadata, and no actual files. Returns: Type Description bool If this is a metadata download. is_paused: bool property readonly \u00a4 Return True if download is paused. Returns: Type Description bool If this download is paused. is_removed: bool property readonly \u00a4 Return True if download was removed. Returns: Type Description bool If this download was removed. is_torrent: bool property readonly \u00a4 Return true if this download is a torrent. Returns: Type Description bool If this is a torrent downlaod. is_waiting: bool property readonly \u00a4 Return True if download is waiting. Returns: Type Description bool If this download is waiting. live: Download property readonly \u00a4 Return the same object with updated data. Returns: Type Description Download Itself. name: str property readonly \u00a4 Return the name of the download. Name is the name of the file if single-file, first file's directory name if multi-file. Returns: Type Description str The download name. num_pieces: int property readonly \u00a4 Return the number of pieces. Returns: Type Description int The number of pieces. num_seeders: int property readonly \u00a4 Return the number of seeders aria2 has connected to. BitTorrent only. Returns: Type Description int The numbers of seeders. options: Options property writable \u00a4 Options specific to this download. Returns: Type Description Options The download options. piece_length: int property readonly \u00a4 Piece length in bytes. Returns: Type Description int The piece length in bytes. progress: float property readonly \u00a4 Return the progress of the download as float. Returns: Type Description float Progress percentage. root_files_paths: List [ pathlib . Path ] property readonly \u00a4 Return the unique set of directories/files for this download. Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files. This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible. Returns: Type Description List[pathlib.Path] The root file paths. Examples: Download directory is /a/b . >>> self . files [ \"/a/b/c/1.txt\" , \"/a/b/c/2.txt\" , \"/a/b/3.txt\" ] >>> self . root_files_paths [ \"/a/b/c\" , \"/a/b/3.txt\" ] seeder: bool property readonly \u00a4 Return True if the local endpoint is a seeder, otherwise false. BitTorrent only. Returns: Type Description bool If the local endpoint is a seeder. status: str property readonly \u00a4 Return the status of the download. Returns: Type Description str active , waiting , paused , error , complete or removed . total_length: int property readonly \u00a4 Total length of the download in bytes. Returns: Type Description int The total length in bytes. upload_length: int property readonly \u00a4 Return the uploaded length of the download in bytes. Returns: Type Description int The uploaded length in bytes. upload_speed: int property readonly \u00a4 Upload speed of this download measured in bytes/sec. Returns: Type Description int The upload speed in bytes/sec. verified_length: int property readonly \u00a4 Return the number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. Returns: Type Description int The verified length. verify_integrity_pending: Optional [ bool ] property readonly \u00a4 Return True if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Returns: Type Description Optional[bool] Whether this download is waiting for the hash check. __init__ ( self , api , struct ) special \u00a4 Initialize the object. Parameters: Name Type Description Default api aria2p.api.API The reference to an [ API ][aria2p.api.API] instance. required struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , api : \"aria2p.api.API\" , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: api: The reference to an [`API`][aria2p.api.API] instance. struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . api = api self . _struct = struct or {} self . _files : List [ File ] = [] self . _root_files_paths : List [ Path ] = [] self . _bittorrent = None self . _name = \"\" self . _options : Optional [ Options ] = None self . _followed_by : Optional [ List [ Download ]] = None self . _following : Optional [ Download ] = None self . _belongs_to : Optional [ Download ] = None completed_length_string ( self , human_readable = True ) \u00a4 Return the completed length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Arguments: human_readable: Return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\" copy_files ( self , to_directory , force = False ) \u00a4 Copy downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[pathlib.Path, str] The target directory to copy files into. required force bool Whether to move files even if download is not complete. False Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def copy_files ( self , to_directory : PathOrStr , force : bool = False ) -> bool : \"\"\" Copy downloaded files to another directory. Arguments: to_directory: The target directory to copy files into. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation. \"\"\" return self . api . copy_files ([ self ], to_directory , force )[ 0 ] download_speed_string ( self , human_readable = True ) \u00a4 Return the download speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/downloads.py def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\" eta_string ( self , precision = 0 ) \u00a4 Return the Estimated Time of Arrival as a string. Parameters: Name Type Description Default precision int The precision to use, see [aria2p.utils.human_readable_timedelta]. 0 Returns: Type Description str The Estimated Time of Arrival as a string. Source code in aria2p/downloads.py def eta_string ( self , precision : int = 0 ) -> str : \"\"\" Return the Estimated Time of Arrival as a string. Arguments: precision: The precision to use, see [aria2p.utils.human_readable_timedelta]. Returns: The Estimated Time of Arrival as a string. \"\"\" eta = self . eta if eta == timedelta . max : return \"-\" return human_readable_timedelta ( eta , precision = precision ) move ( self , pos ) \u00a4 Move the download in the queue, relatively. Parameters: Name Type Description Default pos int Number of times to move. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move ( self , pos : int ) -> int : \"\"\" Move the download in the queue, relatively. Arguments: pos: Number of times to move. Returns: The new position of the download. \"\"\" return self . api . move ( self , pos ) move_down ( self , pos = 1 ) \u00a4 Move the download down in the queue. Parameters: Name Type Description Default pos int Number of times to move down. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_down ( self , pos : int = 1 ) -> int : \"\"\" Move the download down in the queue. Arguments: pos: Number of times to move down. Returns: The new position of the download. \"\"\" return self . api . move_down ( self , pos ) move_files ( self , to_directory , force = False ) \u00a4 Move downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[pathlib.Path, str] The target directory to move files to. required force bool Whether to move files even if download is not complete. False Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def move_files ( self , to_directory : PathOrStr , force : bool = False ) -> bool : \"\"\" Move downloaded files to another directory. Arguments: to_directory: The target directory to move files to. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation. \"\"\" return self . api . move_files ([ self ], to_directory , force )[ 0 ] move_to ( self , pos ) \u00a4 Move the download in the queue, absolutely. Parameters: Name Type Description Default pos int The absolute position in the queue to take. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to ( self , pos : int ) -> int : \"\"\" Move the download in the queue, absolutely. Arguments: pos: The absolute position in the queue to take. Returns: The new position of the download. \"\"\" return self . api . move_to ( self , pos ) move_to_bottom ( self ) \u00a4 Move the download to the bottom of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to_bottom ( self ) -> int : \"\"\" Move the download to the bottom of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_bottom ( self ) move_to_top ( self ) \u00a4 Move the download to the top of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to_top ( self ) -> int : \"\"\" Move the download to the top of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_top ( self ) move_up ( self , pos = 1 ) \u00a4 Move the download up in the queue. Parameters: Name Type Description Default pos int Number of times to move up. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_up ( self , pos : int = 1 ) -> int : \"\"\" Move the download up in the queue. Arguments: pos: Number of times to move up. Returns: The new position of the download. \"\"\" return self . api . move_up ( self , pos ) pause ( self , force = False ) \u00a4 Pause the download. Parameters: Name Type Description Default force bool Whether to force pause (don't contact servers). False Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When pausing failed. Source code in aria2p/downloads.py def pause ( self , force : bool = False ) -> bool : \"\"\" Pause the download. Arguments: force: Whether to force pause (don't contact servers). Returns: Always True (raises exception otherwise). Raises: ClientException: When pausing failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . pause ([ self ], force = force )[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True piece_length_string ( self , human_readable = True ) \u00a4 Return the piece length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The piece length string. Source code in aria2p/downloads.py def piece_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the piece length as string. Arguments: human_readable: Return in human readable format or not. Returns: The piece length string. \"\"\" if human_readable : return human_readable_bytes ( self . piece_length , delim = \" \" ) return str ( self . piece_length ) + \" B\" progress_string ( self , digits = 2 ) \u00a4 Return the progress percentage as string. Parameters: Name Type Description Default digits int Number of decimal digits to use. 2 Returns: Type Description str The progress percentage. Source code in aria2p/downloads.py def progress_string ( self , digits : int = 2 ) -> str : \"\"\" Return the progress percentage as string. Arguments: digits: Number of decimal digits to use. Returns: The progress percentage. \"\"\" return f \" { self . progress : . { digits } f } %\" purge ( self ) \u00a4 Purge itself from the results. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def purge ( self ) -> bool : \"\"\" Purge itself from the results. Returns: Success or failure of the operation. \"\"\" return self . api . client . remove_download_result ( self . gid ) == \"OK\" remove ( self , force = False , files = False ) \u00a4 Remove the download from the queue (even if active). Parameters: Name Type Description Default force bool Whether to force removal. False files bool Whether to remove files as well. False Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When removal failed. Source code in aria2p/downloads.py def remove ( self , force : bool = False , files : bool = False ) -> bool : \"\"\" Remove the download from the queue (even if active). Arguments: force: Whether to force removal. files: Whether to remove files as well. Returns: Always True (raises exception otherwise). Raises: ClientException: When removal failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . remove ([ self ], force = force , files = files )[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True resume ( self ) \u00a4 Resume the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When resuming failed. Source code in aria2p/downloads.py def resume ( self ) -> bool : \"\"\" Resume the download. Returns: Always True (raises exception otherwise). Raises: ClientException: When resuming failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . resume ([ self ])[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True total_length_string ( self , human_readable = True ) \u00a4 Return the total length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The total length string. Source code in aria2p/downloads.py def total_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the total length as string. Arguments: human_readable: Return in human readable format or not. Returns: The total length string. \"\"\" if human_readable : return human_readable_bytes ( self . total_length , delim = \" \" ) return str ( self . total_length ) + \" B\" update ( self ) \u00a4 Update the internal values of the download with more recent values. Source code in aria2p/downloads.py def update ( self ) -> None : \"\"\"Update the internal values of the download with more recent values.\"\"\" self . _struct = self . api . client . tell_status ( self . gid ) self . _files = [] self . _name = \"\" self . _bittorrent = None self . _followed_by = None self . _following = None self . _belongs_to = None self . _options = None update_options ( self ) \u00a4 Re-fetch the options from the remote. Source code in aria2p/downloads.py def update_options ( self ) -> None : \"\"\"Re-fetch the options from the remote.\"\"\" self . _options = self . api . get_options ( downloads = [ self ])[ 0 ] upload_length_string ( self , human_readable = True ) \u00a4 Return the upload length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload length string. Source code in aria2p/downloads.py def upload_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload length as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload length string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_length , delim = \" \" ) return str ( self . upload_length ) + \" B\" upload_speed_string ( self , human_readable = True ) \u00a4 Return the upload speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/downloads.py def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\" verified_length_string ( self , human_readable = True ) \u00a4 Return the verified length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The verified length string. Source code in aria2p/downloads.py def verified_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the verified length as string. Arguments: human_readable: Return in human readable format or not. Returns: The verified length string. \"\"\" if human_readable : return human_readable_bytes ( self . verified_length , delim = \" \" ) return str ( self . verified_length ) + \" B\" File \u00a4 Information about a download's file. completed_length: int property readonly \u00a4 Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. Returns: Type Description int The completed length. index: int property readonly \u00a4 Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. Returns: Type Description int The index of the file. is_metadata: bool property readonly \u00a4 Return True if this file is aria2 metadata and not an actual file. Returns: Type Description bool If the file is metadata. length: int property readonly \u00a4 Return the file size in bytes. Returns: Type Description int The file size in bytes. path: Path property readonly \u00a4 File path. Returns: Type Description Path The file path. selected: bool property readonly \u00a4 Return True if this file is selected by [ --select-file ][aria2p.options.Options.select_file] option. If [ --select-file ][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. Returns: Type Description bool If this file is selected. uris: Optional [ List [ str ]] property readonly \u00a4 Return a list of URIs for this file. The element type is the same struct used in the [ client.get_uris() ][aria2p.client.Client.get_uris] method. Returns: Type Description Optional[List[str]] The list of URIs. __init__ ( self , struct ) special \u00a4 Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} completed_length_string ( self , human_readable = True ) \u00a4 Return the completed length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Arguments: human_readable: Return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\" length_string ( self , human_readable = True ) \u00a4 Return the length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The length string. Source code in aria2p/downloads.py def length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the length as string. Arguments: human_readable: Return in human readable format or not. Returns: The length string. \"\"\" if human_readable : return human_readable_bytes ( self . length , delim = \" \" ) return str ( self . length ) + \" B\"","title":"downloads.py"},{"location":"reference/downloads/#aria2p.downloads","text":"This module defines the BitTorrent, File and Download classes. They respectively hold structured information about torrent files, files and downloads in aria2c.","title":"aria2p.downloads"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent","text":"Information retrieved from a torrent file.","title":"BitTorrent"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.announce_list","text":"List of lists of announce URIs. If the torrent contains announce and no announce-list, announce is converted to the announce-list format. Returns: Type Description Optional[List[List[str]]] The announce URIs.","title":"announce_list"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.comment","text":"Return the comment of the torrent. comment.utf-8 is used if available. Returns: Type Description Optional[str] The torrent's comment.","title":"comment"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.creation_date","text":"Return the creation time of the torrent. The value is an integer since the epoch, measured in seconds. Returns: Type Description datetime The creation date.","title":"creation_date"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.info","text":"Struct which contains data from Info dictionary. It contains the name key: name in info dictionary. name.utf-8 is used if available. Returns: Type Description Optional[dict] The torrent's info.","title":"info"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.mode","text":"File mode of the torrent. The value is either single or multi. Returns: Type Description Optional[str] The file mode.","title":"mode"},{"location":"reference/downloads/#aria2p.downloads.BitTorrent.__init__","text":"Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.Download","text":"Class containing all information about a download, as retrieved with the client.","title":"Download"},{"location":"reference/downloads/#aria2p.downloads.Download.belongs_to","text":"Parent download. Returns: Type Description Optional[Download] An instance of [ Download ][aria2p.downloads.Download].","title":"belongs_to"},{"location":"reference/downloads/#aria2p.downloads.Download.belongs_to_id","text":"GID of a parent download. Some downloads are a part of another download. For example, if a file in a Metalink has BitTorrent resources, The downloads of \".torrent\" files are parts of that parent. If this download has no parent, this key will not be included in the response. Returns: Type Description Optional[str] The GID of the parent download.","title":"belongs_to_id"},{"location":"reference/downloads/#aria2p.downloads.Download.bitfield","text":"Hexadecimal representation of the download progress. The highest bit corresponds to the piece at index 0. Any set bits indicate loaded pieces, while unset bits indicate not yet loaded and/or missing pieces. Any overflow bits at the end are set to zero. When the download was not started yet, this key will not be included in the response. Returns: Type Description Optional[str] The hexadecimal representation of the download progress.","title":"bitfield"},{"location":"reference/downloads/#aria2p.downloads.Download.bittorrent","text":"Struct which contains information retrieved from the .torrent (file). BitTorrent only. Returns: Type Description Optional[aria2p.downloads.BitTorrent] A [BitTorrent][aria2p.downloads.BitTorrent] instance or None .","title":"bittorrent"},{"location":"reference/downloads/#aria2p.downloads.Download.completed_length","text":"Completed length of the download in bytes. Returns: Type Description int The completed length in bytes.","title":"completed_length"},{"location":"reference/downloads/#aria2p.downloads.Download.connections","text":"Return the number of peers/servers aria2 has connected to. Returns: Type Description int The number of connected peers/servers.","title":"connections"},{"location":"reference/downloads/#aria2p.downloads.Download.control_file_path","text":"Return the path to the aria2 control file for this download. Returns: Type Description Path The control file path.","title":"control_file_path"},{"location":"reference/downloads/#aria2p.downloads.Download.dir","text":"Directory to save files. Returns: Type Description Path The directory where the files are saved.","title":"dir"},{"location":"reference/downloads/#aria2p.downloads.Download.download_speed","text":"Download speed of this download measured in bytes/sec. Returns: Type Description int The download speed in bytes/sec.","title":"download_speed"},{"location":"reference/downloads/#aria2p.downloads.Download.error_code","text":"Return the code of the last error for this item, if any. The value is a string. The error codes are defined in the EXIT STATUS section. This value is only available for stopped/completed downloads. Returns: Type Description Optional[str] The error code.","title":"error_code"},{"location":"reference/downloads/#aria2p.downloads.Download.error_message","text":"Return the (hopefully) human readable error message associated to errorCode. Returns: Type Description Optional[str] The error message.","title":"error_message"},{"location":"reference/downloads/#aria2p.downloads.Download.eta","text":"Return the Estimated Time of Arrival (a timedelta). Returns: Type Description timedelta ETA or timedelta.max if unknown.","title":"eta"},{"location":"reference/downloads/#aria2p.downloads.Download.files","text":"Return the list of files. The elements of this list are the same structs used in aria2.getFiles() method. Returns: Type Description List[aria2p.downloads.File] The files of this download.","title":"files"},{"location":"reference/downloads/#aria2p.downloads.Download.followed_by","text":"List of downloads generated as the result of this download. Returns: Type Description List[Download] A list of instances of [ Download ][aria2p.downloads.Download].","title":"followed_by"},{"location":"reference/downloads/#aria2p.downloads.Download.followed_by_ids","text":"List of GIDs which are generated as the result of this download. For example, when aria2 downloads a Metalink file, it generates downloads described in the Metalink (see the --follow-metalink option). This value is useful to track auto-generated downloads. If there are no such downloads, this key will not be included in the response. Returns: Type Description List[str] The children downloads IDs.","title":"followed_by_ids"},{"location":"reference/downloads/#aria2p.downloads.Download.following","text":"Return the download this download is following. Returns: Type Description Optional[Download] An instance of [ Download ][aria2p.downloads.Download].","title":"following"},{"location":"reference/downloads/#aria2p.downloads.Download.following_id","text":"Return the reverse link for followedBy. A download included in followedBy has this object's GID in its following value. Returns: Type Description Optional[str] The parent download ID.","title":"following_id"},{"location":"reference/downloads/#aria2p.downloads.Download.gid","text":"GID of the download. Returns: Type Description str The download GID.","title":"gid"},{"location":"reference/downloads/#aria2p.downloads.Download.has_failed","text":"Return True if download has errored. Returns: Type Description bool If this download has failed.","title":"has_failed"},{"location":"reference/downloads/#aria2p.downloads.Download.info_hash","text":"Return the InfoHash. BitTorrent only. Returns: Type Description Optional[str] The InfoHash.","title":"info_hash"},{"location":"reference/downloads/#aria2p.downloads.Download.is_active","text":"Return True if download is active. Returns: Type Description bool If this download is active.","title":"is_active"},{"location":"reference/downloads/#aria2p.downloads.Download.is_complete","text":"Return True if download is complete. Returns: Type Description bool If this download is complete.","title":"is_complete"},{"location":"reference/downloads/#aria2p.downloads.Download.is_metadata","text":"Return True if this download is only composed of metadata, and no actual files. Returns: Type Description bool If this is a metadata download.","title":"is_metadata"},{"location":"reference/downloads/#aria2p.downloads.Download.is_paused","text":"Return True if download is paused. Returns: Type Description bool If this download is paused.","title":"is_paused"},{"location":"reference/downloads/#aria2p.downloads.Download.is_removed","text":"Return True if download was removed. Returns: Type Description bool If this download was removed.","title":"is_removed"},{"location":"reference/downloads/#aria2p.downloads.Download.is_torrent","text":"Return true if this download is a torrent. Returns: Type Description bool If this is a torrent downlaod.","title":"is_torrent"},{"location":"reference/downloads/#aria2p.downloads.Download.is_waiting","text":"Return True if download is waiting. Returns: Type Description bool If this download is waiting.","title":"is_waiting"},{"location":"reference/downloads/#aria2p.downloads.Download.live","text":"Return the same object with updated data. Returns: Type Description Download Itself.","title":"live"},{"location":"reference/downloads/#aria2p.downloads.Download.name","text":"Return the name of the download. Name is the name of the file if single-file, first file's directory name if multi-file. Returns: Type Description str The download name.","title":"name"},{"location":"reference/downloads/#aria2p.downloads.Download.num_pieces","text":"Return the number of pieces. Returns: Type Description int The number of pieces.","title":"num_pieces"},{"location":"reference/downloads/#aria2p.downloads.Download.num_seeders","text":"Return the number of seeders aria2 has connected to. BitTorrent only. Returns: Type Description int The numbers of seeders.","title":"num_seeders"},{"location":"reference/downloads/#aria2p.downloads.Download.options","text":"Options specific to this download. Returns: Type Description Options The download options.","title":"options"},{"location":"reference/downloads/#aria2p.downloads.Download.piece_length","text":"Piece length in bytes. Returns: Type Description int The piece length in bytes.","title":"piece_length"},{"location":"reference/downloads/#aria2p.downloads.Download.progress","text":"Return the progress of the download as float. Returns: Type Description float Progress percentage.","title":"progress"},{"location":"reference/downloads/#aria2p.downloads.Download.root_files_paths","text":"Return the unique set of directories/files for this download. Instead of returning all the leaves like self.files, return the relative root directories if any, and relative root files. This property is useful when we need to list the directories and files in order to move or copy them. We don't want to copy files one by one, but rather entire directories at once when possible. Returns: Type Description List[pathlib.Path] The root file paths. Examples: Download directory is /a/b . >>> self . files [ \"/a/b/c/1.txt\" , \"/a/b/c/2.txt\" , \"/a/b/3.txt\" ] >>> self . root_files_paths [ \"/a/b/c\" , \"/a/b/3.txt\" ]","title":"root_files_paths"},{"location":"reference/downloads/#aria2p.downloads.Download.seeder","text":"Return True if the local endpoint is a seeder, otherwise false. BitTorrent only. Returns: Type Description bool If the local endpoint is a seeder.","title":"seeder"},{"location":"reference/downloads/#aria2p.downloads.Download.status","text":"Return the status of the download. Returns: Type Description str active , waiting , paused , error , complete or removed .","title":"status"},{"location":"reference/downloads/#aria2p.downloads.Download.total_length","text":"Total length of the download in bytes. Returns: Type Description int The total length in bytes.","title":"total_length"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_length","text":"Return the uploaded length of the download in bytes. Returns: Type Description int The uploaded length in bytes.","title":"upload_length"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_speed","text":"Upload speed of this download measured in bytes/sec. Returns: Type Description int The upload speed in bytes/sec.","title":"upload_speed"},{"location":"reference/downloads/#aria2p.downloads.Download.verified_length","text":"Return the number of verified number of bytes while the files are being hash checked. This key exists only when this download is being hash checked. Returns: Type Description int The verified length.","title":"verified_length"},{"location":"reference/downloads/#aria2p.downloads.Download.verify_integrity_pending","text":"Return True if this download is waiting for the hash check in a queue. This key exists only when this download is in the queue. Returns: Type Description Optional[bool] Whether this download is waiting for the hash check.","title":"verify_integrity_pending"},{"location":"reference/downloads/#aria2p.downloads.Download.__init__","text":"Initialize the object. Parameters: Name Type Description Default api aria2p.api.API The reference to an [ API ][aria2p.api.API] instance. required struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , api : \"aria2p.api.API\" , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: api: The reference to an [`API`][aria2p.api.API] instance. struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . api = api self . _struct = struct or {} self . _files : List [ File ] = [] self . _root_files_paths : List [ Path ] = [] self . _bittorrent = None self . _name = \"\" self . _options : Optional [ Options ] = None self . _followed_by : Optional [ List [ Download ]] = None self . _following : Optional [ Download ] = None self . _belongs_to : Optional [ Download ] = None","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.Download.completed_length_string","text":"Return the completed length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Arguments: human_readable: Return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\"","title":"completed_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.copy_files","text":"Copy downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[pathlib.Path, str] The target directory to copy files into. required force bool Whether to move files even if download is not complete. False Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def copy_files ( self , to_directory : PathOrStr , force : bool = False ) -> bool : \"\"\" Copy downloaded files to another directory. Arguments: to_directory: The target directory to copy files into. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation. \"\"\" return self . api . copy_files ([ self ], to_directory , force )[ 0 ]","title":"copy_files()"},{"location":"reference/downloads/#aria2p.downloads.Download.download_speed_string","text":"Return the download speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/downloads.py def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\"","title":"download_speed_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.eta_string","text":"Return the Estimated Time of Arrival as a string. Parameters: Name Type Description Default precision int The precision to use, see [aria2p.utils.human_readable_timedelta]. 0 Returns: Type Description str The Estimated Time of Arrival as a string. Source code in aria2p/downloads.py def eta_string ( self , precision : int = 0 ) -> str : \"\"\" Return the Estimated Time of Arrival as a string. Arguments: precision: The precision to use, see [aria2p.utils.human_readable_timedelta]. Returns: The Estimated Time of Arrival as a string. \"\"\" eta = self . eta if eta == timedelta . max : return \"-\" return human_readable_timedelta ( eta , precision = precision )","title":"eta_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.move","text":"Move the download in the queue, relatively. Parameters: Name Type Description Default pos int Number of times to move. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move ( self , pos : int ) -> int : \"\"\" Move the download in the queue, relatively. Arguments: pos: Number of times to move. Returns: The new position of the download. \"\"\" return self . api . move ( self , pos )","title":"move()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_down","text":"Move the download down in the queue. Parameters: Name Type Description Default pos int Number of times to move down. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_down ( self , pos : int = 1 ) -> int : \"\"\" Move the download down in the queue. Arguments: pos: Number of times to move down. Returns: The new position of the download. \"\"\" return self . api . move_down ( self , pos )","title":"move_down()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_files","text":"Move downloaded files to another directory. Parameters: Name Type Description Default to_directory Union[pathlib.Path, str] The target directory to move files to. required force bool Whether to move files even if download is not complete. False Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def move_files ( self , to_directory : PathOrStr , force : bool = False ) -> bool : \"\"\" Move downloaded files to another directory. Arguments: to_directory: The target directory to move files to. force: Whether to move files even if download is not complete. Returns: Success or failure of the operation. \"\"\" return self . api . move_files ([ self ], to_directory , force )[ 0 ]","title":"move_files()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to","text":"Move the download in the queue, absolutely. Parameters: Name Type Description Default pos int The absolute position in the queue to take. required Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to ( self , pos : int ) -> int : \"\"\" Move the download in the queue, absolutely. Arguments: pos: The absolute position in the queue to take. Returns: The new position of the download. \"\"\" return self . api . move_to ( self , pos )","title":"move_to()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to_bottom","text":"Move the download to the bottom of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to_bottom ( self ) -> int : \"\"\" Move the download to the bottom of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_bottom ( self )","title":"move_to_bottom()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_to_top","text":"Move the download to the top of the queue. Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_to_top ( self ) -> int : \"\"\" Move the download to the top of the queue. Returns: The new position of the download. \"\"\" return self . api . move_to_top ( self )","title":"move_to_top()"},{"location":"reference/downloads/#aria2p.downloads.Download.move_up","text":"Move the download up in the queue. Parameters: Name Type Description Default pos int Number of times to move up. 1 Returns: Type Description int The new position of the download. Source code in aria2p/downloads.py def move_up ( self , pos : int = 1 ) -> int : \"\"\" Move the download up in the queue. Arguments: pos: Number of times to move up. Returns: The new position of the download. \"\"\" return self . api . move_up ( self , pos )","title":"move_up()"},{"location":"reference/downloads/#aria2p.downloads.Download.pause","text":"Pause the download. Parameters: Name Type Description Default force bool Whether to force pause (don't contact servers). False Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When pausing failed. Source code in aria2p/downloads.py def pause ( self , force : bool = False ) -> bool : \"\"\" Pause the download. Arguments: force: Whether to force pause (don't contact servers). Returns: Always True (raises exception otherwise). Raises: ClientException: When pausing failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . pause ([ self ], force = force )[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True","title":"pause()"},{"location":"reference/downloads/#aria2p.downloads.Download.piece_length_string","text":"Return the piece length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The piece length string. Source code in aria2p/downloads.py def piece_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the piece length as string. Arguments: human_readable: Return in human readable format or not. Returns: The piece length string. \"\"\" if human_readable : return human_readable_bytes ( self . piece_length , delim = \" \" ) return str ( self . piece_length ) + \" B\"","title":"piece_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.progress_string","text":"Return the progress percentage as string. Parameters: Name Type Description Default digits int Number of decimal digits to use. 2 Returns: Type Description str The progress percentage. Source code in aria2p/downloads.py def progress_string ( self , digits : int = 2 ) -> str : \"\"\" Return the progress percentage as string. Arguments: digits: Number of decimal digits to use. Returns: The progress percentage. \"\"\" return f \" { self . progress : . { digits } f } %\"","title":"progress_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.purge","text":"Purge itself from the results. Returns: Type Description bool Success or failure of the operation. Source code in aria2p/downloads.py def purge ( self ) -> bool : \"\"\" Purge itself from the results. Returns: Success or failure of the operation. \"\"\" return self . api . client . remove_download_result ( self . gid ) == \"OK\"","title":"purge()"},{"location":"reference/downloads/#aria2p.downloads.Download.remove","text":"Remove the download from the queue (even if active). Parameters: Name Type Description Default force bool Whether to force removal. False files bool Whether to remove files as well. False Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When removal failed. Source code in aria2p/downloads.py def remove ( self , force : bool = False , files : bool = False ) -> bool : \"\"\" Remove the download from the queue (even if active). Arguments: force: Whether to force removal. files: Whether to remove files as well. Returns: Always True (raises exception otherwise). Raises: ClientException: When removal failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . remove ([ self ], force = force , files = files )[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True","title":"remove()"},{"location":"reference/downloads/#aria2p.downloads.Download.resume","text":"Resume the download. Returns: Type Description bool Always True (raises exception otherwise). Exceptions: Type Description ClientException When resuming failed. Source code in aria2p/downloads.py def resume ( self ) -> bool : \"\"\" Resume the download. Returns: Always True (raises exception otherwise). Raises: ClientException: When resuming failed. \"\"\" # noqa: DAR401,DAR402 (raise result) result = self . api . resume ([ self ])[ 0 ] if not result : raise result # type: ignore # we know it's a ClientException return True","title":"resume()"},{"location":"reference/downloads/#aria2p.downloads.Download.total_length_string","text":"Return the total length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The total length string. Source code in aria2p/downloads.py def total_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the total length as string. Arguments: human_readable: Return in human readable format or not. Returns: The total length string. \"\"\" if human_readable : return human_readable_bytes ( self . total_length , delim = \" \" ) return str ( self . total_length ) + \" B\"","title":"total_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.update","text":"Update the internal values of the download with more recent values. Source code in aria2p/downloads.py def update ( self ) -> None : \"\"\"Update the internal values of the download with more recent values.\"\"\" self . _struct = self . api . client . tell_status ( self . gid ) self . _files = [] self . _name = \"\" self . _bittorrent = None self . _followed_by = None self . _following = None self . _belongs_to = None self . _options = None","title":"update()"},{"location":"reference/downloads/#aria2p.downloads.Download.update_options","text":"Re-fetch the options from the remote. Source code in aria2p/downloads.py def update_options ( self ) -> None : \"\"\"Re-fetch the options from the remote.\"\"\" self . _options = self . api . get_options ( downloads = [ self ])[ 0 ]","title":"update_options()"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_length_string","text":"Return the upload length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload length string. Source code in aria2p/downloads.py def upload_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload length as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload length string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_length , delim = \" \" ) return str ( self . upload_length ) + \" B\"","title":"upload_length_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.upload_speed_string","text":"Return the upload speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/downloads.py def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"upload_speed_string()"},{"location":"reference/downloads/#aria2p.downloads.Download.verified_length_string","text":"Return the verified length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The verified length string. Source code in aria2p/downloads.py def verified_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the verified length as string. Arguments: human_readable: Return in human readable format or not. Returns: The verified length string. \"\"\" if human_readable : return human_readable_bytes ( self . verified_length , delim = \" \" ) return str ( self . verified_length ) + \" B\"","title":"verified_length_string()"},{"location":"reference/downloads/#aria2p.downloads.File","text":"Information about a download's file.","title":"File"},{"location":"reference/downloads/#aria2p.downloads.File.completed_length","text":"Completed length of this file in bytes. Please note that it is possible that sum of completedLength is less than the completedLength returned by the aria2.tellStatus() method. This is because completedLength in aria2.getFiles() only includes completed pieces. On the other hand, completedLength in aria2.tellStatus() also includes partially completed pieces. Returns: Type Description int The completed length.","title":"completed_length"},{"location":"reference/downloads/#aria2p.downloads.File.index","text":"Index of the file, starting at 1, in the same order as files appear in the multi-file torrent. Returns: Type Description int The index of the file.","title":"index"},{"location":"reference/downloads/#aria2p.downloads.File.is_metadata","text":"Return True if this file is aria2 metadata and not an actual file. Returns: Type Description bool If the file is metadata.","title":"is_metadata"},{"location":"reference/downloads/#aria2p.downloads.File.length","text":"Return the file size in bytes. Returns: Type Description int The file size in bytes.","title":"length"},{"location":"reference/downloads/#aria2p.downloads.File.path","text":"File path. Returns: Type Description Path The file path.","title":"path"},{"location":"reference/downloads/#aria2p.downloads.File.selected","text":"Return True if this file is selected by [ --select-file ][aria2p.options.Options.select_file] option. If [ --select-file ][aria2p.options.Options.select_file] is not specified or this is single-file torrent or not a torrent download at all, this value is always true. Otherwise false. Returns: Type Description bool If this file is selected.","title":"selected"},{"location":"reference/downloads/#aria2p.downloads.File.uris","text":"Return a list of URIs for this file. The element type is the same struct used in the [ client.get_uris() ][aria2p.client.Client.get_uris] method. Returns: Type Description Optional[List[str]] The list of URIs.","title":"uris"},{"location":"reference/downloads/#aria2p.downloads.File.__init__","text":"Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/downloads.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/downloads/#aria2p.downloads.File.completed_length_string","text":"Return the completed length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The completed length string. Source code in aria2p/downloads.py def completed_length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the completed length as string. Arguments: human_readable: Return in human readable format or not. Returns: The completed length string. \"\"\" if human_readable : return human_readable_bytes ( self . completed_length , delim = \" \" ) return str ( self . completed_length ) + \" B\"","title":"completed_length_string()"},{"location":"reference/downloads/#aria2p.downloads.File.length_string","text":"Return the length as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The length string. Source code in aria2p/downloads.py def length_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the length as string. Arguments: human_readable: Return in human readable format or not. Returns: The length string. \"\"\" if human_readable : return human_readable_bytes ( self . length , delim = \" \" ) return str ( self . length ) + \" B\"","title":"length_string()"},{"location":"reference/options/","text":"\u00a4 Module for aria2c options. This module defines the Options class, which holds information retrieved with the get_option or get_global_option methods of the client. GenericMeta \u00a4 Placeholder. Options \u00a4 This class holds information retrieved with the get_option or get_global_option methods of the client. Instances are given a reference to an [ API ][aria2p.api.API] instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options. The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like options.max_concurrent_downloads = 5 . all_proxy: str property writable \u00a4 Return the all-proxy option value. Use a proxy server for all protocols. To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is [http://][ USER:PASSWORD@]HOST[:PORT]. See also ENVIRONMENT section. Note If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd} options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\" http://proxy \" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass. Another example: if you specified on the command-line --http-proxy=\" http://user:pass@proxy \" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass. One more example: if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\" http://user:pass@proxy \", then you'd get HTTP proxy http://proxy with user user and password pass. Returns: Type Description str str all_proxy_passwd: str property writable \u00a4 Return the all-proxy-passwd option value. Set password for --all-proxy option. Returns: Type Description str str all_proxy_user: str property writable \u00a4 Return the all-proxy-user option value. Set user for --all-proxy option. Returns: Type Description str str allow_overwrite: bool property writable \u00a4 Return the allow-overwrite option value. Restart download from scratch if the corresponding control file doesn't exist. See also --auto-file-renaming option. Default: false. Returns: Type Description bool bool allow_piece_length_change: bool property writable \u00a4 Return the allow-piece-length-change option value. If false is given, aria2 aborts download when a piece length is different from one in a control file. If true is given, you can proceed but some download progress will be lost. Default: false. Returns: Type Description bool bool always_resume: bool property writable \u00a4 Return the always-resume option value. Always resume download. If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true. Returns: Type Description bool bool are_global: bool property readonly \u00a4 Tell if options are global, or tied to a Download object. Returns: Type Description bool Whether these options are global. async_dns: bool property writable \u00a4 Return the async-dns option value. Enable asynchronous DNS. Default: True. Returns: Type Description bool bool async_dns_server: List [ str ] property writable \u00a4 Return the async-dns-server option value. Comma separated list of DNS server address used in asynchronous DNS resolver. Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it. Returns: Type Description List[str] list of str auto_file_renaming: bool property writable \u00a4 Return the auto-file-renaming option value. Rename file name if the same file already exists. This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true. Returns: Type Description bool bool auto_save_interval: int property writable \u00a4 Save a control file (*.aria2) every SEC seconds. If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60. Returns: Type Description int int bt_detach_seed_only: bool property writable \u00a4 Return the bt-detach-seed-only option value. Exclude seed only downloads when counting concurrent active downloads (See -j option). This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false. Returns: Type Description bool bool bt_enable_hook_after_hash_check: bool property writable \u00a4 Return the bt-enable-hook-after-hash-check option value. Allow hook command invocation after hash check (see -V option) in BitTorrent download. By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true. Returns: Type Description bool bool bt_enable_lpd: bool property writable \u00a4 Return the bt-enable-lpd option value. Enable Local Peer Discovery. If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false. Returns: Type Description bool bool bt_exclude_tracker: List [ str ] property writable \u00a4 Return the bt-exclude-tracker option value. Comma separated list of BitTorrent tracker's announce URI to remove. You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option. Returns: Type Description List[str] list of str bt_external_ip: str property writable \u00a4 Return the bt-external-ip option value. Specify the external IP address to use in BitTorrent download and DHT. It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses. Returns: Type Description str str bt_force_encryption: bool property writable \u00a4 Return the bt-force-encryption option value. Requires BitTorrent message payload encryption with arc4. This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false. Returns: Type Description bool bool bt_hash_check_seed: bool property writable \u00a4 Return the bt-hash-check-seed option value. If true is given, after hash check using --check-integrity option and file is complete, continue to seed file. If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true Returns: Type Description bool bool bt_lpd_interface: str property writable \u00a4 Return the bt-lpd-interface option value. Use given interface for Local Peer Discovery. If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address. Returns: Type Description str str bt_max_open_files: int property writable \u00a4 Return the bt-max-open-files option value. Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally. Default: 100. Returns: Type Description int int bt_max_peers: int property writable \u00a4 Return the bt-max-peers option value. Specify the maximum number of peers per torrent. 0 means unlimited. See also --bt-request-peer-speed-limit option. Default: 55. Returns: Type Description int int bt_metadata_only: bool property writable \u00a4 Return the bt-metadata-only option value. Download meta data only. The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false. Returns: Type Description bool bool bt_min_crypto_level: str property writable \u00a4 Return the bt-min-crypto-level option value. Set minimum level of encryption method (plain/arc4). If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain. Returns: Type Description str str bt_prioritize_piece: str property writable \u00a4 Return the bt-prioritize-piece option value. Try to download first and last pieces of each file first (head[= <SIZE> ],tail[= <SIZE> ]). This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head= <SIZE> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail= <SIZE> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used. Returns: Type Description str str bt_remove_unselected_file: bool property writable \u00a4 Return the bt-remove-unselected-file option value. Removes the unselected files when download is completed in BitTorrent. To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false. Returns: Type Description bool bool bt_request_peer_speed_limit: int property writable \u00a4 Return the bt-request-peer-speed-limit option value. If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed. Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K. Returns: Type Description int int bt_require_crypto: bool property writable \u00a4 Return the bt-require-crypto option value. If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol). Thus aria2 always uses Obfuscation handshake. Default: false. Returns: Type Description bool bool bt_save_metadata: bool property writable \u00a4 Return the bt-save-metadata option value. Save meta data as \".torrent\" file. This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false. Returns: Type Description bool bool bt_seed_unverified: bool property writable \u00a4 Return the bt-seed-unverified option value. Seed previously downloaded files without verifying piece hashes. Default: False. Returns: Type Description bool bool bt_stop_timeout: int property writable \u00a4 Return the bt-stop-timeout option value. Stop BitTorrent download if download speed is 0 in consecutive SEC seconds. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int bt_tracker: List [ str ] property writable \u00a4 Return the bt-tracker option value. Comma separated list of additional BitTorrent tracker's announce URI. These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed. Returns: Type Description List[str] list of str bt_tracker_connect_timeout: int property writable \u00a4 Return the bt-tracker-connect-timeout option value. Set the connect timeout in seconds to establish connection to tracker. After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60. Returns: Type Description int int bt_tracker_interval: int property writable \u00a4 Return the bt-tracker-interval option value. Set the interval in seconds between tracker requests. This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0. Returns: Type Description int int bt_tracker_timeout: int property writable \u00a4 Return the bt-tracker-timeout option value. Set timeout in seconds. Default: 60. Returns: Type Description int int ca_certificate: str property writable \u00a4 Return the ca-certificate option value. Use the certificate authorities in FILE to verify the peers. The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification. Note If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificateset_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup. Note WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store. Returns: Type Description str str certificate: str property writable \u00a4 Return the certificate option value. Use the client certificate in FILE. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --private-key as well. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str check_certificate: bool property writable \u00a4 Return the check-certificate option value. Verify the peer using certificates specified in --ca-certificate option. Default: True. Returns: Type Description bool bool check_integrity: bool property writable \u00a4 Return the check-integrity option value. Check file integrity by validating piece hashes or a hash of entire file. This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false. Returns: Type Description bool bool checksum: str property writable \u00a4 Return the checksum option value. Set checksum ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads. Returns: Type Description str str conditional_get: bool property writable \u00a4 Return the conditional-get option value. Download file only when the local file is older than remote file. This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false. Returns: Type Description bool bool conf_path: str property writable \u00a4 Return the conf-path option value. Change the configuration file path to PATH. Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf. Returns: Type Description str str connect_timeout: int property writable \u00a4 Return the connect-timeout option value. Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server. After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60. Returns: Type Description int int console_log_level: str property writable \u00a4 Return the console-log-level option value. Set log level to output to console. LEVEL is either debug, info, notice, warn or error. Default: notice. Returns: Type Description str str continue_downloads: bool property writable \u00a4 Return the continue-downloads option value. Continue downloading a partially downloaded file. Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads. Returns: Type Description bool bool daemon: bool property writable \u00a4 Return the daemon option value. Run as daemon. The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false. Returns: Type Description bool bool deferred_input: bool property writable \u00a4 Return the deferred-input option value. If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later. This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false. Warning --deferred-input option will be disabled when --save-session is used together. Returns: Type Description bool bool dht_entry_point: str property writable \u00a4 Return the dht-entry-point option value. Set host and port as an entry point to IPv4 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str dht_entry_point6: str property writable \u00a4 Return the dht-entry-point6 option value. Set host and port as an entry point to IPv6 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str dht_file_path: str property writable \u00a4 Return the dht-file-path option value. Change the IPv4 DHT routing table file to PATH. Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat. Returns: Type Description str str dht_file_path6: str property writable \u00a4 Return the dht-file-path6 option value. Change the IPv6 DHT routing table file to PATH. Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat. Returns: Type Description str str dht_listen_addr6: str property writable \u00a4 Return the dht-listen-addr6 option value. Specify address to bind socket for IPv6 DHT. It should be a global unicast IPv6 address of the host. Returns: Type Description str str dht_listen_port: str property writable \u00a4 Return the dht-listen-port option value. Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999. Note Make sure that the specified ports are open for incoming UDP traffic. Returns: Type Description str str dht_message_timeout: int property writable \u00a4 Return the dht-message-timeout option value. Set timeout in seconds. Default: 10. Returns: Type Description int int dir: str property writable \u00a4 Return the dir option value. The directory to store the downloaded file. Returns: Type Description str str disable_ipv6: bool property writable \u00a4 Return the disable-ipv6 option value. Disable IPv6. This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false. Returns: Type Description bool bool disk_cache: int property writable \u00a4 Return the disk-cache option value. Enable disk cache. If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M. Returns: Type Description int int download_result: str property writable \u00a4 Return the download-result option value. This option changes the way Download Results is formatted. If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default. Returns: Type Description str str dry_run: bool property writable \u00a4 Return the dry-run option value. If true is given, aria2 just checks whether the remote file is available and doesn't download data. This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false. Returns: Type Description bool bool dscp: str property writable \u00a4 Return the dscp option value. Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS. This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are. Returns: Type Description str str enable_color: bool property writable \u00a4 Return the enable-color option value. Enable color output for a terminal. Default: True. Returns: Type Description bool bool enable_dht: bool property writable \u00a4 Return the enable-dht option value. Enable IPv4 DHT functionality. It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true. Returns: Type Description bool bool enable_dht6: bool property writable \u00a4 Return the enable-dht6 option value. Enable IPv6 DHT functionality. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option. Returns: Type Description bool bool enable_http_keep_alive: bool property writable \u00a4 Return the enable-http-keep-alive option value. Enable HTTP/1.1 persistent connection. Default: True. Returns: Type Description bool bool enable_http_pipelining: bool property writable \u00a4 Return the enable-http-pipelining option value. Enable HTTP/1.1 pipelining. Default: False. Note In performance perspective, there is usually no advantage to enable this option. Returns: Type Description bool bool enable_mmap: bool property writable \u00a4 Return the enable-mmap option value. Map files into memory. This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false. Returns: Type Description bool bool enable_peer_exchange: bool property writable \u00a4 Return the enable-peer-exchange option value. Enable Peer Exchange extension. If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: True. Returns: Type Description bool bool enable_rpc: bool property writable \u00a4 Return the enable-rpc option value. Enable JSON-RPC/XML-RPC server. It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false Returns: Type Description bool bool event_poll: str property writable \u00a4 Specify the method for polling events. The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use. Returns: Type Description str str file_allocation: str property writable \u00a4 Return the file-allocation option value. Specify file allocation method. Possible Values: none , prealloc , trunc , falloc . none : Doesn't pre-allocate file space. prealloc : Pre-allocates file space before download begins. This may take some time depending on the size of the file. falloc : If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have posix_fallocate(3) function. trunc : Uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length. Default: prealloc . Warning Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation. Note In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece. Returns: Type Description str str follow_metalink: str property writable \u00a4 Return the follow-metalink option value. If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it. If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true. Returns: Type Description str str follow_torrent: str property writable \u00a4 Return the follow-torrent option value. If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it. If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true. Returns: Type Description str str force_save: bool property writable \u00a4 Return the force-save option value. Save download with --save-session option even if the download is completed or removed. This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false. Returns: Type Description bool bool force_sequential: bool property writable \u00a4 Return the force-sequential option value. Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities. Default: False. Returns: Type Description bool bool ftp_passwd: str property writable \u00a4 Return the ftp-passwd option value. Set FTP password. This affects all URIs. If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@. Returns: Type Description str str ftp_pasv: bool property writable \u00a4 Return the ftp-pasv option value. Use the passive mode in FTP. If false is given, the active mode will be used. Default: true. Note This option is ignored for SFTP transfer. Returns: Type Description bool bool ftp_proxy: str property writable \u00a4 Return the ftp-proxy option value. Use a proxy server for FTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str ftp_proxy_passwd: str property writable \u00a4 Return the ftp-proxy-passwd option value. Set password for --ftp-proxy option. Returns: Type Description str str ftp_proxy_user: str property writable \u00a4 Return the ftp-proxy-user option value. Set user for --ftp-proxy option. Returns: Type Description str str ftp_reuse_connection: bool property writable \u00a4 Return the ftp-reuse-connection option value. Reuse connection in FTP. Default: True. Returns: Type Description bool bool ftp_type: str property writable \u00a4 Return the ftp-type option value. Set FTP transfer type. TYPE is either binary or ascii. Default: binary. Note This option is ignored for SFTP transfer. Returns: Type Description str str ftp_user: str property writable \u00a4 Return the ftp-user option value. Set FTP user. This affects all URIs. Default: anonymous. Returns: Type Description str str gid: str property writable \u00a4 Return the gid option value. Set GID manually. aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2. Returns: Type Description str str hash_check_only: bool property writable \u00a4 Return the hash-check-only option value. If true is given, after hash check using --check-integrity option, abort download whether or not download is complete. Default: False. Returns: Type Description bool bool header: str property writable \u00a4 Return the header option value. Append HEADER to HTTP request header. You can use this option repeatedly to specify more than one header: $ aria2c --header=\"X-A: b78\" --header=\"X-B: 9J1\" \"http://host/file\" Returns: Type Description str str http_accept_gzip: bool property writable \u00a4 Return the http-accept-gzip option value. Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding: gzip or Content-Encoding: deflate. Default: False. Note Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header. Returns: Type Description bool bool http_auth_challenge: bool property writable \u00a4 Return the http-auth-challenge option value. Send HTTP authorization header only when it is requested by the server. If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false. Returns: Type Description bool bool http_no_cache: bool property writable \u00a4 Return the http-no-cache option value. Send Cache-Control: no-cache and Pragma: no-cache header to avoid cached content. If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false. Returns: Type Description bool bool http_passwd: str property writable \u00a4 Return the http-passwd option value. Set HTTP password. This affects all URIs. Returns: Type Description str str http_proxy: str property writable \u00a4 Return the http-proxy option value. Use a proxy server for HTTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str http_proxy_passwd: str property writable \u00a4 Return the http-proxy-passwd option value. Set password for --http-proxy. Returns: Type Description str str http_proxy_user: str property writable \u00a4 Return the http-proxy-user option value. Set user for --http-proxy. Returns: Type Description str str http_user: str property writable \u00a4 Return the http-user option value. Set HTTP user. This affects all URIs. Returns: Type Description str str https_proxy: str property writable \u00a4 Return the https-proxy option value. Use a proxy server for HTTPS. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str https_proxy_passwd: str property writable \u00a4 Return the https-proxy-passwd option value. Set password for --https-proxy. Returns: Type Description str str https_proxy_user: str property writable \u00a4 Return the https-proxy-user option value. Set user for --https-proxy. Returns: Type Description str str human_readable: bool property writable \u00a4 Return the human-readable option value. Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout. Default: True. Returns: Type Description bool bool index_out: str property writable \u00a4 Return the index-out option value. Set file path for file with index=INDEX ( <INDEX>=<PATH> ). You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads. Returns: Type Description str str input_file: str property writable \u00a4 Return the input-file option value. Downloads the URIs listed in FILE. You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option. Returns: Type Description str str interface: str property writable \u00a4 Return the interface option value. Bind sockets to given interface. You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name. Note If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name. Returns: Type Description str str keep_unfinished_download_result: bool property writable \u00a4 Return the keep-unfinished-download-result option value. Keep unfinished download results even if doing so exceeds --max-download-result. This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true. Returns: Type Description bool bool listen_port: str property writable \u00a4 Return the listen-port option value. Set TCP port number for BitTorrent downloads. Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999 Note Make sure that the specified ports are open for incoming TCP traffic. Returns: Type Description str str load_cookies: str property writable \u00a4 Return the load-cookies option value. Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format. Note If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format. Returns: Type Description str str log: str property writable \u00a4 Return the log option value. The file name of the log file. If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all. Returns: Type Description str str log_level: str property writable \u00a4 Return the log-level option value. Set log level to output. LEVEL is either debug, info, notice, warn or error. Default: debug. Returns: Type Description str str lowest_speed_limit: int property writable \u00a4 Return the lowest-speed-limit option value. Close connection if download speed is lower than or equal to this value(bytes per sec). 0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0. Returns: Type Description int int max_concurrent_downloads: int property writable \u00a4 Return the max-concurrent-downloads option value. Set the maximum number of parallel downloads for every queue item. See also the --split option. Default: 5. Returns: Type Description int int max_connection_per_server: int property writable \u00a4 Return the max-connection-per-server option value. The maximum number of connections to one server for each download. Default: 1. Returns: Type Description int int max_download_limit: int property writable \u00a4 Return the max-download-limit option value. Set max download speed per each download in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0. Returns: Type Description int int max_download_result: int property writable \u00a4 Return the max-download-result option value. Set maximum number of download result kept in memory. The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000. Returns: Type Description int int max_file_not_found: int property writable \u00a4 Return the max-file-not-found option value. If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail. Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too. Default: 0. Returns: Type Description int int max_mmap_limit: int property writable \u00a4 Return the max-mmap-limit option value. Set the maximum file size to enable mmap (see --enable-mmap option). The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807. Returns: Type Description int int max_overall_download_limit: int property writable \u00a4 Return the max-overall-download-limit option value. Set max overall download speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0. Returns: Type Description int int max_overall_upload_limit: int property writable \u00a4 Return the max-overall-upload-limit option value. Set max overall upload speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0. Returns: Type Description int int max_resume_failure_tries: int property writable \u00a4 Return the max-resume-failure-tries option value. When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume. If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0. Returns: Type Description int int max_tries: int property writable \u00a4 Return the max-tries option value. Set number of tries. 0 means unlimited. See also --retry-wait. Default: 5. Returns: Type Description int int max_upload_limit: int property writable \u00a4 Return the max-upload-limit option value. Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0. Returns: Type Description int int metalink_base_uri: str property writable \u00a4 Return the metalink-base-uri option value. Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk. If URI points to a directory, URI must end with /. Returns: Type Description str str metalink_enable_unique_protocol: bool property writable \u00a4 Return the metalink-enable-unique-protocol option value. If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them. Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true. Returns: Type Description bool bool metalink_file: str property writable \u00a4 Return the metalink-file option value. The file path to \".meta4\" and \".metalink\" file. Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file. Returns: Type Description str str metalink_language: str property writable \u00a4 Return the metalink-language option value. The language of the file to download. Returns: Type Description str str metalink_location: List [ str ] property writable \u00a4 Return the metalink-location option value. The location of the preferred server. A comma-delimited list of locations is acceptable, for example, jp,us. Returns: Type Description List[str] list of str metalink_os: str property writable \u00a4 Return the metalink-os option value. The operating system of the file to download. Returns: Type Description str str metalink_preferred_protocol: str property writable \u00a4 Return the metalink-preferred-protocol option value. Specify preferred protocol. The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none. Returns: Type Description str str metalink_version: str property writable \u00a4 Return the metalink-version option value. The version of the file to download. Returns: Type Description str str min_split_size: int property writable \u00a4 Return the min-split-size option value. aria2 does not split less than 2*SIZE byte range. For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB) and [10MiB-20MiB) and download it using 2 sources(if --split > = 2, of course). If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M Returns: Type Description int int min_tls_version: str property writable \u00a4 Return the min-tls-version option value. Specify minimum SSL/TLS version to enable. Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1. Returns: Type Description str str multiple_interface: List [ str ] property writable \u00a4 Return the multiple-interface option value. Comma separated list of interfaces to bind sockets to. Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname. Returns: Type Description List[str] list of str netrc_path: str property writable \u00a4 Return the netrc-path option value. Specify the path to the netrc file. Default: $(HOME)/.netrc. Note Permission of the .netrc file must be 600. Otherwise, the file will be ignored. Returns: Type Description str str no_conf: bool property writable \u00a4 Return the no-conf option value. Disable loading aria2.conf file. Returns: Type Description bool bool no_file_allocation_limit: int property writable \u00a4 Return the no-file-allocation-limit option value. No file allocation is made for files whose size is smaller than SIZE. You can append K or M (1K = 1024, 1M = 1024K). Default: 5M. Returns: Type Description int int no_netrc: bool property writable \u00a4 Return the no-netrc option value. Disable netrc support. netrc support is enabled by default. Note netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption(). Returns: Type Description bool bool no_proxy: str property writable \u00a4 Return the no-proxy option value. Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used. Note For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses. Returns: Type Description str str on_bt_download_complete: str property writable \u00a4 Return the on-bt-download-complete option value. For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over. On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_complete: str property writable \u00a4 Return the on-download-complete option value. Set the command to be executed after download completed. See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str on_download_error: str property writable \u00a4 Return the on-download-error option value. Set the command to be executed after download aborted due to error. See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str on_download_pause: str property writable \u00a4 Return the on-download-pause option value. Set the command to be executed after download was paused. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_start: str property writable \u00a4 Return the on-download-start option value. Set the command to be executed after download got started. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str on_download_stop: str property writable \u00a4 Return the on-download-stop option value. Set the command to be executed after download stopped. You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str optimize_concurrent_downloads: str property writable \u00a4 Return the optimize-concurrent-downloads option value. Optimizes the number of concurrent downloads according to the bandwidth available ( true|false|<A>:<B> ). aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false. Returns: Type Description str str out: str property writable \u00a4 Return the out option value. The file name of the downloaded file. It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored. Note You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option. Example: $ aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\" Returns: Type Description str str parameterized_uri: bool property writable \u00a4 Return the parameterized-uri option value. Enable parameterized URI support. You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter: http://host/image[000-100:2].img . A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false. Returns: Type Description bool bool pause: bool property writable \u00a4 Return the pause option value. Pause download after added. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool pause_metadata: bool property writable \u00a4 Return the pause-metadata option value. Pause downloads created as a result of metadata download. There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool peer_id_prefix: str property writable \u00a4 Return the peer-id-prefix option value. Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes. Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-. Returns: Type Description str str piece_length: str property writable \u00a4 Return the piece-length option value. Set a piece length for HTTP/FTP downloads. This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M. Note The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining. Returns: Type Description str str private_key: str property writable \u00a4 Return the private-key option value. Use the private key in FILE. The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option. Returns: Type Description str str proxy_method: str property writable \u00a4 Return the proxy-method option value. Set the method to use in proxy request. METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get Returns: Type Description str str quiet: bool property writable \u00a4 Return the quiet option value. Make aria2 quiet (no console output). Default: False. Returns: Type Description bool bool realtime_chunk_checksum: bool property writable \u00a4 Return the realtime-chunk-checksum option value. Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided. Default: True. Returns: Type Description bool bool referer: str property writable \u00a4 Return the referer option value. Set an http referrer (Referer). This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option. Returns: Type Description str str remote_time: bool property writable \u00a4 Return the remote-time option value. Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file. Default: False. Returns: Type Description bool bool remove_control_file: bool property writable \u00a4 Return the remove-control-file option value. Remove control file before download. Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume. Returns: Type Description bool bool retry_wait: int property writable \u00a4 Return the retry-wait option value. Set the seconds to wait between retries. When SEC >` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0. Returns: Type Description int int reuse_uri: bool property writable \u00a4 Return the reuse-uri option value. Reuse already used URIs if no unused URIs are left. Default: True. Returns: Type Description bool bool rlimit_nofile: int property writable \u00a4 Return the rlimit-nofile option value. Set the soft limit of open file descriptors. This open will only have effect when: a. The system supports it (posix) b. The limit does not exceed the hard limit. c. The specified limit is larger than the current soft limit. This is equivalent to setting nofile via ulimit, except that it will never decrease the limit. This option is only available on systems supporting the rlimit API. Returns: Type Description int int rpc_allow_origin_all: bool property writable \u00a4 Return the rpc-allow-origin-all option value. Add Access-Control-Allow-Origin header field with value * to the RPC response. Default: False. Returns: Type Description bool bool rpc_certificate: str property writable \u00a4 Return the rpc-certificate option value. Use the certificate in FILE for RPC server. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str rpc_listen_all: bool property writable \u00a4 Return the rpc-listen-all option value. Listen incoming JSON-RPC/XML-RPC requests on all network interfaces. If false is given, listen only on local loopback interface. Default: false. Returns: Type Description bool bool rpc_listen_port: int property writable \u00a4 Return the rpc-listen-port option value. Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024-65535. Default: 6800. Returns: Type Description int int rpc_max_request_size: str property writable \u00a4 Return the rpc-max-request-size option value. Set max size of JSON-RPC/XML-RPC request in bytes. If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M. Returns: Type Description str str rpc_passwd: str property writable \u00a4 Return the rpc-passwd option value. Set JSON-RPC/XML-RPC password. Warning --rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str rpc_private_key: str property writable \u00a4 Return the rpc-private-key option value. Use the private key in FILE for RPC server. The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option. Returns: Type Description str str rpc_save_upload_metadata: bool property writable \u00a4 Return the rpc-save-upload-metadata option value. Save the uploaded torrent or metalink meta data in the directory specified by --dir option. The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true. Returns: Type Description bool bool rpc_secret: str property writable \u00a4 Return the rpc-secret option value. Set RPC secret authorization token. Read RPC authorization secret token to know how this option value is used. Returns: Type Description str str rpc_secure: bool property writable \u00a4 Return the rpc-secure option value. RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key. Returns: Type Description bool bool rpc_user: str property writable \u00a4 Return the rpc-user option value. Set JSON-RPC/XML-RPC user. Warning --rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str save_cookies: str property writable \u00a4 Return the save-cookies option value. Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format. If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file. Returns: Type Description str str save_not_found: bool property writable \u00a4 Return the save-not-found option value. Save download with --save-session option even if the file was not found on the server. This option also saves control file in that situations. Default: true. Returns: Type Description bool bool save_session: str property writable \u00a4 Return the save-session option value. Save error/unfinished downloads to FILE on exit. You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below. Note Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions. magnet URI, and followed by torrent download: GID of BitTorrent meta data download is saved. URI to torrent file, and followed by torrent download: GID of torrent file download is saved. URI to metalink file, and followed by file downloads described in metalink file: GID of metalink file download is saved. local torrent file: GID of torrent download is saved. local metalink file: Any meaningful GID is not saved. Returns: Type Description str str save_session_interval: int property writable \u00a4 Return the save-session-interval option value. Save error/unfinished downloads to a file specified by --save-session option every SEC seconds. If 0 is given, file will be saved only when aria2 exits. Default: 0. Returns: Type Description int int seed_ratio: float property writable \u00a4 Return the seed-ratio option value. Specify share ratio. Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0. Returns: Type Description float float seed_time: float property writable \u00a4 Return the seed-time option value. Specify seeding time in (fractional) minutes. Also see the --seed-ratio option. Note Specifying --seed-time=0 disables seeding after download completed. Returns: Type Description float float select_file: str property writable \u00a4 Return the select-file option value. Set file to download by specifying its index. You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options). Note In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files. Returns: Type Description str str server_stat_if: str property writable \u00a4 Return the server-stat-if option value. Specify the file name to load performance profile of the servers. The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format. Returns: Type Description str str server_stat_of: str property writable \u00a4 Return the server-stat-of option value. Specify the file name to which performance profile of the servers is saved. You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format. Returns: Type Description str str server_stat_timeout: int property writable \u00a4 Return the server-stat-timeout option value. Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them. Default: 86400 (24hours). Returns: Type Description int int show_console_readout: bool property writable \u00a4 Return the show-console-readout option value. Show console readout. Default: True. Returns: Type Description bool bool show_files: bool property writable \u00a4 Return the show-files option value. Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit. In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed. Returns: Type Description bool bool socket_recv_buffer_size: int property writable \u00a4 Return the socket-recv-buffer-size option value. Set the maximum socket receive buffer in bytes. Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0. Returns: Type Description int int split: int property writable \u00a4 Return the split option value. Download a file using N connections. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5 Note Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N. Returns: Type Description int int ssh_host_key_md: str property writable \u00a4 Return the ssh-host-key-md option value. Set checksum for SSH host public key ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place. Returns: Type Description str str stderr: bool property writable \u00a4 Return the stderr option value. Redirect all console output that would be otherwise printed in stdout to stderr. Default: False. Returns: Type Description bool bool stop: int property writable \u00a4 Return the stop option value. Stop application after SEC seconds has passed. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int stop_with_process: int property writable \u00a4 Return the stop-with-process option value. Stop application when process PID is not running. This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself. Returns: Type Description int int stream_piece_selector: str property writable \u00a4 Return the stream-piece-selector option value. Specify piece selection algorithm used in HTTP/FTP download. Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default. Returns: Type Description str str summary_interval: int property writable \u00a4 Return the summary-interval option value. Set interval in seconds to output download progress summary. Setting 0 suppresses the output. Default: 60. Returns: Type Description int int timeout: int property writable \u00a4 Return the timeout option value. Set timeout in seconds. Default: 60. Returns: Type Description int int torrent_file: str property writable \u00a4 Return the torrent-file option value. The path to the \".torrent\" file. You are not required to use this option because you can specify \".torrent\" files without --torrent-file. Returns: Type Description str str truncate_console_readout: bool property writable \u00a4 Return the truncate-console-readout option value. Truncate console readout to fit in a single line. Default: True. Returns: Type Description bool bool uri_selector: str property writable \u00a4 Return the uri-selector option value. Specify URI selection algorithm. The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback. Returns: Type Description str str use_head: bool property writable \u00a4 Return the use-head option value. Use HEAD method for the first request to the HTTP server. Default: False. Returns: Type Description bool bool user_agent: str property writable \u00a4 Return the user-agent option value. Set user agent for HTTP(S) downloads. Default: aria2/$VERSION, $VERSION is replaced by package version. Returns: Type Description str str __init__ ( self , api , struct , download = None ) special \u00a4 Initialize the object. Parameters: Name Type Description Default api aria2p.api.API The reference to an [ API ][aria2p.api.API] instance. required struct dict A dictionary Python object returned by the JSON-RPC client. required download aria2p.downloads.Download An optional [ Download ][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. None Source code in aria2p/options.py def __init__ ( self , api : \"aria2p.api.API\" , struct : dict , download : \"aria2p.downloads.Download\" = None ): \"\"\" Initialize the object. Arguments: api: The reference to an [`API`][aria2p.api.API] instance. struct: A dictionary Python object returned by the JSON-RPC client. download: An optional [`Download`][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. \"\"\" self . api = api self . download = download self . _struct = struct or {} get ( self , item , class_ = None ) \u00a4 Get the value of an option given its name. Parameters: Name Type Description Default item str The name of the option (example: \"input-file\"). required class_ Union[aria2p.options.GenericMeta, Callable] Pass the value through this class/function to change its type. None Returns: Type Description Union[str, int, bool, float] The option value. Source code in aria2p/options.py def get ( self , item : str , class_ : Union [ GenericMeta , Callable ] = None ) -> OptionType : \"\"\" Get the value of an option given its name. Arguments: item: The name of the option (example: \"input-file\"). class_: Pass the value through this class/function to change its type. Returns: The option value. \"\"\" value = self . _struct . get ( item ) if class_ is not None and value is not None : return class_ ( value ) return value get_struct ( self ) \u00a4 Return a copy of the struct dictionary of this Options object. Returns: Type Description dict A copy of the struct dictionary. Source code in aria2p/options.py def get_struct ( self ) -> dict : \"\"\" Return a copy of the struct dictionary of this Options object. Returns: A copy of the struct dictionary. \"\"\" return deepcopy ( self . _struct ) set ( self , key , value ) \u00a4 Set the value of an option given its name. Parameters: Name Type Description Default key str The name of the option (example: \"input-file\"). required value Union[str, int, float, bool] The value to set. required Returns: Type Description bool True if the value was successfully set, False otherwise. Source code in aria2p/options.py def set ( self , key : str , value : Union [ str , int , float , bool ]) -> bool : # noqa: A003 (shadowing set) \"\"\" Set the value of an option given its name. Arguments: key: The name of the option (example: \"input-file\"). value: The value to set. Returns: True if the value was successfully set, False otherwise. \"\"\" if not isinstance ( value , str ): value = str ( value ) if self . download : success = self . api . set_options ({ key : value }, [ self . download ])[ 0 ] else : success = self . api . set_global_options ({ key : value }) if success : self . _struct [ key ] = value return success","title":"options.py"},{"location":"reference/options/#aria2p.options","text":"Module for aria2c options. This module defines the Options class, which holds information retrieved with the get_option or get_global_option methods of the client.","title":"aria2p.options"},{"location":"reference/options/#aria2p.options.GenericMeta","text":"Placeholder.","title":"GenericMeta"},{"location":"reference/options/#aria2p.options.Options","text":"This class holds information retrieved with the get_option or get_global_option methods of the client. Instances are given a reference to an [ API ][aria2p.api.API] instance to be able to change their values both locally and remotely, by using the API client and calling remote methods to change options. The options are available with the same names, using underscores instead of dashes, except for \"continue\" (which is a Python reserved keyword) which is here called \"continue_downloads\". For example, \"max-concurrent-downloads\" is used like options.max_concurrent_downloads = 5 .","title":"Options"},{"location":"reference/options/#aria2p.options.Options.all_proxy","text":"Return the all-proxy option value. Use a proxy server for all protocols. To override a previously defined proxy, use \"\". You also can override this setting and specify a proxy server for a particular protocol using --http-proxy, --https-proxy and --ftp-proxy options. This affects all downloads. The format of PROXY is [http://][ USER:PASSWORD@]HOST[:PORT]. See also ENVIRONMENT section. Note If user and password are embedded in proxy URI and they are also specified by --{http,https,ftp, all}-proxy-{user,passwd} options, those specified later override prior options. For example, if you specified http-proxy-user=myname, http-proxy-passwd=mypass in aria2.conf and you specified --http-proxy=\" http://proxy \" on the command-line, then you'd get HTTP proxy http://proxy with user myname and password mypass. Another example: if you specified on the command-line --http-proxy=\" http://user:pass@proxy \" --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\", then you'd get HTTP proxy http://proxy with user myname and password mypass. One more example: if you specified in command-line --http-proxy-user=\"myname\" --http-proxy-passwd=\"mypass\" --http-proxy=\" http://user:pass@proxy \", then you'd get HTTP proxy http://proxy with user user and password pass. Returns: Type Description str str","title":"all_proxy"},{"location":"reference/options/#aria2p.options.Options.all_proxy_passwd","text":"Return the all-proxy-passwd option value. Set password for --all-proxy option. Returns: Type Description str str","title":"all_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.all_proxy_user","text":"Return the all-proxy-user option value. Set user for --all-proxy option. Returns: Type Description str str","title":"all_proxy_user"},{"location":"reference/options/#aria2p.options.Options.allow_overwrite","text":"Return the allow-overwrite option value. Restart download from scratch if the corresponding control file doesn't exist. See also --auto-file-renaming option. Default: false. Returns: Type Description bool bool","title":"allow_overwrite"},{"location":"reference/options/#aria2p.options.Options.allow_piece_length_change","text":"Return the allow-piece-length-change option value. If false is given, aria2 aborts download when a piece length is different from one in a control file. If true is given, you can proceed but some download progress will be lost. Default: false. Returns: Type Description bool bool","title":"allow_piece_length_change"},{"location":"reference/options/#aria2p.options.Options.always_resume","text":"Return the always-resume option value. Always resume download. If true is given, aria2 always tries to resume download and if resume is not possible, aborts download. If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume (N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option. Default: true. Returns: Type Description bool bool","title":"always_resume"},{"location":"reference/options/#aria2p.options.Options.are_global","text":"Tell if options are global, or tied to a Download object. Returns: Type Description bool Whether these options are global.","title":"are_global"},{"location":"reference/options/#aria2p.options.Options.async_dns","text":"Return the async-dns option value. Enable asynchronous DNS. Default: True. Returns: Type Description bool bool","title":"async_dns"},{"location":"reference/options/#aria2p.options.Options.async_dns_server","text":"Return the async-dns-server option value. Comma separated list of DNS server address used in asynchronous DNS resolver. Usually asynchronous DNS resolver reads DNS server addresses from /etc/resolv.conf. When this option is used, it uses DNS servers specified in this option instead of ones in /etc/resolv.conf. You can specify both IPv4 and IPv6 address. This option is useful when the system does not have /etc/resolv.conf and user does not have the permission to create it. Returns: Type Description List[str] list of str","title":"async_dns_server"},{"location":"reference/options/#aria2p.options.Options.auto_file_renaming","text":"Return the auto-file-renaming option value. Rename file name if the same file already exists. This option works only in HTTP(S)/FTP download. The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any. Default: true. Returns: Type Description bool bool","title":"auto_file_renaming"},{"location":"reference/options/#aria2p.options.Options.auto_save_interval","text":"Save a control file (*.aria2) every SEC seconds. If 0 is given, a control file is not saved during download. aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600. Default: 60. Returns: Type Description int int","title":"auto_save_interval"},{"location":"reference/options/#aria2p.options.Options.bt_detach_seed_only","text":"Return the bt-detach-seed-only option value. Exclude seed only downloads when counting concurrent active downloads (See -j option). This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode, then it is excluded from active download count (thus it becomes 2), and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method. Default: false. Returns: Type Description bool bool","title":"bt_detach_seed_only"},{"location":"reference/options/#aria2p.options.Options.bt_enable_hook_after_hash_check","text":"Return the bt-enable-hook-after-hash-check option value. Allow hook command invocation after hash check (see -V option) in BitTorrent download. By default, when hash check succeeds, the command given by --on-bt-download-complete is executed. To disable this action, give false to this option. Default: true. Returns: Type Description bool bool","title":"bt_enable_hook_after_hash_check"},{"location":"reference/options/#aria2p.options.Options.bt_enable_lpd","text":"Return the bt-enable-lpd option value. Enable Local Peer Discovery. If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given. Default: false. Returns: Type Description bool bool","title":"bt_enable_lpd"},{"location":"reference/options/#aria2p.options.Options.bt_exclude_tracker","text":"Return the bt-exclude-tracker option value. Comma separated list of BitTorrent tracker's announce URI to remove. You can use special value * which matches all URIs, thus removes all announce URIs. When specifying * in shell command-line, don't forget to escape or quote it. See also --bt-tracker option. Returns: Type Description List[str] list of str","title":"bt_exclude_tracker"},{"location":"reference/options/#aria2p.options.Options.bt_external_ip","text":"Return the bt-external-ip option value. Specify the external IP address to use in BitTorrent download and DHT. It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent. This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses. Returns: Type Description str str","title":"bt_external_ip"},{"location":"reference/options/#aria2p.options.Options.bt_force_encryption","text":"Return the bt-force-encryption option value. Requires BitTorrent message payload encryption with arc4. This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4. This option does not change the option value of those options. If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload. Default: false. Returns: Type Description bool bool","title":"bt_force_encryption"},{"location":"reference/options/#aria2p.options.Options.bt_hash_check_seed","text":"Return the bt-hash-check-seed option value. If true is given, after hash check using --check-integrity option and file is complete, continue to seed file. If you want to check file and download it only when it is damaged or incomplete, set this option to false. This option has effect only on BitTorrent download. Default: true Returns: Type Description bool bool","title":"bt_hash_check_seed"},{"location":"reference/options/#aria2p.options.Options.bt_lpd_interface","text":"Return the bt-lpd-interface option value. Use given interface for Local Peer Discovery. If this option is not specified, the default interface is chosen. You can specify interface name and IP address. Possible Values: interface, IP address. Returns: Type Description str str","title":"bt_lpd_interface"},{"location":"reference/options/#aria2p.options.Options.bt_max_open_files","text":"Return the bt-max-open-files option value. Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally. Default: 100. Returns: Type Description int int","title":"bt_max_open_files"},{"location":"reference/options/#aria2p.options.Options.bt_max_peers","text":"Return the bt-max-peers option value. Specify the maximum number of peers per torrent. 0 means unlimited. See also --bt-request-peer-speed-limit option. Default: 55. Returns: Type Description int int","title":"bt_max_peers"},{"location":"reference/options/#aria2p.options.Options.bt_metadata_only","text":"Return the bt-metadata-only option value. Download meta data only. The file(s) described in meta data will not be downloaded. This option has effect only when BitTorrent Magnet URI is used. See also --bt-save-metadata option. Default: false. Returns: Type Description bool bool","title":"bt_metadata_only"},{"location":"reference/options/#aria2p.options.Options.bt_min_crypto_level","text":"Return the bt-min-crypto-level option value. Set minimum level of encryption method (plain/arc4). If several encryption methods are provided by a peer, aria2 chooses the lowest one which satisfies the given level. Default: plain. Returns: Type Description str str","title":"bt_min_crypto_level"},{"location":"reference/options/#aria2p.options.Options.bt_prioritize_piece","text":"Return the bt-prioritize-piece option value. Try to download first and last pieces of each file first (head[= <SIZE> ],tail[= <SIZE> ]). This is useful for previewing files. The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma. These keywords can take one parameter, SIZE. For example, if head= <SIZE> is specified, pieces in the range of first SIZE bytes of each file get higher priority. tail= <SIZE> means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K). If SIZE is omitted, SIZE=1M is used. Returns: Type Description str str","title":"bt_prioritize_piece"},{"location":"reference/options/#aria2p.options.Options.bt_remove_unselected_file","text":"Return the bt-remove-unselected-file option value. Removes the unselected files when download is completed in BitTorrent. To select files, use --select-file option. If it is not used, all files are assumed to be selected. Please use this option with care because it will actually remove files from your disk. Default: false. Returns: Type Description bool bool","title":"bt_remove_unselected_file"},{"location":"reference/options/#aria2p.options.Options.bt_request_peer_speed_limit","text":"Return the bt-request-peer-speed-limit option value. If the whole download speed of every torrent is lower than SPEED, aria2 temporarily increases the number of peers to try for more download speed. Configuring this option with your preferred download speed can increase your download speed in some cases. You can append K or M (1K = 1024, 1M = 1024K). Default: 50K. Returns: Type Description int int","title":"bt_request_peer_speed_limit"},{"location":"reference/options/#aria2p.options.Options.bt_require_crypto","text":"Return the bt-require-crypto option value. If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake (BitTorrent protocol). Thus aria2 always uses Obfuscation handshake. Default: false. Returns: Type Description bool bool","title":"bt_require_crypto"},{"location":"reference/options/#aria2p.options.Options.bt_save_metadata","text":"Return the bt-save-metadata option value. Save meta data as \".torrent\" file. This option has effect only when BitTorrent Magnet URI is used. The file name is hex encoded info hash with suffix \".torrent\". The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved. See also --bt-metadata-only option. Default: false. Returns: Type Description bool bool","title":"bt_save_metadata"},{"location":"reference/options/#aria2p.options.Options.bt_seed_unverified","text":"Return the bt-seed-unverified option value. Seed previously downloaded files without verifying piece hashes. Default: False. Returns: Type Description bool bool","title":"bt_seed_unverified"},{"location":"reference/options/#aria2p.options.Options.bt_stop_timeout","text":"Return the bt-stop-timeout option value. Stop BitTorrent download if download speed is 0 in consecutive SEC seconds. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int","title":"bt_stop_timeout"},{"location":"reference/options/#aria2p.options.Options.bt_tracker","text":"Return the bt-tracker option value. Comma separated list of additional BitTorrent tracker's announce URI. These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed. Returns: Type Description List[str] list of str","title":"bt_tracker"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_connect_timeout","text":"Return the bt-tracker-connect-timeout option value. Set the connect timeout in seconds to establish connection to tracker. After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead. Default: 60. Returns: Type Description int int","title":"bt_tracker_connect_timeout"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_interval","text":"Return the bt-tracker-interval option value. Set the interval in seconds between tracker requests. This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker. If 0 is set, aria2 determines interval based on the response of tracker and the download progress. Default: 0. Returns: Type Description int int","title":"bt_tracker_interval"},{"location":"reference/options/#aria2p.options.Options.bt_tracker_timeout","text":"Return the bt-tracker-timeout option value. Set timeout in seconds. Default: 60. Returns: Type Description int int","title":"bt_tracker_timeout"},{"location":"reference/options/#aria2p.options.Options.ca_certificate","text":"Return the ca-certificate option value. Use the certificate authorities in FILE to verify the peers. The certificate file must be in PEM format and can contain multiple CA certificates. Use --check-certificate option to enable verification. Note If you build with OpenSSL or the recent version of GnuTLS which has gnutls_certificateset_x509_system_trust() function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup. Note WinTLS and AppleTLS do not support this option. Instead you will have to import the certificate into the OS trust store. Returns: Type Description str str","title":"ca_certificate"},{"location":"reference/options/#aria2p.options.Options.certificate","text":"Return the certificate option value. Use the client certificate in FILE. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --private-key as well. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to import the client certificate and get the SHA-1 fingerprint from the Information dialog corresponding to that certificate. To start aria2c use --certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str","title":"certificate"},{"location":"reference/options/#aria2p.options.Options.check_certificate","text":"Return the check-certificate option value. Verify the peer using certificates specified in --ca-certificate option. Default: True. Returns: Type Description bool bool","title":"check_certificate"},{"location":"reference/options/#aria2p.options.Options.check_integrity","text":"Return the check-integrity option value. Check file integrity by validating piece hashes or a hash of entire file. This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option. If piece hashes are provided, this option can detect damaged portions of a file and re-download them. If a hash of entire file is provided, hash check is only done when file has been already downloaded. This is determined by file length. If hash check fails, file is re-downloaded from scratch. If both piece hashes and a hash of entire file are provided, only piece hashes are used. Default: false. Returns: Type Description bool bool","title":"check_integrity"},{"location":"reference/options/#aria2p.options.Options.checksum","text":"Return the checksum option value. Set checksum ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is listed in Hash Algorithms in aria2c -v. DIGEST is hex digest. For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838 This option applies only to HTTP(S)/FTP downloads. Returns: Type Description str str","title":"checksum"},{"location":"reference/options/#aria2p.options.Options.conditional_get","text":"Return the conditional-get option value. Download file only when the local file is older than remote file. This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink. It also ignores Content-Disposition header. If a control file exists, this option will be ignored. This function uses If-Modified-Since header to get only newer file conditionally. When getting modification time of local file, it uses user supplied file name (see --out option) or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required. Default: false. Returns: Type Description bool bool","title":"conditional_get"},{"location":"reference/options/#aria2p.options.Options.conf_path","text":"Return the conf-path option value. Change the configuration file path to PATH. Default: $HOME/.aria2/aria2.conf if present, otherwise $XDG_CONFIG_HOME/aria2/aria2.conf. Returns: Type Description str str","title":"conf_path"},{"location":"reference/options/#aria2p.options.Options.connect_timeout","text":"Return the connect-timeout option value. Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server. After the connection is established, this option makes no effect and --timeout option is used instead. Default: 60. Returns: Type Description int int","title":"connect_timeout"},{"location":"reference/options/#aria2p.options.Options.console_log_level","text":"Return the console-log-level option value. Set log level to output to console. LEVEL is either debug, info, notice, warn or error. Default: notice. Returns: Type Description str str","title":"console_log_level"},{"location":"reference/options/#aria2p.options.Options.continue_downloads","text":"Return the continue-downloads option value. Continue downloading a partially downloaded file. Use this option to resume a download started by a web browser or another program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads. Returns: Type Description bool bool","title":"continue_downloads"},{"location":"reference/options/#aria2p.options.Options.daemon","text":"Return the daemon option value. Run as daemon. The current working directory will be changed to / and standard input, standard output and standard error will be redirected to /dev/null. Default: false. Returns: Type Description bool bool","title":"daemon"},{"location":"reference/options/#aria2p.options.Options.deferred_input","text":"Return the deferred-input option value. If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup, but it reads one by one when it needs later. This may reduce memory usage if input file contains a lot of URIs to download. If false is given, aria2 reads all URIs and options at startup. Default: false. Warning --deferred-input option will be disabled when --save-session is used together. Returns: Type Description bool bool","title":"deferred_input"},{"location":"reference/options/#aria2p.options.Options.dht_entry_point","text":"Return the dht-entry-point option value. Set host and port as an entry point to IPv4 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str","title":"dht_entry_point"},{"location":"reference/options/#aria2p.options.Options.dht_entry_point6","text":"Return the dht-entry-point6 option value. Set host and port as an entry point to IPv6 DHT network ( <HOST> : <PORT> ). Returns: Type Description str str","title":"dht_entry_point6"},{"location":"reference/options/#aria2p.options.Options.dht_file_path","text":"Return the dht-file-path option value. Change the IPv4 DHT routing table file to PATH. Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat. Returns: Type Description str str","title":"dht_file_path"},{"location":"reference/options/#aria2p.options.Options.dht_file_path6","text":"Return the dht-file-path6 option value. Change the IPv6 DHT routing table file to PATH. Default: $HOME/.aria2/dht6.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat. Returns: Type Description str str","title":"dht_file_path6"},{"location":"reference/options/#aria2p.options.Options.dht_listen_addr6","text":"Return the dht-listen-addr6 option value. Specify address to bind socket for IPv6 DHT. It should be a global unicast IPv6 address of the host. Returns: Type Description str str","title":"dht_listen_addr6"},{"location":"reference/options/#aria2p.options.Options.dht_listen_port","text":"Return the dht-listen-port option value. Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Multiple ports can be specified by using ,, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together. Default: 6881-6999. Note Make sure that the specified ports are open for incoming UDP traffic. Returns: Type Description str str","title":"dht_listen_port"},{"location":"reference/options/#aria2p.options.Options.dht_message_timeout","text":"Return the dht-message-timeout option value. Set timeout in seconds. Default: 10. Returns: Type Description int int","title":"dht_message_timeout"},{"location":"reference/options/#aria2p.options.Options.dir","text":"Return the dir option value. The directory to store the downloaded file. Returns: Type Description str str","title":"dir"},{"location":"reference/options/#aria2p.options.Options.disable_ipv6","text":"Return the disable-ipv6 option value. Disable IPv6. This is useful if you have to use broken DNS and want to avoid terribly slow AAAA record lookup. Default: false. Returns: Type Description bool bool","title":"disable_ipv6"},{"location":"reference/options/#aria2p.options.Options.disk_cache","text":"Return the disk-cache option value. Enable disk cache. If SIZE is 0, the disk cache is disabled. This feature caches the downloaded data in memory, which grows to at most SIZE bytes. The cache storage is created for aria2 instance and shared by all downloads. The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file. If hash checking is involved and the data are cached in memory, we don't need to read them from the disk. SIZE can include K or M (1K = 1024, 1M = 1024K). Default: 16M. Returns: Type Description int int","title":"disk_cache"},{"location":"reference/options/#aria2p.options.Options.download_result","text":"Return the download-result option value. This option changes the way Download Results is formatted. If OPT is default, print GID, status, average download speed and path/URI. If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted. If OPT is full, print GID, status, average download speed, percentage of progress and path/URI. The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden. Default: default. Returns: Type Description str str","title":"download_result"},{"location":"reference/options/#aria2p.options.Options.dry_run","text":"Return the dry-run option value. If true is given, aria2 just checks whether the remote file is available and doesn't download data. This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified. Default: false. Returns: Type Description bool bool","title":"dry_run"},{"location":"reference/options/#aria2p.options.Options.dscp","text":"Return the dscp option value. Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS. This parameter sets only DSCP bits in TOS field of IP packets, not the whole field. If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect, e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC, network vendors' documentation, Wikipedia or any other source, use them as they are. Returns: Type Description str str","title":"dscp"},{"location":"reference/options/#aria2p.options.Options.enable_color","text":"Return the enable-color option value. Enable color output for a terminal. Default: True. Returns: Type Description bool bool","title":"enable_color"},{"location":"reference/options/#aria2p.options.Options.enable_dht","text":"Return the enable-dht option value. Enable IPv4 DHT functionality. It also enables UDP tracker support. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true. Returns: Type Description bool bool","title":"enable_dht"},{"location":"reference/options/#aria2p.options.Options.enable_dht6","text":"Return the enable-dht6 option value. Enable IPv6 DHT functionality. If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Use --dht-listen-port option to specify port number to listen on. See also --dht-listen-addr6 option. Returns: Type Description bool bool","title":"enable_dht6"},{"location":"reference/options/#aria2p.options.Options.enable_http_keep_alive","text":"Return the enable-http-keep-alive option value. Enable HTTP/1.1 persistent connection. Default: True. Returns: Type Description bool bool","title":"enable_http_keep_alive"},{"location":"reference/options/#aria2p.options.Options.enable_http_pipelining","text":"Return the enable-http-pipelining option value. Enable HTTP/1.1 pipelining. Default: False. Note In performance perspective, there is usually no advantage to enable this option. Returns: Type Description bool bool","title":"enable_http_pipelining"},{"location":"reference/options/#aria2p.options.Options.enable_mmap","text":"Return the enable-mmap option value. Map files into memory. This option may not work if the file space is not pre-allocated. See --file-allocation. Default: false. Returns: Type Description bool bool","title":"enable_mmap"},{"location":"reference/options/#aria2p.options.Options.enable_peer_exchange","text":"Return the enable-peer-exchange option value. Enable Peer Exchange extension. If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: True. Returns: Type Description bool bool","title":"enable_peer_exchange"},{"location":"reference/options/#aria2p.options.Options.enable_rpc","text":"Return the enable-rpc option value. Enable JSON-RPC/XML-RPC server. It is strongly recommended to set secret authorization token using --rpc-secret option. See also --rpc-listen-port option. Default: false Returns: Type Description bool bool","title":"enable_rpc"},{"location":"reference/options/#aria2p.options.Options.event_poll","text":"Specify the method for polling events. The possible values are epoll, kqueue, port, poll and select. For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux. kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris. The default value may vary depending on the system you use. Returns: Type Description str str","title":"event_poll"},{"location":"reference/options/#aria2p.options.Options.file_allocation","text":"Return the file-allocation option value. Specify file allocation method. Possible Values: none , prealloc , trunc , falloc . none : Doesn't pre-allocate file space. prealloc : Pre-allocates file space before download begins. This may take some time depending on the size of the file. falloc : If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc is your best choice. It allocates large(few GiB) files almost instantly. Don't use falloc with legacy file systems such as ext3 and FAT32 because it takes almost same time as prealloc and it blocks aria2 entirely until allocation finishes. falloc may not be available if your system doesn't have posix_fallocate(3) function. trunc : Uses ftruncate(2) system call or platform-specific counterpart to truncate a file to a specified length. Default: prealloc . Warning Using trunc seemingly allocates disk space very quickly, but what it actually does is that it sets file length metadata in file system, and does not allocate disk space at all. This means that it does not help avoiding fragmentation. Note In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece. Returns: Type Description str str","title":"file_allocation"},{"location":"reference/options/#aria2p.options.Options.follow_metalink","text":"Return the follow-metalink option value. If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it. If mem is specified, a metalink file is not written to the disk, but is just kept in memory. If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded. Default: true. Returns: Type Description str str","title":"follow_metalink"},{"location":"reference/options/#aria2p.options.Options.follow_torrent","text":"Return the follow-torrent option value. If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it. If mem is specified, a torrent file is not written to the disk, but is just kept in memory. If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded. Default: true. Returns: Type Description str str","title":"follow_torrent"},{"location":"reference/options/#aria2p.options.Options.force_save","text":"Return the force-save option value. Save download with --save-session option even if the download is completed or removed. This option also saves control file in that situations. This may be useful to save BitTorrent seeding which is recognized as completed state. Default: false. Returns: Type Description bool bool","title":"force_save"},{"location":"reference/options/#aria2p.options.Options.force_sequential","text":"Return the force-sequential option value. Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual command-line download utilities. Default: False. Returns: Type Description bool bool","title":"force_sequential"},{"location":"reference/options/#aria2p.options.Options.ftp_passwd","text":"Return the ftp-passwd option value. Set FTP password. This affects all URIs. If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc. If password is found in .netrc, then use it as password. If not, use the password specified in this option. Default: ARIA2USER@. Returns: Type Description str str","title":"ftp_passwd"},{"location":"reference/options/#aria2p.options.Options.ftp_pasv","text":"Return the ftp-pasv option value. Use the passive mode in FTP. If false is given, the active mode will be used. Default: true. Note This option is ignored for SFTP transfer. Returns: Type Description bool bool","title":"ftp_pasv"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy","text":"Return the ftp-proxy option value. Use a proxy server for FTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all ftp downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str","title":"ftp_proxy"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy_passwd","text":"Return the ftp-proxy-passwd option value. Set password for --ftp-proxy option. Returns: Type Description str str","title":"ftp_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.ftp_proxy_user","text":"Return the ftp-proxy-user option value. Set user for --ftp-proxy option. Returns: Type Description str str","title":"ftp_proxy_user"},{"location":"reference/options/#aria2p.options.Options.ftp_reuse_connection","text":"Return the ftp-reuse-connection option value. Reuse connection in FTP. Default: True. Returns: Type Description bool bool","title":"ftp_reuse_connection"},{"location":"reference/options/#aria2p.options.Options.ftp_type","text":"Return the ftp-type option value. Set FTP transfer type. TYPE is either binary or ascii. Default: binary. Note This option is ignored for SFTP transfer. Returns: Type Description str str","title":"ftp_type"},{"location":"reference/options/#aria2p.options.Options.ftp_user","text":"Return the ftp-user option value. Set FTP user. This affects all URIs. Default: anonymous. Returns: Type Description str str","title":"ftp_user"},{"location":"reference/options/#aria2p.options.Options.gid","text":"Return the gid option value. Set GID manually. aria2 identifies each download by the ID called GID. The GID must be hex string of 16 characters, thus [0-9a-zA-Z] are allowed and leading zeros must not be stripped. The GID all 0 is reserved and must not be used. The GID must be unique, otherwise error is reported and the download is not added. This option is useful when restoring the sessions saved using --save-session option. If this option is not used, new GID is generated by aria2. Returns: Type Description str str","title":"gid"},{"location":"reference/options/#aria2p.options.Options.hash_check_only","text":"Return the hash-check-only option value. If true is given, after hash check using --check-integrity option, abort download whether or not download is complete. Default: False. Returns: Type Description bool bool","title":"hash_check_only"},{"location":"reference/options/#aria2p.options.Options.header","text":"Return the header option value. Append HEADER to HTTP request header. You can use this option repeatedly to specify more than one header: $ aria2c --header=\"X-A: b78\" --header=\"X-B: 9J1\" \"http://host/file\" Returns: Type Description str str","title":"header"},{"location":"reference/options/#aria2p.options.Options.http_accept_gzip","text":"Return the http-accept-gzip option value. Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding: gzip or Content-Encoding: deflate. Default: False. Note Some server responds with Content-Encoding: gzip for files which itself is gzipped file. aria2 inflates them anyway because of the response header. Returns: Type Description bool bool","title":"http_accept_gzip"},{"location":"reference/options/#aria2p.options.Options.http_auth_challenge","text":"Return the http-auth-challenge option value. Send HTTP authorization header only when it is requested by the server. If false is set, then authorization header is always sent to the server. There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option. Default: false. Returns: Type Description bool bool","title":"http_auth_challenge"},{"location":"reference/options/#aria2p.options.Options.http_no_cache","text":"Return the http-no-cache option value. Send Cache-Control: no-cache and Pragma: no-cache header to avoid cached content. If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option. Default: false. Returns: Type Description bool bool","title":"http_no_cache"},{"location":"reference/options/#aria2p.options.Options.http_passwd","text":"Return the http-passwd option value. Set HTTP password. This affects all URIs. Returns: Type Description str str","title":"http_passwd"},{"location":"reference/options/#aria2p.options.Options.http_proxy","text":"Return the http-proxy option value. Use a proxy server for HTTP. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all http downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str","title":"http_proxy"},{"location":"reference/options/#aria2p.options.Options.http_proxy_passwd","text":"Return the http-proxy-passwd option value. Set password for --http-proxy. Returns: Type Description str str","title":"http_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.http_proxy_user","text":"Return the http-proxy-user option value. Set user for --http-proxy. Returns: Type Description str str","title":"http_proxy_user"},{"location":"reference/options/#aria2p.options.Options.http_user","text":"Return the http-user option value. Set HTTP user. This affects all URIs. Returns: Type Description str str","title":"http_user"},{"location":"reference/options/#aria2p.options.Options.https_proxy","text":"Return the https-proxy option value. Use a proxy server for HTTPS. To override a previously defined proxy, use \"\". See also the --all-proxy option. This affects all https download. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT] . Returns: Type Description str str","title":"https_proxy"},{"location":"reference/options/#aria2p.options.Options.https_proxy_passwd","text":"Return the https-proxy-passwd option value. Set password for --https-proxy. Returns: Type Description str str","title":"https_proxy_passwd"},{"location":"reference/options/#aria2p.options.Options.https_proxy_user","text":"Return the https-proxy-user option value. Set user for --https-proxy. Returns: Type Description str str","title":"https_proxy_user"},{"location":"reference/options/#aria2p.options.Options.human_readable","text":"Return the human-readable option value. Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout. Default: True. Returns: Type Description bool bool","title":"human_readable"},{"location":"reference/options/#aria2p.options.Options.index_out","text":"Return the index-out option value. Set file path for file with index=INDEX ( <INDEX>=<PATH> ). You can find the file index using the --show-files option. PATH is a relative path to the path specified in --dir option. You can use this option multiple times. Using this option, you can specify the output file names of BitTorrent downloads. Returns: Type Description str str","title":"index_out"},{"location":"reference/options/#aria2p.options.Options.input_file","text":"Return the input-file option value. Downloads the URIs listed in FILE. You can specify multiple sources for a single entity by putting multiple URIs on a single line separated by the TAB character. Additionally, options can be specified after each URI line. Option lines must start with one or more white space characters (SPACE or TAB) and must only contain one option per line. Input files can use gzip compression. When FILE is specified as -, aria2 will read the input from stdin. See the Input File subsection for details. See also the --deferred-input option. See also the --save-session option. Returns: Type Description str str","title":"input_file"},{"location":"reference/options/#aria2p.options.Options.interface","text":"Return the interface option value. Bind sockets to given interface. You can specify interface name, IP address and host name. Possible Values: interface, IP address, host name. Note If an interface has multiple addresses, it is highly recommended to specify IP address explicitly. See also --disable-ipv6. If your system doesn't have getifaddrs(3), this option doesn't accept interface name. Returns: Type Description str str","title":"interface"},{"location":"reference/options/#aria2p.options.Options.keep_unfinished_download_result","text":"Return the keep-unfinished-download-result option value. Keep unfinished download results even if doing so exceeds --max-download-result. This is useful if all unfinished downloads must be saved in session file (see --save-session option). Please keep in mind that there is no upper bound to the number of unfinished download result to keep. If that is undesirable, turn this option off. Default: true. Returns: Type Description bool bool","title":"keep_unfinished_download_result"},{"location":"reference/options/#aria2p.options.Options.listen_port","text":"Return the listen-port option value. Set TCP port number for BitTorrent downloads. Multiple ports can be specified by using, for example: 6881,6885. You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889, 6999. Default: 6881-6999 Note Make sure that the specified ports are open for incoming TCP traffic. Returns: Type Description str str","title":"listen_port"},{"location":"reference/options/#aria2p.options.Options.load_cookies","text":"Return the load-cookies option value. Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format. Note If aria2 is built without libsqlite3, then it doesn't support Firefox3 and Chromium/Google Chrome cookie format. Returns: Type Description str str","title":"load_cookies"},{"location":"reference/options/#aria2p.options.Options.log","text":"Return the log option value. The file name of the log file. If - is specified, log is written to stdout. If empty string(\"\") is specified, or this option is omitted, no log is written to disk at all. Returns: Type Description str str","title":"log"},{"location":"reference/options/#aria2p.options.Options.log_level","text":"Return the log-level option value. Set log level to output. LEVEL is either debug, info, notice, warn or error. Default: debug. Returns: Type Description str str","title":"log_level"},{"location":"reference/options/#aria2p.options.Options.lowest_speed_limit","text":"Return the lowest-speed-limit option value. Close connection if download speed is lower than or equal to this value(bytes per sec). 0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K). This option does not affect BitTorrent downloads. Default: 0. Returns: Type Description int int","title":"lowest_speed_limit"},{"location":"reference/options/#aria2p.options.Options.max_concurrent_downloads","text":"Return the max-concurrent-downloads option value. Set the maximum number of parallel downloads for every queue item. See also the --split option. Default: 5. Returns: Type Description int int","title":"max_concurrent_downloads"},{"location":"reference/options/#aria2p.options.Options.max_connection_per_server","text":"Return the max-connection-per-server option value. The maximum number of connections to one server for each download. Default: 1. Returns: Type Description int int","title":"max_connection_per_server"},{"location":"reference/options/#aria2p.options.Options.max_download_limit","text":"Return the max-download-limit option value. Set max download speed per each download in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall download speed, use --max-overall-download-limit option. Default: 0. Returns: Type Description int int","title":"max_download_limit"},{"location":"reference/options/#aria2p.options.Options.max_download_result","text":"Return the max-download-result option value. Set maximum number of download result kept in memory. The download results are completed/error/removed downloads. The download results are stored in FIFO queue and it can store at most NUM download results. When queue is full and new download result is created, oldest download result is removed from the front of the queue and new one is pushed to the back. Setting big number in this option may result high memory consumption after thousands of downloads. Specifying 0 means no download result is kept. Note that unfinished downloads are kept in memory regardless of this option value. See --keep-unfinished-download-result option. Default: 1000. Returns: Type Description int int","title":"max_download_result"},{"location":"reference/options/#aria2p.options.Options.max_file_not_found","text":"Return the max-file-not-found option value. If aria2 receives \"file not found\" status from the remote HTTP/FTP servers NUM times without getting a single byte, then force the download to fail. Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers. The number of retry attempt is counted toward --max-tries, so it should be configured too. Default: 0. Returns: Type Description int int","title":"max_file_not_found"},{"location":"reference/options/#aria2p.options.Options.max_mmap_limit","text":"Return the max-mmap-limit option value. Set the maximum file size to enable mmap (see --enable-mmap option). The file size is determined by the sum of all files contained in one download. For example, if a download contains 5 files, then file size is the total size of those files. If file size is strictly greater than the size specified in this option, mmap will be disabled. Default: 9223372036854775807. Returns: Type Description int int","title":"max_mmap_limit"},{"location":"reference/options/#aria2p.options.Options.max_overall_download_limit","text":"Return the max-overall-download-limit option value. Set max overall download speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the download speed per download, use --max-download-limit option. Default: 0. Returns: Type Description int int","title":"max_overall_download_limit"},{"location":"reference/options/#aria2p.options.Options.max_overall_upload_limit","text":"Return the max-overall-upload-limit option value. Set max overall upload speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the upload speed per torrent, use --max-upload-limit option. Default: 0. Returns: Type Description int int","title":"max_overall_upload_limit"},{"location":"reference/options/#aria2p.options.Options.max_resume_failure_tries","text":"Return the max-resume-failure-tries option value. When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume. If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option. Default: 0. Returns: Type Description int int","title":"max_resume_failure_tries"},{"location":"reference/options/#aria2p.options.Options.max_tries","text":"Return the max-tries option value. Set number of tries. 0 means unlimited. See also --retry-wait. Default: 5. Returns: Type Description int int","title":"max_tries"},{"location":"reference/options/#aria2p.options.Options.max_upload_limit","text":"Return the max-upload-limit option value. Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K). To limit the overall upload speed, use --max-overall-upload-limit option. Default: 0. Returns: Type Description int int","title":"max_upload_limit"},{"location":"reference/options/#aria2p.options.Options.metalink_base_uri","text":"Return the metalink-base-uri option value. Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk. If URI points to a directory, URI must end with /. Returns: Type Description str str","title":"metalink_base_uri"},{"location":"reference/options/#aria2p.options.Options.metalink_enable_unique_protocol","text":"Return the metalink-enable-unique-protocol option value. If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them. Use --metalink-preferred-protocol option to specify the preference of protocol. Default: true. Returns: Type Description bool bool","title":"metalink_enable_unique_protocol"},{"location":"reference/options/#aria2p.options.Options.metalink_file","text":"Return the metalink-file option value. The file path to \".meta4\" and \".metalink\" file. Reads input from stdin when - is specified. You are not required to use this option because you can specify \".metalink\" files without --metalink-file. Returns: Type Description str str","title":"metalink_file"},{"location":"reference/options/#aria2p.options.Options.metalink_language","text":"Return the metalink-language option value. The language of the file to download. Returns: Type Description str str","title":"metalink_language"},{"location":"reference/options/#aria2p.options.Options.metalink_location","text":"Return the metalink-location option value. The location of the preferred server. A comma-delimited list of locations is acceptable, for example, jp,us. Returns: Type Description List[str] list of str","title":"metalink_location"},{"location":"reference/options/#aria2p.options.Options.metalink_os","text":"Return the metalink-os option value. The operating system of the file to download. Returns: Type Description str str","title":"metalink_os"},{"location":"reference/options/#aria2p.options.Options.metalink_preferred_protocol","text":"Return the metalink-preferred-protocol option value. Specify preferred protocol. The possible values are http, https, ftp and none. Specify none to disable this feature. Default: none. Returns: Type Description str str","title":"metalink_preferred_protocol"},{"location":"reference/options/#aria2p.options.Options.metalink_version","text":"Return the metalink-version option value. The version of the file to download. Returns: Type Description str str","title":"metalink_version"},{"location":"reference/options/#aria2p.options.Options.min_split_size","text":"Return the min-split-size option value. aria2 does not split less than 2*SIZE byte range. For example, let's consider downloading 20MiB file. If SIZE is 10M, aria2 can split file into 2 range [ 0-10MiB) and [10MiB-20MiB) and download it using 2 sources(if --split > = 2, of course). If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K). Possible Values: 1M -1024M Default: 20M Returns: Type Description int int","title":"min_split_size"},{"location":"reference/options/#aria2p.options.Options.min_tls_version","text":"Return the min-tls-version option value. Specify minimum SSL/TLS version to enable. Possible Values: SSLv3, TLSv1, TLSv1.1, TLSv1.2. Default: TLSv1. Returns: Type Description str str","title":"min_tls_version"},{"location":"reference/options/#aria2p.options.Options.multiple_interface","text":"Return the multiple-interface option value. Comma separated list of interfaces to bind sockets to. Requests will be split among the interfaces to achieve link aggregation. You can specify interface name, IP address and hostname. If --interface is used, this option will be ignored. Possible Values: interface, IP address, hostname. Returns: Type Description List[str] list of str","title":"multiple_interface"},{"location":"reference/options/#aria2p.options.Options.netrc_path","text":"Return the netrc-path option value. Specify the path to the netrc file. Default: $(HOME)/.netrc. Note Permission of the .netrc file must be 600. Otherwise, the file will be ignored. Returns: Type Description str str","title":"netrc_path"},{"location":"reference/options/#aria2p.options.Options.no_conf","text":"Return the no-conf option value. Disable loading aria2.conf file. Returns: Type Description bool bool","title":"no_conf"},{"location":"reference/options/#aria2p.options.Options.no_file_allocation_limit","text":"Return the no-file-allocation-limit option value. No file allocation is made for files whose size is smaller than SIZE. You can append K or M (1K = 1024, 1M = 1024K). Default: 5M. Returns: Type Description int int","title":"no_file_allocation_limit"},{"location":"reference/options/#aria2p.options.Options.no_netrc","text":"Return the no-netrc option value. Disable netrc support. netrc support is enabled by default. Note netrc file is only read at the startup if --no-netrc is false. So if --no-netrc is true at the startup, no netrc is available throughout the session. You cannot get netrc enabled even if you send --no-netrc=false using aria2.changeGlobalOption(). Returns: Type Description bool bool","title":"no_netrc"},{"location":"reference/options/#aria2p.options.Options.no_proxy","text":"Return the no-proxy option value. Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used. Note For network addresses with a subnet mask, both IPv4 and IPv6 addresses work. The current implementation does not resolve the host name in an URI to compare network addresses specified in --no-proxy. So it is only effective if URI has numeric IP addresses. Returns: Type Description str str","title":"no_proxy"},{"location":"reference/options/#aria2p.options.Options.on_bt_download_complete","text":"Return the on-bt-download-complete option value. For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over. On the other hand, this option set the command to be executed after download completed but before seeding. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_bt_download_complete"},{"location":"reference/options/#aria2p.options.Options.on_download_complete","text":"Return the on-download-complete option value. Set the command to be executed after download completed. See See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_complete"},{"location":"reference/options/#aria2p.options.Options.on_download_error","text":"Return the on-download-error option value. Set the command to be executed after download aborted due to error. See Event Hook for more details about COMMAND. See also --on-download-stop option. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_error"},{"location":"reference/options/#aria2p.options.Options.on_download_pause","text":"Return the on-download-pause option value. Set the command to be executed after download was paused. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_pause"},{"location":"reference/options/#aria2p.options.Options.on_download_start","text":"Return the on-download-start option value. Set the command to be executed after download got started. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_start"},{"location":"reference/options/#aria2p.options.Options.on_download_stop","text":"Return the on-download-stop option value. Set the command to be executed after download stopped. You can override the command to be executed for particular download result using --on-download-complete and --on-download-error. If they are specified, command specified in this option is not executed. See Event Hook for more details about COMMAND. Possible Values: /path/to/command. Returns: Type Description str str","title":"on_download_stop"},{"location":"reference/options/#aria2p.options.Options.optimize_concurrent_downloads","text":"Return the optimize-concurrent-downloads option value. Optimizes the number of concurrent downloads according to the bandwidth available ( true|false|<A>:<B> ). aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized in the option arguments with A and B separated by a colon. The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks. The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter. Default: false. Returns: Type Description str str","title":"optimize_concurrent_downloads"},{"location":"reference/options/#aria2p.options.Options.out","text":"Return the out option value. The file name of the downloaded file. It is always relative to the directory given in --dir option. When the --force-sequential option is used, this option is ignored. Note You cannot specify a file name for Metalink or BitTorrent downloads. The file name specified here is only used when the URIs fed to aria2 are given on the command line directly, but not when using --input-file, --force-sequential option. Example: $ aria2c -o myfile.zip \"http://mirror1/file.zip\" \"http://mirror2/file.zip\" Returns: Type Description str str","title":"out"},{"location":"reference/options/#aria2p.options.Options.parameterized_uri","text":"Return the parameterized-uri option value. Enable parameterized URI support. You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso. Also you can specify numeric sequences with step counter: http://host/image[000-100:2].img . A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required. Default: false. Returns: Type Description bool bool","title":"parameterized_uri"},{"location":"reference/options/#aria2p.options.Options.pause","text":"Return the pause option value. Pause download after added. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool","title":"pause"},{"location":"reference/options/#aria2p.options.Options.pause_metadata","text":"Return the pause-metadata option value. Pause downloads created as a result of metadata download. There are 3 types of metadata downloads in aria2: (1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file. These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads. This option is effective only when --enable-rpc=true is given. Default: false. Returns: Type Description bool bool","title":"pause_metadata"},{"location":"reference/options/#aria2p.options.Options.peer_id_prefix","text":"Return the peer-id-prefix option value. Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length. If more than 20 bytes are specified, only first 20 bytes are used. If less than 20 bytes are specified, random byte data are added to make its length 20 bytes. Default: A2-$MAJOR-$MINOR-$PATCH-, $MAJOR, $MINOR and $PATCH are replaced by major, minor and patch version number respectively. For instance, aria2 version 1.18.8 has prefix ID A2-1-18-8-. Returns: Type Description str str","title":"peer_id_prefix"},{"location":"reference/options/#aria2p.options.Options.piece_length","text":"Return the piece-length option value. Set a piece length for HTTP/FTP downloads. This is the boundary when aria2 splits a file. All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads. It will be also ignored if Metalink file contains piece hashes. Default: 1M. Note The possible use case of --piece-length option is change the request range in one HTTP pipelined request. To enable HTTP pipelining use --enable-http-pipelining. Returns: Type Description str str","title":"piece_length"},{"location":"reference/options/#aria2p.options.Options.private_key","text":"Return the private-key option value. Use the private key in FILE. The private key must be decrypted and in PEM format. The behavior when encrypted one is given is undefined. See also --certificate option. Returns: Type Description str str","title":"private_key"},{"location":"reference/options/#aria2p.options.Options.proxy_method","text":"Return the proxy-method option value. Set the method to use in proxy request. METHOD is either get or tunnel. HTTPS downloads always use tunnel regardless of this option. Default: get Returns: Type Description str str","title":"proxy_method"},{"location":"reference/options/#aria2p.options.Options.quiet","text":"Return the quiet option value. Make aria2 quiet (no console output). Default: False. Returns: Type Description bool bool","title":"quiet"},{"location":"reference/options/#aria2p.options.Options.realtime_chunk_checksum","text":"Return the realtime-chunk-checksum option value. Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided. Default: True. Returns: Type Description bool bool","title":"realtime_chunk_checksum"},{"location":"reference/options/#aria2p.options.Options.referer","text":"Return the referer option value. Set an http referrer (Referer). This affects all http/https downloads. If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option. Returns: Type Description str str","title":"referer"},{"location":"reference/options/#aria2p.options.Options.remote_time","text":"Return the remote-time option value. Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file. Default: False. Returns: Type Description bool bool","title":"remote_time"},{"location":"reference/options/#aria2p.options.Options.remove_control_file","text":"Return the remove-control-file option value. Remove control file before download. Using with --allow-overwrite=true, download always starts from scratch. This will be useful for users behind proxy server which disables resume. Returns: Type Description bool bool","title":"remove_control_file"},{"location":"reference/options/#aria2p.options.Options.retry_wait","text":"Return the retry-wait option value. Set the seconds to wait between retries. When SEC >` 0, aria2 will retry downloads when the HTTP server returns a 503 response. Default: 0. Returns: Type Description int int","title":"retry_wait"},{"location":"reference/options/#aria2p.options.Options.reuse_uri","text":"Return the reuse-uri option value. Reuse already used URIs if no unused URIs are left. Default: True. Returns: Type Description bool bool","title":"reuse_uri"},{"location":"reference/options/#aria2p.options.Options.rlimit_nofile","text":"Return the rlimit-nofile option value. Set the soft limit of open file descriptors. This open will only have effect when: a. The system supports it (posix) b. The limit does not exceed the hard limit. c. The specified limit is larger than the current soft limit. This is equivalent to setting nofile via ulimit, except that it will never decrease the limit. This option is only available on systems supporting the rlimit API. Returns: Type Description int int","title":"rlimit_nofile"},{"location":"reference/options/#aria2p.options.Options.rpc_allow_origin_all","text":"Return the rpc-allow-origin-all option value. Add Access-Control-Allow-Origin header field with value * to the RPC response. Default: False. Returns: Type Description bool bool","title":"rpc_allow_origin_all"},{"location":"reference/options/#aria2p.options.Options.rpc_certificate","text":"Return the rpc-certificate option value. Use the certificate in FILE for RPC server. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format. PKCS12 files must contain the certificate, a key and optionally a chain of additional certificates. Only PKCS12 files with a blank import password can be opened! When using PEM, you have to specify the private key via --rpc-private-key as well. Use --rpc-secure option to enable encryption. Note WinTLS does not support PEM files at the moment. Users have to use PKCS12 files. Note AppleTLS users should use the KeyChain Access utility to first generate a self-signed SSL-Server certificate, e.g. using the wizard, and get the SHA-1 fingerprint from the Information dialog corresponding to that new certificate. To start aria2c with --rpc-secure use --rpc-certificate= <SHA-1> . Alternatively PKCS12 files are also supported. PEM files, however, are not supported. Returns: Type Description str str","title":"rpc_certificate"},{"location":"reference/options/#aria2p.options.Options.rpc_listen_all","text":"Return the rpc-listen-all option value. Listen incoming JSON-RPC/XML-RPC requests on all network interfaces. If false is given, listen only on local loopback interface. Default: false. Returns: Type Description bool bool","title":"rpc_listen_all"},{"location":"reference/options/#aria2p.options.Options.rpc_listen_port","text":"Return the rpc-listen-port option value. Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024-65535. Default: 6800. Returns: Type Description int int","title":"rpc_listen_port"},{"location":"reference/options/#aria2p.options.Options.rpc_max_request_size","text":"Return the rpc-max-request-size option value. Set max size of JSON-RPC/XML-RPC request in bytes. If aria2 detects the request is more than SIZE bytes, it drops connection. Default: 2M. Returns: Type Description str str","title":"rpc_max_request_size"},{"location":"reference/options/#aria2p.options.Options.rpc_passwd","text":"Return the rpc-passwd option value. Set JSON-RPC/XML-RPC password. Warning --rpc-passwd option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str","title":"rpc_passwd"},{"location":"reference/options/#aria2p.options.Options.rpc_private_key","text":"Return the rpc-private-key option value. Use the private key in FILE for RPC server. The private key must be decrypted and in PEM format. Use --rpc-secure option to enable encryption. See also --rpc-certificate option. Returns: Type Description str str","title":"rpc_private_key"},{"location":"reference/options/#aria2p.options.Options.rpc_save_upload_metadata","text":"Return the rpc-save-upload-metadata option value. Save the uploaded torrent or metalink meta data in the directory specified by --dir option. The file name consists of SHA-1 hash hex string of meta data plus extension. For torrent, the extension is '.torrent'. For metalink, it is '.meta4'. If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option. Default: true. Returns: Type Description bool bool","title":"rpc_save_upload_metadata"},{"location":"reference/options/#aria2p.options.Options.rpc_secret","text":"Return the rpc-secret option value. Set RPC secret authorization token. Read RPC authorization secret token to know how this option value is used. Returns: Type Description str str","title":"rpc_secret"},{"location":"reference/options/#aria2p.options.Options.rpc_secure","text":"Return the rpc-secure option value. RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server. For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key. Returns: Type Description bool bool","title":"rpc_secure"},{"location":"reference/options/#aria2p.options.Options.rpc_user","text":"Return the rpc-user option value. Set JSON-RPC/XML-RPC user. Warning --rpc-user option will be deprecated in the future release. Migrate to --rpc-secret option as soon as possible. Returns: Type Description str str","title":"rpc_user"},{"location":"reference/options/#aria2p.options.Options.save_cookies","text":"Return the save-cookies option value. Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format. If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0. Possible Values: /path/to/file. Returns: Type Description str str","title":"save_cookies"},{"location":"reference/options/#aria2p.options.Options.save_not_found","text":"Return the save-not-found option value. Save download with --save-session option even if the file was not found on the server. This option also saves control file in that situations. Default: true. Returns: Type Description bool bool","title":"save_not_found"},{"location":"reference/options/#aria2p.options.Options.save_session","text":"Return the save-session option value. Save error/unfinished downloads to FILE on exit. You can pass this output file to aria2c with --input-file option on restart. If you like the output to be gzipped append a .gz extension to the file name. Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved. GID is also saved with gid, but there are some restrictions, see below. Note Normally, GID of the download itself is saved. But some downloads use meta data (e.g., BitTorrent and Metalink). In this case, there are some restrictions. magnet URI, and followed by torrent download: GID of BitTorrent meta data download is saved. URI to torrent file, and followed by torrent download: GID of torrent file download is saved. URI to metalink file, and followed by file downloads described in metalink file: GID of metalink file download is saved. local torrent file: GID of torrent download is saved. local metalink file: Any meaningful GID is not saved. Returns: Type Description str str","title":"save_session"},{"location":"reference/options/#aria2p.options.Options.save_session_interval","text":"Return the save-session-interval option value. Save error/unfinished downloads to a file specified by --save-session option every SEC seconds. If 0 is given, file will be saved only when aria2 exits. Default: 0. Returns: Type Description int int","title":"save_session_interval"},{"location":"reference/options/#aria2p.options.Options.seed_ratio","text":"Return the seed-ratio option value. Specify share ratio. Seed completed torrents until share ratio reaches RATIO. You are strongly encouraged to specify equals or more than 1.0 here. Specify 0.0 if you intend to do seeding regardless of share ratio. If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied. Default: 1.0. Returns: Type Description float float","title":"seed_ratio"},{"location":"reference/options/#aria2p.options.Options.seed_time","text":"Return the seed-time option value. Specify seeding time in (fractional) minutes. Also see the --seed-ratio option. Note Specifying --seed-time=0 disables seeding after download completed. Returns: Type Description float float","title":"seed_time"},{"location":"reference/options/#aria2p.options.Options.select_file","text":"Return the select-file option value. Set file to download by specifying its index. You can find the file index using the --show-files option. Multiple indexes can be specified by using ,, for example: 3,6. You can also use - to specify a range: 1-5. , and - can be used together: 1-5,8, 9. When used with the -M option, index may vary depending on the query (see --metalink-* options). Note In multi file torrent, the adjacent files specified by this option may also be downloaded. This is by design, not a bug. A single piece may include several files or part of files, and aria2 writes the piece to the appropriate files. Returns: Type Description str str","title":"select_file"},{"location":"reference/options/#aria2p.options.Options.server_stat_if","text":"Return the server-stat-if option value. Specify the file name to load performance profile of the servers. The loaded data will be used in some URI selector such as feedback. See also --uri-selector option. See Server Performance Profile subsection below for file format. Returns: Type Description str str","title":"server_stat_if"},{"location":"reference/options/#aria2p.options.Options.server_stat_of","text":"Return the server-stat-of option value. Specify the file name to which performance profile of the servers is saved. You can load saved data using --server-stat-if option. See Server Performance Profile subsection below for file format. Returns: Type Description str str","title":"server_stat_of"},{"location":"reference/options/#aria2p.options.Options.server_stat_timeout","text":"Return the server-stat-timeout option value. Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them. Default: 86400 (24hours). Returns: Type Description int int","title":"server_stat_timeout"},{"location":"reference/options/#aria2p.options.Options.show_console_readout","text":"Return the show-console-readout option value. Show console readout. Default: True. Returns: Type Description bool bool","title":"show_console_readout"},{"location":"reference/options/#aria2p.options.Options.show_files","text":"Return the show-files option value. Print file listing of \".torrent\", \".meta4\" and \".metalink\" file and exit. In case of \".torrent\" file, additional information (infohash, piece length, etc) is also printed. Returns: Type Description bool bool","title":"show_files"},{"location":"reference/options/#aria2p.options.Options.socket_recv_buffer_size","text":"Return the socket-recv-buffer-size option value. Set the maximum socket receive buffer in bytes. Specifying 0 will disable this option. This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call. Default: 0. Returns: Type Description int int","title":"socket_recv_buffer_size"},{"location":"reference/options/#aria2p.options.Options.split","text":"Return the split option value. Download a file using N connections. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup. If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously. The number of connections to the same host is restricted by the --max-connection-per-server option. See also the --min-split-size option. Default: 5 Note Some Metalinks regulate the number of servers to connect. aria2 strictly respects them. This means that if Metalink defines the maxconnections attribute lower than N, then aria2 uses the value of this lower value instead of N. Returns: Type Description int int","title":"split"},{"location":"reference/options/#aria2p.options.Options.ssh_host_key_md","text":"Return the ssh-host-key-md option value. Set checksum for SSH host public key ( <TYPE>=<DIGEST> ). TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest. For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server's public key when SFTP is used. If this option is not set, which is default, no validation takes place. Returns: Type Description str str","title":"ssh_host_key_md"},{"location":"reference/options/#aria2p.options.Options.stderr","text":"Return the stderr option value. Redirect all console output that would be otherwise printed in stdout to stderr. Default: False. Returns: Type Description bool bool","title":"stderr"},{"location":"reference/options/#aria2p.options.Options.stop","text":"Return the stop option value. Stop application after SEC seconds has passed. If 0 is given, this feature is disabled. Default: 0. Returns: Type Description int int","title":"stop"},{"location":"reference/options/#aria2p.options.Options.stop_with_process","text":"Return the stop-with-process option value. Stop application when process PID is not running. This is useful if aria2 process is forked from a parent process. The parent process can fork aria2 with its own pid and when parent process exits for some reason, aria2 can detect it and shutdown itself. Returns: Type Description int int","title":"stop_with_process"},{"location":"reference/options/#aria2p.options.Options.stream_piece_selector","text":"Return the stream-piece-selector option value. Specify piece selection algorithm used in HTTP/FTP download. Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given, aria2 selects piece so that it reduces the number of establishing connection. This is reasonable default behavior because establishing connection is an expensive operation. If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file. This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead. Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option. If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored. If geom is given, at the beginning aria2 selects piece which has minimum index like inorder, but it exponentially increasingly keeps space from previously selected piece. This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first. This will be useful to view movie while downloading it. Default: default. Returns: Type Description str str","title":"stream_piece_selector"},{"location":"reference/options/#aria2p.options.Options.summary_interval","text":"Return the summary-interval option value. Set interval in seconds to output download progress summary. Setting 0 suppresses the output. Default: 60. Returns: Type Description int int","title":"summary_interval"},{"location":"reference/options/#aria2p.options.Options.timeout","text":"Return the timeout option value. Set timeout in seconds. Default: 60. Returns: Type Description int int","title":"timeout"},{"location":"reference/options/#aria2p.options.Options.torrent_file","text":"Return the torrent-file option value. The path to the \".torrent\" file. You are not required to use this option because you can specify \".torrent\" files without --torrent-file. Returns: Type Description str str","title":"torrent_file"},{"location":"reference/options/#aria2p.options.Options.truncate_console_readout","text":"Return the truncate-console-readout option value. Truncate console readout to fit in a single line. Default: True. Returns: Type Description bool bool","title":"truncate_console_readout"},{"location":"reference/options/#aria2p.options.Options.uri_selector","text":"Return the uri-selector option value. Specify URI selection algorithm. The possible values are inorder, feedback and adaptive. If inorder is given, URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads and choose fastest server in the URI list. This also effectively skips dead mirrors. The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if options. If adaptive is given, selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet, and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise, it doesn't select anymore mirrors. Like feedback, it uses a performance profile of servers. Default: feedback. Returns: Type Description str str","title":"uri_selector"},{"location":"reference/options/#aria2p.options.Options.use_head","text":"Return the use-head option value. Use HEAD method for the first request to the HTTP server. Default: False. Returns: Type Description bool bool","title":"use_head"},{"location":"reference/options/#aria2p.options.Options.user_agent","text":"Return the user-agent option value. Set user agent for HTTP(S) downloads. Default: aria2/$VERSION, $VERSION is replaced by package version. Returns: Type Description str str","title":"user_agent"},{"location":"reference/options/#aria2p.options.Options.__init__","text":"Initialize the object. Parameters: Name Type Description Default api aria2p.api.API The reference to an [ API ][aria2p.api.API] instance. required struct dict A dictionary Python object returned by the JSON-RPC client. required download aria2p.downloads.Download An optional [ Download ][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. None Source code in aria2p/options.py def __init__ ( self , api : \"aria2p.api.API\" , struct : dict , download : \"aria2p.downloads.Download\" = None ): \"\"\" Initialize the object. Arguments: api: The reference to an [`API`][aria2p.api.API] instance. struct: A dictionary Python object returned by the JSON-RPC client. download: An optional [`Download`][aria2p.downloads.Download] object to inform about the owner, or None to tell they are global options. \"\"\" self . api = api self . download = download self . _struct = struct or {}","title":"__init__()"},{"location":"reference/options/#aria2p.options.Options.get","text":"Get the value of an option given its name. Parameters: Name Type Description Default item str The name of the option (example: \"input-file\"). required class_ Union[aria2p.options.GenericMeta, Callable] Pass the value through this class/function to change its type. None Returns: Type Description Union[str, int, bool, float] The option value. Source code in aria2p/options.py def get ( self , item : str , class_ : Union [ GenericMeta , Callable ] = None ) -> OptionType : \"\"\" Get the value of an option given its name. Arguments: item: The name of the option (example: \"input-file\"). class_: Pass the value through this class/function to change its type. Returns: The option value. \"\"\" value = self . _struct . get ( item ) if class_ is not None and value is not None : return class_ ( value ) return value","title":"get()"},{"location":"reference/options/#aria2p.options.Options.get_struct","text":"Return a copy of the struct dictionary of this Options object. Returns: Type Description dict A copy of the struct dictionary. Source code in aria2p/options.py def get_struct ( self ) -> dict : \"\"\" Return a copy of the struct dictionary of this Options object. Returns: A copy of the struct dictionary. \"\"\" return deepcopy ( self . _struct )","title":"get_struct()"},{"location":"reference/options/#aria2p.options.Options.set","text":"Set the value of an option given its name. Parameters: Name Type Description Default key str The name of the option (example: \"input-file\"). required value Union[str, int, float, bool] The value to set. required Returns: Type Description bool True if the value was successfully set, False otherwise. Source code in aria2p/options.py def set ( self , key : str , value : Union [ str , int , float , bool ]) -> bool : # noqa: A003 (shadowing set) \"\"\" Set the value of an option given its name. Arguments: key: The name of the option (example: \"input-file\"). value: The value to set. Returns: True if the value was successfully set, False otherwise. \"\"\" if not isinstance ( value , str ): value = str ( value ) if self . download : success = self . api . set_options ({ key : value }, [ self . download ])[ 0 ] else : success = self . api . set_global_options ({ key : value }) if success : self . _struct [ key ] = value return success","title":"set()"},{"location":"reference/stats/","text":"\u00a4 This module defines the Stats class. It holds information retrieved with the get_global_stat method of the client. Stats \u00a4 This class holds information retrieved with the get_global_stat method of the client. download_speed: int property readonly \u00a4 Overall download speed (byte/sec). Returns: Type Description int The overall download speed in bytes per second. num_active: int property readonly \u00a4 Return the number of active downloads. Returns: Type Description int The number of active downloads. num_stopped: int property readonly \u00a4 Return the number of stopped downloads in the current session. This value is capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Returns: Type Description int The number of stopped downloads in the current session (capped). num_stopped_total: int property readonly \u00a4 Return the number of stopped downloads in the current session. This value is not capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Returns: Type Description int The number of stopped downloads in the current session (not capped). num_waiting: int property readonly \u00a4 Return the number of waiting downloads. Returns: Type Description int The number of waiting downloads. upload_speed: int property readonly \u00a4 Overall upload speed (byte/sec). Returns: Type Description int The overall upload speed in bytes per second. __init__ ( self , struct ) special \u00a4 Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/stats.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {} download_speed_string ( self , human_readable = True ) \u00a4 Return the download speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/stats.py def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\" upload_speed_string ( self , human_readable = True ) \u00a4 Return the upload speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/stats.py def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"stats.py"},{"location":"reference/stats/#aria2p.stats","text":"This module defines the Stats class. It holds information retrieved with the get_global_stat method of the client.","title":"aria2p.stats"},{"location":"reference/stats/#aria2p.stats.Stats","text":"This class holds information retrieved with the get_global_stat method of the client.","title":"Stats"},{"location":"reference/stats/#aria2p.stats.Stats.download_speed","text":"Overall download speed (byte/sec). Returns: Type Description int The overall download speed in bytes per second.","title":"download_speed"},{"location":"reference/stats/#aria2p.stats.Stats.num_active","text":"Return the number of active downloads. Returns: Type Description int The number of active downloads.","title":"num_active"},{"location":"reference/stats/#aria2p.stats.Stats.num_stopped","text":"Return the number of stopped downloads in the current session. This value is capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Returns: Type Description int The number of stopped downloads in the current session (capped).","title":"num_stopped"},{"location":"reference/stats/#aria2p.stats.Stats.num_stopped_total","text":"Return the number of stopped downloads in the current session. This value is not capped by the [ --max-download-result ][aria2p.options.Options.max_download_result] option. Returns: Type Description int The number of stopped downloads in the current session (not capped).","title":"num_stopped_total"},{"location":"reference/stats/#aria2p.stats.Stats.num_waiting","text":"Return the number of waiting downloads. Returns: Type Description int The number of waiting downloads.","title":"num_waiting"},{"location":"reference/stats/#aria2p.stats.Stats.upload_speed","text":"Overall upload speed (byte/sec). Returns: Type Description int The overall upload speed in bytes per second.","title":"upload_speed"},{"location":"reference/stats/#aria2p.stats.Stats.__init__","text":"Initialize the object. Parameters: Name Type Description Default struct dict A dictionary Python object returned by the JSON-RPC client. required Source code in aria2p/stats.py def __init__ ( self , struct : dict ) -> None : \"\"\" Initialize the object. Arguments: struct: A dictionary Python object returned by the JSON-RPC client. \"\"\" self . _struct = struct or {}","title":"__init__()"},{"location":"reference/stats/#aria2p.stats.Stats.download_speed_string","text":"Return the download speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The download speed string. Source code in aria2p/stats.py def download_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the download speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The download speed string. \"\"\" if human_readable : return human_readable_bytes ( self . download_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . download_speed ) + \" B/s\"","title":"download_speed_string()"},{"location":"reference/stats/#aria2p.stats.Stats.upload_speed_string","text":"Return the upload speed as string. Parameters: Name Type Description Default human_readable bool Return in human readable format or not. True Returns: Type Description str The upload speed string. Source code in aria2p/stats.py def upload_speed_string ( self , human_readable : bool = True ) -> str : \"\"\" Return the upload speed as string. Arguments: human_readable: Return in human readable format or not. Returns: The upload speed string. \"\"\" if human_readable : return human_readable_bytes ( self . upload_speed , delim = \" \" , postfix = \"/s\" ) return str ( self . upload_speed ) + \" B/s\"","title":"upload_speed_string()"},{"location":"reference/utils/","text":"\u00a4 Utils module. This module contains simple utility classes and functions. SignalHandler \u00a4 A helper class to handle signals. __bool__ ( self ) special \u00a4 Return True when one of the given signal was received, False otherwise. Returns: Type Description bool True when signal received, False otherwise. Source code in aria2p/utils.py def __bool__ ( self ) -> bool : \"\"\" Return True when one of the given signal was received, False otherwise. Returns: True when signal received, False otherwise. \"\"\" return self . triggered __init__ ( self , signals ) special \u00a4 Initialize the object. Parameters: Name Type Description Default signals List[str] List of signals names as found in the signal module (example: SIGTERM). required Source code in aria2p/utils.py def __init__ ( self , signals : List [ str ]) -> None : \"\"\" Initialize the object. Arguments: signals: List of signals names as found in the `signal` module (example: SIGTERM). \"\"\" logger . debug ( \"Signal handler: handling signals \" + \", \" . join ( signals )) self . triggered = False for sig in signals : try : signal . signal ( signal . Signals [ sig ], self . trigger ) # noqa: E1101 (signal.Signals) except ValueError as error : logger . error ( f \"Failed to setup signal handler for { sig } : { error } \" ) trigger ( self , signum , frame ) \u00a4 Mark this instance as 'triggered' (a specified signal was received). Parameters: Name Type Description Default signum The signal code. required frame The signal frame (unused). required Source code in aria2p/utils.py def trigger ( self , signum , frame ) -> None : # noqa: W0613 (unused frame) \"\"\" Mark this instance as 'triggered' (a specified signal was received). Arguments: signum: The signal code. frame: The signal frame (unused). \"\"\" logger . debug ( f \"Signal handler: caught signal { signal . Signals ( signum ) . name } ( { signum } )\" , # noqa: E1101 (signal.Signals) ) self . triggered = True bool_or_value ( value ) \u00a4 Return True for \"true\" , False for \"false\" , original value otherwise. Parameters: Name Type Description Default value Any kind of value. required Returns: Type Description Any True for \"true\" False for \"false\" Original value otherwise Source code in aria2p/utils.py def bool_or_value ( value ) -> Any : \"\"\" Return `True` for `\"true\"`, `False` for `\"false\"`, original value otherwise. Arguments: value: Any kind of value. Returns: - `True` for `\"true\"` - `False` for `\"false\"` - Original value otherwise \"\"\" if value == \"true\" : return True if value == \"false\" : return False return value bool_to_str ( value ) \u00a4 Return \"true\" for True , \"false\" for False , original value otherwise. Parameters: Name Type Description Default value Any kind of value. required Returns: Type Description Any \"true\" for True \"false\" for False Original value otherwise Source code in aria2p/utils.py def bool_to_str ( value ) -> Any : \"\"\" Return `\"true\"` for `True`, `\"false\"` for `False`, original value otherwise. Arguments: value: Any kind of value. Returns: - `\"true\"` for `True` - `\"false\"` for `False` - Original value otherwise \"\"\" if value is True : return \"true\" if value is False : return \"false\" return value get_version () \u00a4 Return the current aria2p version. Returns: Type Description str The current aria2p version. Source code in aria2p/utils.py def get_version () -> str : \"\"\" Return the current `aria2p` version. Returns: The current `aria2p` version. \"\"\" try : distribution = pkg_resources . get_distribution ( \"aria2p\" ) except pkg_resources . DistributionNotFound : return \"0.0.0\" else : return distribution . version human_readable_bytes ( value , digits = 2 , delim = '' , postfix = '' ) \u00a4 Return a human-readable bytes value as a string. Parameters: Name Type Description Default value int The bytes value. required digits int How many decimal digits to use. 2 delim str String to add between value and unit. '' postfix str String to add at the end. '' Returns: Type Description str The human-readable version of the bytes. Source code in aria2p/utils.py def human_readable_bytes ( value : int , digits : int = 2 , delim : str = \"\" , postfix : str = \"\" ) -> str : \"\"\" Return a human-readable bytes value as a string. Arguments: value: The bytes value. digits: How many decimal digits to use. delim: String to add between value and unit. postfix: String to add at the end. Returns: The human-readable version of the bytes. \"\"\" chosen_unit = \"B\" for unit in ( \"KiB\" , \"MiB\" , \"GiB\" , \"TiB\" ): if value > 1000 : value /= 1024 chosen_unit = unit else : break return f \" { value : . { digits } f } \" + delim + chosen_unit + postfix # noqa: WPS221 (not complex) human_readable_timedelta ( value , precision = 0 ) \u00a4 Return a human-readable time delta as a string. Parameters: Name Type Description Default value timedelta The timedelta. required precision int The precision to use: 0 to display all units 1 to display the biggest unit only 2 to display the first two biggest units only n for the first N biggest units, etc. 0 Returns: Type Description str A string representing the time delta. Source code in aria2p/utils.py def human_readable_timedelta ( value : timedelta , precision : int = 0 ) -> str : \"\"\" Return a human-readable time delta as a string. Arguments: value: The timedelta. precision: The precision to use: - `0` to display all units - `1` to display the biggest unit only - `2` to display the first two biggest units only - `n` for the first N biggest units, etc. Returns: A string representing the time delta. \"\"\" pieces = [] if value . days : pieces . append ( f \" { value . days } d\" ) seconds = value . seconds if seconds >= 3600 : # noqa: WPS432 (magic number) hours = int ( seconds / 3600 ) # noqa: WPS432 pieces . append ( f \" { hours } h\" ) seconds -= hours * 3600 # noqa: WPS432 if seconds >= 60 : minutes = int ( seconds / 60 ) pieces . append ( f \" { minutes } m\" ) seconds -= minutes * 60 if seconds > 0 or not pieces : pieces . append ( f \" { seconds } s\" ) if precision == 0 : return \"\" . join ( pieces ) return \"\" . join ( pieces [: precision ]) load_configuration () \u00a4 Return dict from TOML formatted string or file. Returns: Type Description Dict[str, Any] The dict configuration. Source code in aria2p/utils.py def load_configuration () -> Dict [ str , Any ]: \"\"\" Return dict from TOML formatted string or file. Returns: The dict configuration. \"\"\" default_config = \"\"\" [key_bindings] AUTOCLEAR = \"c\" CANCEL = \"esc\" ENTER = \"enter\" FILTER = [\"F4\", \" \\\\\\\\ \"] FOLLOW_ROW = \"F\" HELP = [\"F1\", \"?\"] MOVE_DOWN = [\"down\", \"j\"] MOVE_DOWN_STEP = \"J\" MOVE_END = \"end\" MOVE_HOME = \"home\" MOVE_LEFT = [\"left\", \"h\"] MOVE_RIGHT = [\"right\", \"l\"] MOVE_UP = [\"up\", \"k\"] MOVE_UP_STEP = \"K\" NEXT_SORT = [\"p\", \">\"] PREVIOUS_SORT = \"<\" PRIORITY_DOWN = [\"F8\", \"d\", \"]\"] PRIORITY_UP = [\"F7\", \"u\", \"[\"] QUIT = [\"F10\", \"q\"] REMOVE_ASK = [\"del\", \"F9\"] RETRY = \"r\" RETRY_ALL = \"R\" REVERSE_SORT = \"I\" SEARCH = [\"F3\", \"/\"] SELECT_SORT = \"F6\" SETUP = \"F2\" TOGGLE_EXPAND_COLLAPSE = \"x\" TOGGLE_EXPAND_COLLAPSE_ALL = \"X\" TOGGLE_RESUME_PAUSE = \"space\" TOGGLE_RESUME_PAUSE_ALL = \"P\" TOGGLE_SELECT = \"s\" UN_SELECT_ALL = \"U\" ADD_DOWNLOADS = \"a\" [colors] BRIGHT_HELP = \"CYAN BOLD BLACK\" FOCUSED_HEADER = \"BLACK NORMAL CYAN\" FOCUSED_ROW = \"BLACK NORMAL CYAN\" HEADER = \"BLACK NORMAL GREEN\" METADATA = \"WHITE UNDERLINE BLACK\" SIDE_COLUMN_FOCUSED_ROW = \"BLACK NORMAL CYAN\" SIDE_COLUMN_HEADER = \"BLACK NORMAL GREEN\" SIDE_COLUMN_ROW = \"WHITE NORMAL BLACK\" STATUS_ACTIVE = \"CYAN NORMAL BLACK\" STATUS_COMPLETE = \"GREEN NORMAL BLACK\" STATUS_ERROR = \"RED BOLD BLACK\" STATUS_PAUSED = \"YELLOW NORMAL BLACK\" STATUS_WAITING = \"WHITE BOLD BLACK\" \"\"\" config_dict = {} config_dict [ \"DEFAULT\" ] = toml . loads ( default_config ) # Check for configuration file config_file_path = Path ( user_config_dir ( \"aria2p\" )) / \"config.toml\" if config_file_path . exists (): try : config_dict [ \"USER\" ] = toml . load ( config_file_path ) except Exception as error : # noqa: W0703 (too broad exception) logger . error ( f \"Failed to load configuration file: { error } \" ) else : # Write initial configuration file if it does not exist config_file_path . parent . mkdir ( parents = True , exist_ok = True ) with config_file_path . open ( \"w\" ) as fd : fd . write ( textwrap . dedent ( default_config ) . lstrip ( \" \\n \" )) return config_dict read_lines ( path ) \u00a4 Read lines in a file. Parameters: Name Type Description Default path Union[pathlib.Path, str] The file path. required Returns: Type Description List[str] The list of lines. Source code in aria2p/utils.py def read_lines ( path : PathOrStr ) -> List [ str ]: \"\"\" Read lines in a file. Arguments: path: The file path. Returns: The list of lines. \"\"\" return Path ( path ) . read_text () . splitlines ()","title":"utils.py"},{"location":"reference/utils/#aria2p.utils","text":"Utils module. This module contains simple utility classes and functions.","title":"aria2p.utils"},{"location":"reference/utils/#aria2p.utils.SignalHandler","text":"A helper class to handle signals.","title":"SignalHandler"},{"location":"reference/utils/#aria2p.utils.SignalHandler.__bool__","text":"Return True when one of the given signal was received, False otherwise. Returns: Type Description bool True when signal received, False otherwise. Source code in aria2p/utils.py def __bool__ ( self ) -> bool : \"\"\" Return True when one of the given signal was received, False otherwise. Returns: True when signal received, False otherwise. \"\"\" return self . triggered","title":"__bool__()"},{"location":"reference/utils/#aria2p.utils.SignalHandler.__init__","text":"Initialize the object. Parameters: Name Type Description Default signals List[str] List of signals names as found in the signal module (example: SIGTERM). required Source code in aria2p/utils.py def __init__ ( self , signals : List [ str ]) -> None : \"\"\" Initialize the object. Arguments: signals: List of signals names as found in the `signal` module (example: SIGTERM). \"\"\" logger . debug ( \"Signal handler: handling signals \" + \", \" . join ( signals )) self . triggered = False for sig in signals : try : signal . signal ( signal . Signals [ sig ], self . trigger ) # noqa: E1101 (signal.Signals) except ValueError as error : logger . error ( f \"Failed to setup signal handler for { sig } : { error } \" )","title":"__init__()"},{"location":"reference/utils/#aria2p.utils.SignalHandler.trigger","text":"Mark this instance as 'triggered' (a specified signal was received). Parameters: Name Type Description Default signum The signal code. required frame The signal frame (unused). required Source code in aria2p/utils.py def trigger ( self , signum , frame ) -> None : # noqa: W0613 (unused frame) \"\"\" Mark this instance as 'triggered' (a specified signal was received). Arguments: signum: The signal code. frame: The signal frame (unused). \"\"\" logger . debug ( f \"Signal handler: caught signal { signal . Signals ( signum ) . name } ( { signum } )\" , # noqa: E1101 (signal.Signals) ) self . triggered = True","title":"trigger()"},{"location":"reference/utils/#aria2p.utils.bool_or_value","text":"Return True for \"true\" , False for \"false\" , original value otherwise. Parameters: Name Type Description Default value Any kind of value. required Returns: Type Description Any True for \"true\" False for \"false\" Original value otherwise Source code in aria2p/utils.py def bool_or_value ( value ) -> Any : \"\"\" Return `True` for `\"true\"`, `False` for `\"false\"`, original value otherwise. Arguments: value: Any kind of value. Returns: - `True` for `\"true\"` - `False` for `\"false\"` - Original value otherwise \"\"\" if value == \"true\" : return True if value == \"false\" : return False return value","title":"bool_or_value()"},{"location":"reference/utils/#aria2p.utils.bool_to_str","text":"Return \"true\" for True , \"false\" for False , original value otherwise. Parameters: Name Type Description Default value Any kind of value. required Returns: Type Description Any \"true\" for True \"false\" for False Original value otherwise Source code in aria2p/utils.py def bool_to_str ( value ) -> Any : \"\"\" Return `\"true\"` for `True`, `\"false\"` for `False`, original value otherwise. Arguments: value: Any kind of value. Returns: - `\"true\"` for `True` - `\"false\"` for `False` - Original value otherwise \"\"\" if value is True : return \"true\" if value is False : return \"false\" return value","title":"bool_to_str()"},{"location":"reference/utils/#aria2p.utils.get_version","text":"Return the current aria2p version. Returns: Type Description str The current aria2p version. Source code in aria2p/utils.py def get_version () -> str : \"\"\" Return the current `aria2p` version. Returns: The current `aria2p` version. \"\"\" try : distribution = pkg_resources . get_distribution ( \"aria2p\" ) except pkg_resources . DistributionNotFound : return \"0.0.0\" else : return distribution . version","title":"get_version()"},{"location":"reference/utils/#aria2p.utils.human_readable_bytes","text":"Return a human-readable bytes value as a string. Parameters: Name Type Description Default value int The bytes value. required digits int How many decimal digits to use. 2 delim str String to add between value and unit. '' postfix str String to add at the end. '' Returns: Type Description str The human-readable version of the bytes. Source code in aria2p/utils.py def human_readable_bytes ( value : int , digits : int = 2 , delim : str = \"\" , postfix : str = \"\" ) -> str : \"\"\" Return a human-readable bytes value as a string. Arguments: value: The bytes value. digits: How many decimal digits to use. delim: String to add between value and unit. postfix: String to add at the end. Returns: The human-readable version of the bytes. \"\"\" chosen_unit = \"B\" for unit in ( \"KiB\" , \"MiB\" , \"GiB\" , \"TiB\" ): if value > 1000 : value /= 1024 chosen_unit = unit else : break return f \" { value : . { digits } f } \" + delim + chosen_unit + postfix # noqa: WPS221 (not complex)","title":"human_readable_bytes()"},{"location":"reference/utils/#aria2p.utils.human_readable_timedelta","text":"Return a human-readable time delta as a string. Parameters: Name Type Description Default value timedelta The timedelta. required precision int The precision to use: 0 to display all units 1 to display the biggest unit only 2 to display the first two biggest units only n for the first N biggest units, etc. 0 Returns: Type Description str A string representing the time delta. Source code in aria2p/utils.py def human_readable_timedelta ( value : timedelta , precision : int = 0 ) -> str : \"\"\" Return a human-readable time delta as a string. Arguments: value: The timedelta. precision: The precision to use: - `0` to display all units - `1` to display the biggest unit only - `2` to display the first two biggest units only - `n` for the first N biggest units, etc. Returns: A string representing the time delta. \"\"\" pieces = [] if value . days : pieces . append ( f \" { value . days } d\" ) seconds = value . seconds if seconds >= 3600 : # noqa: WPS432 (magic number) hours = int ( seconds / 3600 ) # noqa: WPS432 pieces . append ( f \" { hours } h\" ) seconds -= hours * 3600 # noqa: WPS432 if seconds >= 60 : minutes = int ( seconds / 60 ) pieces . append ( f \" { minutes } m\" ) seconds -= minutes * 60 if seconds > 0 or not pieces : pieces . append ( f \" { seconds } s\" ) if precision == 0 : return \"\" . join ( pieces ) return \"\" . join ( pieces [: precision ])","title":"human_readable_timedelta()"},{"location":"reference/utils/#aria2p.utils.load_configuration","text":"Return dict from TOML formatted string or file. Returns: Type Description Dict[str, Any] The dict configuration. Source code in aria2p/utils.py def load_configuration () -> Dict [ str , Any ]: \"\"\" Return dict from TOML formatted string or file. Returns: The dict configuration. \"\"\" default_config = \"\"\" [key_bindings] AUTOCLEAR = \"c\" CANCEL = \"esc\" ENTER = \"enter\" FILTER = [\"F4\", \" \\\\\\\\ \"] FOLLOW_ROW = \"F\" HELP = [\"F1\", \"?\"] MOVE_DOWN = [\"down\", \"j\"] MOVE_DOWN_STEP = \"J\" MOVE_END = \"end\" MOVE_HOME = \"home\" MOVE_LEFT = [\"left\", \"h\"] MOVE_RIGHT = [\"right\", \"l\"] MOVE_UP = [\"up\", \"k\"] MOVE_UP_STEP = \"K\" NEXT_SORT = [\"p\", \">\"] PREVIOUS_SORT = \"<\" PRIORITY_DOWN = [\"F8\", \"d\", \"]\"] PRIORITY_UP = [\"F7\", \"u\", \"[\"] QUIT = [\"F10\", \"q\"] REMOVE_ASK = [\"del\", \"F9\"] RETRY = \"r\" RETRY_ALL = \"R\" REVERSE_SORT = \"I\" SEARCH = [\"F3\", \"/\"] SELECT_SORT = \"F6\" SETUP = \"F2\" TOGGLE_EXPAND_COLLAPSE = \"x\" TOGGLE_EXPAND_COLLAPSE_ALL = \"X\" TOGGLE_RESUME_PAUSE = \"space\" TOGGLE_RESUME_PAUSE_ALL = \"P\" TOGGLE_SELECT = \"s\" UN_SELECT_ALL = \"U\" ADD_DOWNLOADS = \"a\" [colors] BRIGHT_HELP = \"CYAN BOLD BLACK\" FOCUSED_HEADER = \"BLACK NORMAL CYAN\" FOCUSED_ROW = \"BLACK NORMAL CYAN\" HEADER = \"BLACK NORMAL GREEN\" METADATA = \"WHITE UNDERLINE BLACK\" SIDE_COLUMN_FOCUSED_ROW = \"BLACK NORMAL CYAN\" SIDE_COLUMN_HEADER = \"BLACK NORMAL GREEN\" SIDE_COLUMN_ROW = \"WHITE NORMAL BLACK\" STATUS_ACTIVE = \"CYAN NORMAL BLACK\" STATUS_COMPLETE = \"GREEN NORMAL BLACK\" STATUS_ERROR = \"RED BOLD BLACK\" STATUS_PAUSED = \"YELLOW NORMAL BLACK\" STATUS_WAITING = \"WHITE BOLD BLACK\" \"\"\" config_dict = {} config_dict [ \"DEFAULT\" ] = toml . loads ( default_config ) # Check for configuration file config_file_path = Path ( user_config_dir ( \"aria2p\" )) / \"config.toml\" if config_file_path . exists (): try : config_dict [ \"USER\" ] = toml . load ( config_file_path ) except Exception as error : # noqa: W0703 (too broad exception) logger . error ( f \"Failed to load configuration file: { error } \" ) else : # Write initial configuration file if it does not exist config_file_path . parent . mkdir ( parents = True , exist_ok = True ) with config_file_path . open ( \"w\" ) as fd : fd . write ( textwrap . dedent ( default_config ) . lstrip ( \" \\n \" )) return config_dict","title":"load_configuration()"},{"location":"reference/utils/#aria2p.utils.read_lines","text":"Read lines in a file. Parameters: Name Type Description Default path Union[pathlib.Path, str] The file path. required Returns: Type Description List[str] The list of lines. Source code in aria2p/utils.py def read_lines ( path : PathOrStr ) -> List [ str ]: \"\"\" Read lines in a file. Arguments: path: The file path. Returns: The list of lines. \"\"\" return Path ( path ) . read_text () . splitlines ()","title":"read_lines()"}]}